{"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Functional Syntax","modules":[{"name":"SwiftQL"}],"roleHeading":"Article","role":"article"},"abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/swiftql\/functionalsyntax"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"],"generated":true,"anchor":"Essentials"}],"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will show you how to use SwiftQLâ€™s built in functional syntax."}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides functional syntax as an alternative to the result builder","type":"text"},{"text":" ","type":"text"},{"text":"syntax discussed in the ","type":"text"},{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"reference","isActive":true},{"text":" guide.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"While the intended goal of SwiftQL is to provide feature parity for both","type":"text"},{"text":" ","type":"text"},{"text":"functional and result builder syntax, some features may not be available while","type":"text"},{"text":" ","type":"text"},{"text":"SwiftQL is under development. If your favorite feature is missing, please file","type":"text"},{"text":" ","type":"text"},{"text":"an issue on GitHub.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"type":"heading","text":"Essentials","anchor":"Essentials","level":2},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides the convenience function ","type":"text"},{"code":"sqlQuery","type":"codeVoice"},{"text":" that lets you compose a","type":"text"},{"text":" ","type":"text"},{"text":"query using functional syntax.","type":"text"}]},{"type":"codeListing","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would be equivalent to writing the statement using result builder syntax:"}]},{"syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main differences are:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Functional syntax","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Result builder syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Uses a return statement."}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"No return statement."}]}]],[[{"inlineContent":[{"text":"Lower case names for statements. e.g. ","type":"text"},{"code":"select","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Statements start with an uppercase letter. e.g. "},{"code":"Select","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements are joined with a dot."}]}],[{"inlineContent":[{"text":"Statements are written on separate lines.","type":"text"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"Functional syntax can also be written without the wrapper function. In this case","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"type":"codeVoice","code":"XLSchema"},{"text":" needs to be instantiated explicitly:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let schema = XLSchema()","let people = schema.table(Person.self, as: \"people\")","let statement = select(people).from(people)"]},{"inlineContent":[{"type":"text","text":"The statement is executed in the same manner as the result builder syntax seen"},{"type":"text","text":" "},{"type":"text","text":"in other examples:"}],"type":"paragraph"},{"code":["let database = GRDBDatabase(url: <url to SQLite database file>)","let request = database.makeRequest(with: statement)","let rows = request.fetchAll()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Below are additional examples using functional syntax."}],"type":"paragraph"},{"level":3,"text":"Example: Variable parameter","anchor":"Example-Variable-parameter","type":"heading"},{"syntax":"swift","type":"codeListing","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")","let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person).where(person.name == nameParameter)","}"]},{"type":"heading","text":"Example: Where","level":3,"anchor":"Example-Where"},{"syntax":"swift","type":"codeListing","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .where((person.name == \"John Doe\") || (person.age == 25))","}"]},{"type":"heading","text":"Example: Order-by","level":3,"anchor":"Example-Order-by"},{"syntax":"swift","type":"codeListing","code":["let statement = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .orderBy(person.name.ascending(), person.age.descending())","}"]},{"type":"heading","text":"Example: Limit","level":3,"anchor":"Example-Limit"},{"syntax":"swift","type":"codeListing","code":["let _ = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .limit(10) ","}"]},{"type":"heading","text":"Example: Inner join","level":3,"anchor":"Example-Inner-join"},{"syntax":"swift","type":"codeListing","code":["let statement = sqlQuery { swift ","    let person = $0.table(Person.self)","    let occupation = $0.table(Occupation.self)","    return select(person)","        .from(person)","        .innerJoin(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"heading","text":"Example: Group-by","level":3,"anchor":"Example-Group-by"},{"syntax":"swift","type":"codeListing","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    let occupation = schema.table(Occupation.self)","","    let result = OccupationCount.columns(","        occupation: occupation.name,","        numberOfPeople: person.id.count()","    )","","    return select(result)","        .from(person))","        .leftJoin(Occupation.self, on: person.occupationId == occupation.id }","        .groupBy(occupation.id)","}"]},{"type":"heading","text":"Example: Left join","level":3,"anchor":"Example-Left-join"},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: occupation.name.coalesce(\"No occupation\") ","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"heading","text":"Example: Update","level":3,"anchor":"Example-Update"},{"syntax":"swift","type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let valueParameter = XLNamedBindingReference<Int>(name: \"value\")","","let statement: any XLUpdateStatement<TestTable> = sqlUpdate { schema in","    let table = schema.into(TestTable.self)","    return update(table, set: TestTable.MetaUpdate(","        value: valueParameter","    ))","    .where(table.id == idParameter)","}","","var request = database.makeRequest(with: statement)","request.set(Self.idParameter, id)","request.set(Self.valueParameter, value)","try request.execute()"]},{"type":"heading","text":"Example: Create","level":3,"anchor":"Example-Create"},{"syntax":"swift","type":"codeListing","code":["let createStatement = sqlCreate { schema in","    let t = schema.create(Temp.self)","    return create(t).as { schema in","        let employee = schema.table(EmployeeTable.self)","        let row = result {","            Temp.SQLReader(","                id: employee.id,","                value: employee.name","            )","        }","        return select(row).from(employee)","    }","}","try database.makeRequest(with: createStatement).execute()"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"references":{"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"url":"\/documentation\/swiftql\/expressions","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","type":"topic","url":"\/documentation\/swiftql\/livequeries","role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/Queries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","title":"Select Queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"url":"\/documentation\/swiftql\/queries","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","kind":"article","type":"topic","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"title":"Built-in Functions","url":"\/documentation\/swiftql\/builtinfunctions","role":"article"},"doc://SwiftQL/documentation/SwiftQL":{"abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"role":"collection","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","url":"\/documentation\/swiftql","kind":"symbol","title":"SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}]}}}