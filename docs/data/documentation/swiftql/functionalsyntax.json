{"sections":[],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftQL"}],"title":"Functional Syntax"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/functionalsyntax"]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will show you how to use SwiftQLâ€™s built in functional syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides functional syntax as an alternative to the result builder"},{"text":" ","type":"text"},{"type":"text","text":"syntax discussed in the "},{"type":"reference","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","isActive":true},{"type":"text","text":" guide."}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"While the intended goal of SwiftQL is to provide feature parity for both"},{"type":"text","text":" "},{"type":"text","text":"functional and result builder syntax, some features may not be available while"},{"type":"text","text":" "},{"type":"text","text":"SwiftQL is under development. If your favorite feature is missing, please file"},{"type":"text","text":" "},{"type":"text","text":"an issue on GitHub."}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Essentials","text":"Essentials","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftQL provides the convenience function "},{"code":"sqlQuery","type":"codeVoice"},{"type":"text","text":" that lets you compose a"},{"type":"text","text":" "},{"type":"text","text":"query using functional syntax."}],"type":"paragraph"},{"syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This would be equivalent to writing the statement using result builder syntax:"}],"type":"paragraph"},{"syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The main differences are:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"type":"text","text":"Functional syntax"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Result builder syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Uses a return statement."}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"No return statement."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Lower case names for statements. e.g. "},{"type":"codeVoice","code":"select"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Statements start with an uppercase letter. e.g. "},{"code":"Select","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Statements are joined with a dot."}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Statements are written on separate lines."}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"Functional syntax can also be written without the wrapper function. In this case"},{"type":"text","text":" "},{"type":"text","text":"an "},{"code":"XLSchema","type":"codeVoice"},{"type":"text","text":" needs to be instantiated explicitly:"}],"type":"paragraph"},{"code":["let schema = XLSchema()","let people = schema.table(Person.self, as: \"people\")","let statement = select(people).from(people)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The statement is executed in the same manner as the result builder syntax seen"},{"type":"text","text":" "},{"type":"text","text":"in other examples:"}]},{"code":["let database = GRDBDatabase(url: <url to SQLite database file>)","let request = database.makeRequest(with: statement)","let rows = request.fetchAll()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Below are additional examples using functional syntax."}]},{"anchor":"Example-Variable-parameter","type":"heading","text":"Example: Variable parameter","level":3},{"code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")","let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person).where(person.name == nameParameter)","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Where","type":"heading","text":"Example: Where","level":3},{"code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .where((person.name == \"John Doe\") || (person.age == 25))","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Order-by","type":"heading","text":"Example: Order-by","level":3},{"code":["let statement = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .orderBy(person.name.ascending(), person.age.descending())","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Limit","type":"heading","text":"Example: Limit","level":3},{"code":["let _ = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .limit(10) ","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Inner-join","type":"heading","text":"Example: Inner join","level":3},{"code":["let statement = sqlQuery { swift ","    let person = $0.table(Person.self)","    let occupation = $0.table(Occupation.self)","    return select(person)","        .from(person)","        .innerJoin(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Group-by","type":"heading","text":"Example: Group-by","level":3},{"code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    let occupation = schema.table(Occupation.self)","","    let result = OccupationCount.columns(","        occupation: occupation.name,","        numberOfPeople: person.id.count()","    )","","    return select(result)","        .from(person))","        .leftJoin(Occupation.self, on: person.occupationId == occupation.id }","        .groupBy(occupation.id)","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Left-join","type":"heading","text":"Example: Left join","level":3},{"code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: occupation.name.coalesce(\"No occupation\") ","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Update","type":"heading","text":"Example: Update","level":3},{"code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let valueParameter = XLNamedBindingReference<Int>(name: \"value\")","","let statement: any XLUpdateStatement<TestTable> = sqlUpdate { schema in","    let table = schema.into(TestTable.self)","    return update(table, set: TestTable.MetaUpdate(","        value: valueParameter","    ))","    .where(table.id == idParameter)","}","","var request = database.makeRequest(with: statement)","request.set(Self.idParameter, id)","request.set(Self.valueParameter, value)","try request.execute()"],"type":"codeListing","syntax":"swift"},{"anchor":"Example-Create","type":"heading","text":"Example: Create","level":3},{"code":["let createStatement = sqlCreate { schema in","    let t = schema.create(Temp.self)","    return create(t).as { schema in","        let employee = schema.table(EmployeeTable.self)","        let row = result {","            Temp.SQLReader(","                id: employee.id,","                value: employee.name","            )","        }","        return select(row).from(employee)","    }","}","try database.makeRequest(with: createStatement).execute()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"anchor":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"],"title":"Essentials"}],"references":{"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","type":"topic","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/gettingstarted","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","type":"topic","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"url":"\/documentation\/swiftql\/queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL":{"abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"title":"SwiftQL","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","url":"\/documentation\/swiftql","kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","type":"topic","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"url":"\/documentation\/swiftql\/livequeries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","type":"topic","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"title":"Built-in Functions","type":"topic","abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/builtinfunctions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","kind":"article","role":"article"}}}