{"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will show you how to use SwiftQLâ€™s built in functional syntax."}]},{"inlineContent":[{"text":"SwiftQL provides functional syntax as an alternative to the result builder","type":"text"},{"text":" ","type":"text"},{"text":"syntax discussed in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","isActive":true},{"text":" guide.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"While the intended goal of SwiftQL is to provide feature parity for both"},{"text":" ","type":"text"},{"type":"text","text":"functional and result builder syntax, some features may not be available while"},{"text":" ","type":"text"},{"type":"text","text":"SwiftQL is under development. If your favorite feature is missing, please file"},{"type":"text","text":" "},{"text":"an issue on GitHub.","type":"text"}],"type":"paragraph"}]},{"type":"heading","level":2,"text":"Essentials","anchor":"Essentials"},{"inlineContent":[{"text":"SwiftQL provides the convenience function ","type":"text"},{"code":"sqlQuery","type":"codeVoice"},{"text":" that lets you compose a","type":"text"},{"text":" ","type":"text"},{"text":"query using functional syntax.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person)","}"]},{"inlineContent":[{"text":"This would be equivalent to writing the statement using result builder syntax:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","}"]},{"inlineContent":[{"text":"The main differences are:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"text":"Functional syntax","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Result builder syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Uses a return statement."}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"No return statement."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lower case names for statements. e.g. "},{"type":"codeVoice","code":"select"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements start with an uppercase letter. e.g. "},{"type":"codeVoice","code":"Select"},{"type":"text","text":"."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements are joined with a dot."}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements are written on separate lines."}]}]]]},{"inlineContent":[{"text":"Functional syntax can also be written without the wrapper function. In this case","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"type":"codeVoice","code":"XLSchema"},{"text":" needs to be instantiated explicitly:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let schema = XLSchema()","let people = schema.table(Person.self, as: \"people\")","let statement = select(people).from(people)"]},{"inlineContent":[{"text":"The statement is executed in the same manner as the result builder syntax seen","type":"text"},{"text":" ","type":"text"},{"text":"in other examples:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let database = GRDBDatabase(url: <url to SQLite database file>)","let request = database.makeRequest(with: statement)","let rows = request.fetchAll()"]},{"inlineContent":[{"text":"Below are additional examples using functional syntax.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Example: Variable parameter","anchor":"Example-Variable-parameter"},{"type":"codeListing","syntax":"swift","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")","let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person).where(person.name == nameParameter)","}"]},{"type":"heading","level":3,"text":"Example: Where","anchor":"Example-Where"},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .where((person.name == \"John Doe\") || (person.age == 25))","}"]},{"type":"heading","level":3,"text":"Example: Order-by","anchor":"Example-Order-by"},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .orderBy(person.name.ascending(), person.age.descending())","}"]},{"type":"heading","level":3,"text":"Example: Limit","anchor":"Example-Limit"},{"type":"codeListing","syntax":"swift","code":["let _ = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .limit(10) ","}"]},{"type":"heading","level":3,"text":"Example: Inner join","anchor":"Example-Inner-join"},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { swift ","    let person = $0.table(Person.self)","    let occupation = $0.table(Occupation.self)","    return select(person)","        .from(person)","        .innerJoin(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"heading","level":3,"text":"Example: Group-by","anchor":"Example-Group-by"},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    let occupation = schema.table(Occupation.self)","","    let result = OccupationCount.columns(","        occupation: occupation.name,","        numberOfPeople: person.id.count()","    )","","    return select(result)","        .from(person))","        .leftJoin(Occupation.self, on: person.occupationId == occupation.id }","        .groupBy(occupation.id)","}"]},{"type":"heading","level":3,"text":"Example: Left join","anchor":"Example-Left-join"},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: occupation.name.coalesce(\"No occupation\") ","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"heading","level":3,"text":"Example: Update","anchor":"Example-Update"},{"type":"codeListing","syntax":"swift","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let valueParameter = XLNamedBindingReference<Int>(name: \"value\")","","let statement: any XLUpdateStatement<TestTable> = sqlUpdate { schema in","    let table = schema.into(TestTable.self)","    return update(table, set: TestTable.MetaUpdate(","        value: valueParameter","    ))","    .where(table.id == idParameter)","}","","var request = database.makeRequest(with: statement)","request.set(Self.idParameter, id)","request.set(Self.valueParameter, value)","try request.execute()"]},{"type":"heading","level":3,"text":"Example: Create","anchor":"Example-Create"},{"type":"codeListing","syntax":"swift","code":["let createStatement = sqlCreate { schema in","    let t = schema.create(Temp.self)","    return create(t).as { schema in","        let employee = schema.table(EmployeeTable.self)","        let row = result {","            Temp.SQLReader(","                id: employee.id,","                value: employee.name","            )","        }","        return select(row).from(employee)","    }","}","try database.makeRequest(with: createStatement).execute()"]}]}],"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/functionalsyntax"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"},"metadata":{"roleHeading":"Article","role":"article","title":"Functional Syntax","modules":[{"name":"SwiftQL"}]},"references":{"doc://SwiftQL/documentation/SwiftQL/Queries":{"kind":"article","title":"Select Queries","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","url":"\/documentation\/swiftql\/queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","role":"collection","title":"SwiftQL","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"type":"topic"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"kind":"article","title":"Getting started","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"kind":"article","title":"Built-in Functions","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","type":"topic","url":"\/documentation\/swiftql\/builtinfunctions","abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"kind":"article","title":"Live queries","role":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","url":"\/documentation\/swiftql\/livequeries","abstract":[{"type":"text","text":"Use Combine Publishers to observe changes to the database."}]},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"kind":"article","role":"article","title":"Expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","url":"\/documentation\/swiftql\/expressions","type":"topic","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}]}}}