{"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"kind":"article","variants":[{"paths":["\/documentation\/swiftql\/functionalsyntax"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"This guide will show you how to use SwiftQLâ€™s built in functional syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftQL provides functional syntax as an alternative to the result builder","type":"text"},{"text":" ","type":"text"},{"text":"syntax discussed in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"reference"},{"type":"text","text":" guide."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"While the intended goal of SwiftQL is to provide feature parity for both","type":"text"},{"text":" ","type":"text"},{"text":"functional and result builder syntax, some features may not be available while","type":"text"},{"text":" ","type":"text"},{"text":"SwiftQL is under development. If your favorite feature is missing, please file","type":"text"},{"text":" ","type":"text"},{"text":"an issue on GitHub.","type":"text"}]}],"type":"aside","name":"Note"},{"level":2,"anchor":"Essentials","type":"heading","text":"Essentials"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides the convenience function ","type":"text"},{"code":"sqlQuery","type":"codeVoice"},{"text":" that lets you compose a","type":"text"},{"text":" ","type":"text"},{"text":"query using functional syntax.","type":"text"}]},{"code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This would be equivalent to writing the statement using result builder syntax:","type":"text"}],"type":"paragraph"},{"code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The main differences are:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Functional syntax","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Result builder syntax","type":"text"}]}]],[[{"inlineContent":[{"text":"Uses a return statement.","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"No return statement."}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Lower case names for statements. e.g. ","type":"text"},{"type":"codeVoice","code":"select"}]}],[{"type":"paragraph","inlineContent":[{"text":"Statements start with an uppercase letter. e.g. ","type":"text"},{"type":"codeVoice","code":"Select"},{"text":".","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Statements are joined with a dot.","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Statements are written on separate lines.","type":"text"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"Functional syntax can also be written without the wrapper function. In this case","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"XLSchema","type":"codeVoice"},{"text":" needs to be instantiated explicitly:","type":"text"}]},{"code":["let schema = XLSchema()","let people = schema.table(Person.self, as: \"people\")","let statement = select(people).from(people)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The statement is executed in the same manner as the result builder syntax seen","type":"text"},{"text":" ","type":"text"},{"text":"in other examples:","type":"text"}],"type":"paragraph"},{"code":["let database = GRDBDatabase(url: <url to SQLite database file>)","let request = database.makeRequest(with: statement)","let rows = request.fetchAll()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Below are additional examples using functional syntax.","type":"text"}],"type":"paragraph"},{"text":"Example: Variable parameter","anchor":"Example-Variable-parameter","type":"heading","level":3},{"code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")","let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person).where(person.name == nameParameter)","}"],"type":"codeListing","syntax":"swift"},{"text":"Example: Where","type":"heading","anchor":"Example-Where","level":3},{"syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .where((person.name == \"John Doe\") || (person.age == 25))","}"],"type":"codeListing"},{"text":"Example: Order-by","type":"heading","anchor":"Example-Order-by","level":3},{"syntax":"swift","code":["let statement = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .orderBy(person.name.ascending(), person.age.descending())","}"],"type":"codeListing"},{"text":"Example: Limit","type":"heading","anchor":"Example-Limit","level":3},{"syntax":"swift","code":["let _ = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .limit(10) ","}"],"type":"codeListing"},{"text":"Example: Inner join","type":"heading","anchor":"Example-Inner-join","level":3},{"code":["let statement = sqlQuery { swift ","    let person = $0.table(Person.self)","    let occupation = $0.table(Occupation.self)","    return select(person)","        .from(person)","        .innerJoin(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing","syntax":"swift"},{"text":"Example: Group-by","type":"heading","anchor":"Example-Group-by","level":3},{"syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    let occupation = schema.table(Occupation.self)","","    let result = OccupationCount.columns(","        occupation: occupation.name,","        numberOfPeople: person.id.count()","    )","","    return select(result)","        .from(person))","        .leftJoin(Occupation.self, on: person.occupationId == occupation.id }","        .groupBy(occupation.id)","}"],"type":"codeListing"},{"text":"Example: Left join","type":"heading","anchor":"Example-Left-join","level":3},{"code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: occupation.name.coalesce(\"No occupation\") ","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Example-Update","type":"heading","text":"Example: Update"},{"code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let valueParameter = XLNamedBindingReference<Int>(name: \"value\")","","let statement: any XLUpdateStatement<TestTable> = sqlUpdate { schema in","    let table = schema.into(TestTable.self)","    return update(table, set: TestTable.MetaUpdate(","        value: valueParameter","    ))","    .where(table.id == idParameter)","}","","var request = database.makeRequest(with: statement)","request.set(Self.idParameter, id)","request.set(Self.valueParameter, value)","try request.execute()"],"type":"codeListing","syntax":"swift"},{"text":"Example: Create","anchor":"Example-Create","type":"heading","level":3},{"code":["let createStatement = sqlCreate { schema in","    let t = schema.create(Temp.self)","    return create(t).as { schema in","        let employee = schema.table(EmployeeTable.self)","        let row = result {","            Temp.SQLReader(","                id: employee.id,","                value: employee.name","            )","        }","        return select(row).from(employee)","    }","}","try database.makeRequest(with: createStatement).execute()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"SwiftQL"}],"role":"article","title":"Functional Syntax","roleHeading":"Article"},"references":{"doc://SwiftQL/documentation/SwiftQL":{"url":"\/documentation\/swiftql","role":"collection","title":"SwiftQL","kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"kind":"article","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","role":"article","url":"\/documentation\/swiftql\/gettingstarted","title":"Getting started"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"kind":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","role":"collectionGroup","url":"\/documentation\/swiftql\/documentation","title":"SwiftQL"}}}