{"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"metadata":{"role":"article","modules":[{"name":"SwiftQL"}],"title":"Functional Syntax","roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"},"abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This guide will show you how to use SwiftQLâ€™s built in functional syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides functional syntax as an alternative to the result builder","type":"text"},{"text":" ","type":"text"},{"text":"syntax discussed in the ","type":"text"},{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","isActive":true,"type":"reference"},{"text":" guide.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"While the intended goal of SwiftQL is to provide feature parity for both","type":"text"},{"text":" ","type":"text"},{"text":"functional and result builder syntax, some features may not be available while","type":"text"},{"text":" ","type":"text"},{"text":"SwiftQL is under development. If your favorite feature is missing, please file","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an issue on GitHub."}]}],"style":"note","name":"Note"},{"anchor":"Essentials","type":"heading","level":2,"text":"Essentials"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides the convenience function "},{"type":"codeVoice","code":"sqlQuery"},{"type":"text","text":" that lets you compose a"},{"type":"text","text":" "},{"type":"text","text":"query using functional syntax."}]},{"syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would be equivalent to writing the statement using result builder syntax:"}]},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main differences are:"}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Functional syntax"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Result builder syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"Uses a return statement.","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"No return statement."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lower case names for statements. e.g. "},{"code":"select","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements start with an uppercase letter. e.g. "},{"type":"codeVoice","code":"Select"},{"type":"text","text":"."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements are joined with a dot."}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Statements are written on separate lines."}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functional syntax can also be written without the wrapper function. In this case"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"code":"XLSchema","type":"codeVoice"},{"type":"text","text":" needs to be instantiated explicitly:"}]},{"type":"codeListing","syntax":"swift","code":["let schema = XLSchema()","let people = schema.table(Person.self, as: \"people\")","let statement = select(people).from(people)"]},{"type":"paragraph","inlineContent":[{"text":"The statement is executed in the same manner as the result builder syntax seen","type":"text"},{"type":"text","text":" "},{"text":"in other examples:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let database = GRDBDatabase(url: <url to SQLite database file>)","let request = database.makeRequest(with: statement)","let rows = request.fetchAll()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Below are additional examples using functional syntax."}]},{"type":"heading","text":"Example: Variable parameter","anchor":"Example-Variable-parameter","level":3},{"type":"codeListing","syntax":"swift","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")","let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person).where(person.name == nameParameter)","}"]},{"level":3,"type":"heading","text":"Example: Where","anchor":"Example-Where"},{"syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .where((person.name == \"John Doe\") || (person.age == 25))","}"],"type":"codeListing"},{"level":3,"type":"heading","text":"Example: Order-by","anchor":"Example-Order-by"},{"syntax":"swift","code":["let statement = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .orderBy(person.name.ascending(), person.age.descending())","}"],"type":"codeListing"},{"level":3,"type":"heading","text":"Example: Limit","anchor":"Example-Limit"},{"syntax":"swift","code":["let _ = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .limit(10) ","}"],"type":"codeListing"},{"level":3,"type":"heading","text":"Example: Inner join","anchor":"Example-Inner-join"},{"type":"codeListing","code":["let statement = sqlQuery { swift ","    let person = $0.table(Person.self)","    let occupation = $0.table(Occupation.self)","    return select(person)","        .from(person)","        .innerJoin(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift"},{"level":3,"type":"heading","text":"Example: Group-by","anchor":"Example-Group-by"},{"type":"codeListing","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    let occupation = schema.table(Occupation.self)","","    let result = OccupationCount.columns(","        occupation: occupation.name,","        numberOfPeople: person.id.count()","    )","","    return select(result)","        .from(person))","        .leftJoin(Occupation.self, on: person.occupationId == occupation.id }","        .groupBy(occupation.id)","}"],"syntax":"swift"},{"level":3,"type":"heading","text":"Example: Left join","anchor":"Example-Left-join"},{"code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: occupation.name.coalesce(\"No occupation\") ","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Example: Update","anchor":"Example-Update","level":3},{"code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let valueParameter = XLNamedBindingReference<Int>(name: \"value\")","","let statement: any XLUpdateStatement<TestTable> = sqlUpdate { schema in","    let table = schema.into(TestTable.self)","    return update(table, set: TestTable.MetaUpdate(","        value: valueParameter","    ))","    .where(table.id == idParameter)","}","","var request = database.makeRequest(with: statement)","request.set(Self.idParameter, id)","request.set(Self.valueParameter, value)","try request.execute()"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","anchor":"Example-Create","text":"Example: Create"},{"type":"codeListing","syntax":"swift","code":["let createStatement = sqlCreate { schema in","    let t = schema.create(Temp.self)","    return create(t).as { schema in","        let employee = schema.table(EmployeeTable.self)","        let row = result {","            Temp.SQLReader(","                id: employee.id,","                value: employee.name","            )","        }","        return select(row).from(employee)","    }","}","try database.makeRequest(with: createStatement).execute()"]}]}],"sections":[],"kind":"article","seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"],"generated":true,"anchor":"Essentials"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/functionalsyntax"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","type":"topic","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"url":"\/documentation\/swiftql\/livequeries","kind":"article","title":"Live queries","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","kind":"article","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","type":"topic","role":"article"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"url":"\/documentation\/swiftql\/builtinfunctions","role":"article","title":"Built-in Functions","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"kind":"article"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","url":"\/documentation\/swiftql","role":"collection"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","kind":"article","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","kind":"article","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","url":"\/documentation\/swiftql\/queries","role":"article"}}}