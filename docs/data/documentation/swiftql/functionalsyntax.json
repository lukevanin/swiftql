{"metadata":{"roleHeading":"Article","modules":[{"name":"SwiftQL"}],"title":"Functional Syntax","role":"article"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/functionalsyntax"]}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This guide will show you how to use SwiftQLâ€™s built in functional syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides functional syntax as an alternative to the result builder","type":"text"},{"text":" ","type":"text"},{"text":"syntax discussed in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted"},{"type":"text","text":" guide."}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"While the intended goal of SwiftQL is to provide feature parity for both"},{"text":" ","type":"text"},{"text":"functional and result builder syntax, some features may not be available while","type":"text"},{"text":" ","type":"text"},{"text":"SwiftQL is under development. If your favorite feature is missing, please file","type":"text"},{"text":" ","type":"text"},{"text":"an issue on GitHub.","type":"text"}],"type":"paragraph"}]},{"type":"heading","level":2,"anchor":"Essentials","text":"Essentials"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides the convenience function "},{"code":"sqlQuery","type":"codeVoice"},{"type":"text","text":" that lets you compose a"},{"text":" ","type":"text"},{"type":"text","text":"query using functional syntax."}]},{"code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This would be equivalent to writing the statement using result builder syntax:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","}"]},{"type":"paragraph","inlineContent":[{"text":"The main differences are:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Functional syntax","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Result builder syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Uses a return statement.","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"No return statement.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Lower case names for statements. e.g. ","type":"text"},{"code":"select","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Statements start with an uppercase letter. e.g. ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":".","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Statements are joined with a dot.","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Statements are written on separate lines.","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functional syntax can also be written without the wrapper function. In this case"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"XLSchema"},{"type":"text","text":" needs to be instantiated explicitly:"}]},{"type":"codeListing","syntax":"swift","code":["let schema = XLSchema()","let people = schema.table(Person.self, as: \"people\")","let statement = select(people).from(people)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The statement is executed in the same manner as the result builder syntax seen"},{"type":"text","text":" "},{"type":"text","text":"in other examples:"}]},{"type":"codeListing","syntax":"swift","code":["let database = GRDBDatabase(url: <url to SQLite database file>)","let request = database.makeRequest(with: statement)","let rows = request.fetchAll()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Below are additional examples using functional syntax."}]},{"type":"heading","anchor":"Example-Variable-parameter","text":"Example: Variable parameter","level":3},{"type":"codeListing","syntax":"swift","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")","let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person).from(person).where(person.name == nameParameter)","}"]},{"type":"heading","anchor":"Example-Where","text":"Example: Where","level":3},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .where((person.name == \"John Doe\") || (person.age == 25))","}"]},{"type":"heading","anchor":"Example-Order-by","text":"Example: Order-by","level":3},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .orderBy(person.name.ascending(), person.age.descending())","}"]},{"type":"heading","anchor":"Example-Limit","text":"Example: Limit","level":3},{"type":"codeListing","syntax":"swift","code":["let _ = sqlQuery { schema in ","    let person = schema.table(Person.self)","    return select(person)","        .from(person)","        .limit(10) ","}"]},{"type":"heading","anchor":"Example-Inner-join","text":"Example: Inner join","level":3},{"type":"codeListing","syntax":"swift","code":["let statement = sqlQuery { swift ","    let person = $0.table(Person.self)","    let occupation = $0.table(Occupation.self)","    return select(person)","        .from(person)","        .innerJoin(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"heading","anchor":"Example-Group-by","text":"Example: Group-by","level":3},{"code":["let statement = sqlQuery { schema in","    let person = schema.table(Person.self)","    let occupation = schema.table(Occupation.self)","","    let result = OccupationCount.columns(","        occupation: occupation.name,","        numberOfPeople: person.id.count()","    )","","    return select(result)","        .from(person))","        .leftJoin(Occupation.self, on: person.occupationId == occupation.id }","        .groupBy(occupation.id)","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Example: Left join","anchor":"Example-Left-join","level":3},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: occupation.name.coalesce(\"No occupation\") ","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"heading","level":3,"anchor":"Example-Update","text":"Example: Update"},{"syntax":"swift","type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let valueParameter = XLNamedBindingReference<Int>(name: \"value\")","","let statement: any XLUpdateStatement<TestTable> = sqlUpdate { schema in","    let table = schema.into(TestTable.self)","    return update(table, set: TestTable.MetaUpdate(","        value: valueParameter","    ))","    .where(table.id == idParameter)","}","","var request = database.makeRequest(with: statement)","request.set(Self.idParameter, id)","request.set(Self.valueParameter, value)","try request.execute()"]},{"type":"heading","level":3,"anchor":"Example-Create","text":"Example: Create"},{"code":["let createStatement = sqlCreate { schema in","    let t = schema.create(Temp.self)","    return create(t).as { schema in","        let employee = schema.table(EmployeeTable.self)","        let row = result {","            Temp.SQLReader(","                id: employee.id,","                value: employee.name","            )","        }","        return select(row).from(employee)","    }","}","try database.makeRequest(with: createStatement).execute()"],"syntax":"swift","type":"codeListing"}]}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"type":"topic","kind":"article","url":"\/documentation\/swiftql\/gettingstarted","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"title":"Getting started"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","role":"collection","type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"title":"SwiftQL","role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","url":"\/documentation\/swiftql\/documentation"}}}