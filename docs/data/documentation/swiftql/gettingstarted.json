{"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"SwiftQL"}],"role":"article","title":"Getting started"},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This guide covers the fundamental functionality provided by SwiftQL. After","type":"text"},{"text":" ","type":"text"},{"text":"completing this you will be able to perform essential database operations","type":"text"},{"text":" ","type":"text"},{"text":"using SwiftQL.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This guide assumes cursory understanding of SQL as used in SQLite. This guide","type":"text"},{"text":" ","type":"text"},{"text":"will not attempt to teach SQL, but aims to provide sufficient detail to be","type":"text"},{"text":" ","type":"text"},{"text":"useful to non-experts and newcomers to SQL.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Please refer to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.sqlite.org\/lang.html"},{"text":" for a more","type":"text"},{"text":" ","type":"text"},{"text":"comprehensive discussion about using SQL.","type":"text"}]},{"type":"heading","anchor":"Defining-tables","text":"Defining tables","level":2},{"type":"paragraph","inlineContent":[{"text":"Before we can query our database we need to define the structure of our tables.","type":"text"},{"text":" ","type":"text"},{"text":"A table is defined using a ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", annotated with ","type":"text"},{"code":"@SQLTable","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["import SwiftQL","","@SQLTable struct Person {","    var id: String","    var occupationId: String?","    var name: String","    var age: Int","} "],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This defines a table named ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" with some properties. SwiftQL supports the","type":"text"},{"text":" ","type":"text"},{"text":"following intrinsic (fundamental) properties which correspond to SQLite counter","type":"text"},{"text":" ","type":"text"},{"text":"parts:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SQLite"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"text":"INTEGER (0 or 1)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Int","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"INTEGER","type":"text"}]}]],[[{"inlineContent":[{"type":"text","text":"Double"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"REAL"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"TEXT","type":"text"}]}]],[[{"inlineContent":[{"text":"Data","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"BLOB"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL also supports optional types, which correspond to a ","type":"text"},{"code":"NULL","type":"codeVoice"},{"type":"text","text":" column in"},{"text":" ","type":"text"},{"text":"SQLite.","type":"text"}]},{"type":"heading","anchor":"Creating-tables","text":"Creating tables","level":3},{"type":"paragraph","inlineContent":[{"text":"Before you can use your table you need to create it. In SwiftQL we can use the","type":"text"},{"text":" ","type":"text"},{"code":"sqlCreate","type":"codeVoice"},{"type":"text","text":" helper function to create a basic table. SwiftQL also allows you to"},{"type":"text","text":" "},{"type":"text","text":"to create tables using "},{"type":"codeVoice","code":"Select"},{"type":"text","text":" statements, which we will look at later."}]},{"type":"codeListing","syntax":"swift","code":["let createPersonStatement = sqlCreate(Person.self)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would be equivalent to writing the following SQL:"}]},{"type":"codeListing","syntax":"sql","code":["CREATE TABLE IF NOT EXISTS Person (","    id TEXT NOT NULL,","    occupationId TEXT NULL,","    name TEXT NOT NULL,","    age INT NOT NULL",");"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL translates to the Swift types to a compatible intrinsic type in SQLite."},{"type":"text","text":" "},{"type":"text","text":"Non-optional fields are been defined as "},{"type":"codeVoice","code":"NOT NULL"},{"type":"text","text":", while optional fields are"},{"type":"text","text":" "},{"type":"text","text":"defined as "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"IF NOT EXISTS"},{"type":"text","text":" term is added by SwiftQL, and informs SQLite to"},{"type":"text","text":" "},{"type":"text","text":"bypass creating the table if it already exists. This allows us to safely execute"},{"type":"text","text":" "},{"type":"text","text":"the  create statement when our app starts, without first needing to check if the"},{"type":"text","text":" "},{"text":"table already exists.","type":"text"}]}],"type":"aside","name":"Note","style":"note"},{"text":"Executing statements","level":2,"type":"heading","anchor":"Executing-statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides a default implementation using GRDB for running statements"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Support for alternative database providers is currently under"},{"text":" ","type":"text"},{"type":"text","text":"development."}]}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"First we initialize our database:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let directory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]","let file = directory.appending(path: \"my_database.sqlite\")","let database = try GRDBDatabase(url: file)"]},{"type":"paragraph","inlineContent":[{"text":"Once the database is initialised, we can create and execute the statement:","type":"text"}]},{"syntax":"swift","code":["try database.makeRequest(with: createPersonStatement).execute()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The database initialization and table creation only needs to happen once in the","type":"text"},{"text":" ","type":"text"},{"text":"application life cycle.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We will follow this pattern of creating and executing statements throughout this","type":"text"},{"text":" ","type":"text"},{"text":"tutorial.","type":"text"}]},{"type":"heading","anchor":"Inserting-data","text":"Inserting data","level":2},{"type":"paragraph","inlineContent":[{"text":"Our database has been created but it is currently empty. Let’s add some data.","type":"text"},{"text":" ","type":"text"},{"text":"First we create an instance of our table struct:","type":"text"}]},{"syntax":null,"code":["let fredPerson = Person(","    id: \"fred\",","    occupationId: nil,","    name: \"Fred\",","    age: \"31\"",")"],"type":"codeListing"},{"inlineContent":[{"text":"We can then create and execute the request:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["try database.makeRequest(with: sqlInsert(fredPerson)).execute()"],"type":"codeListing"},{"inlineContent":[{"text":"This is equivalent to running the following SQL:","type":"text"}],"type":"paragraph"},{"syntax":"sql","code":["INSERT INTO Person (id, occupationId, name, age)","VALUES ('fred', NULL, 'Fred', 31)"],"type":"codeListing"},{"type":"heading","anchor":"Running-select-queries","text":"Running select queries","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have some data, we can run a select query. In the example below we"},{"type":"text","text":" "},{"text":"prepare the query and execute it:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}","let result = try database.makeRequest(with: query).fetchAll()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"result"},{"type":"text","text":" will contain an array of "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" objects matching the query."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We used "},{"code":"fetchAll","type":"codeVoice"},{"text":" to execute a select query instead of calling  ","type":"text"},{"code":"execute","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Using ","type":"text"},{"code":"fetchAll","type":"codeVoice"},{"text":" returns an array of all of the matching records for the query.","type":"text"},{"text":" ","type":"text"},{"text":"We can also use ","type":"text"},{"code":"fetchOne","type":"codeVoice"},{"text":" to fetch only the first result from the query.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let firstResult = try database.makeRequest(with: query).fetchOne()"]},{"inlineContent":[{"type":"text","text":"Select statement syntax is discussed in more detail the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries"},{"type":"text","text":" guide."}],"type":"paragraph"},{"anchor":"Schema-parameter","level":3,"text":"Schema parameter","type":"heading"},{"inlineContent":[{"text":"In the example above we used a ","type":"text"},{"code":"schema","type":"codeVoice"},{"type":"text","text":" parameter in the "},{"type":"codeVoice","code":"sql"},{"type":"text","text":" function to"},{"type":"text","text":" "},{"type":"text","text":"construct a reference to the table used in the query. A common convention is to"},{"type":"text","text":" "},{"type":"text","text":"omit the "},{"type":"codeVoice","code":"schema"},{"type":"text","text":" parameter name entirely and use the default parameter name"},{"type":"text","text":" "},{"type":"codeVoice","code":"$0"},{"type":"text","text":" instead:"}],"type":"paragraph"},{"syntax":"swift","code":["let query = sql { ","    let person = $0.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}"],"type":"codeListing"},{"inlineContent":[{"text":"The guide documentation use the explicit ","type":"text"},{"code":"schema","type":"codeVoice"},{"text":" for clarity.","type":"text"}],"type":"paragraph"},{"anchor":"Prepared-statements","level":3,"text":"Prepared statements","type":"heading"},{"inlineContent":[{"type":"text","text":"So far we have made the request each time we needed to execute it. Instead we"},{"type":"text","text":" "},{"type":"text","text":"can store the request and reuse it later. When the request is created SwiftQL"},{"text":" ","type":"text"},{"text":"will use an SQLite prepared statement. SQLite will parse the SQL string into","type":"text"},{"text":" ","type":"text"},{"text":"low-level byte code which can be executed efficiently, without needing to parse","type":"text"},{"text":" ","type":"text"},{"text":"the SQL each time. Re-using requests can potentially improve performance of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"complex queries at runtime."}],"type":"paragraph"},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.age >= 21 && person.age < 65)","}","let request = try database.makeRequest(with: query)"],"syntax":"swift"},{"inlineContent":[{"text":"Once created we can call the prepared statement whenever it is needed.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let result = try request.fetchAll()"],"syntax":"swift"},{"anchor":"Variables","level":2,"text":"Variables","type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftQL allows you to use variables in queries in a type-safe manner."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"First define a variable binding using the generic "},{"type":"codeVoice","code":"XLNamedBindingReference"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"text":"specifying the type of the variable, as well as a name. The name is used for","type":"text"},{"text":" ","type":"text"},{"text":"debugging SQL statements as does not affect the query:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"We can include the variable parameter in a query:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == nameParameter)","}","let request = try database.makeRequest(with: query)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is equivalent to the following SQL:","type":"text"}]},{"type":"codeListing","code":["SELECT *","FROM Person AS person","WHERE person.name == :name"],"syntax":"sql"},{"type":"paragraph","inlineContent":[{"text":"The name parameter is not assigned to a value yet. We assign the parameter value","type":"text"},{"text":" ","type":"text"},{"text":"when we execute the query. A best practice when assigning parameters is to","type":"text"},{"text":" ","type":"text"},{"text":"create a copy of the request then assign the parameter. We can take advantage of","type":"text"},{"text":" ","type":"text"},{"text":"copy-on-write semantics for value types:","type":"text"}]},{"type":"codeListing","code":["var newRequest = request","newRequest.set(nameParameter, \"Fred\")","return try request.fetchAll()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This binds the value “Fred” to the name parameter in the context of the request","type":"text"},{"text":" ","type":"text"},{"text":"before fetching all of the matching results.","type":"text"}]},{"type":"heading","anchor":"Update-statements","text":"Update statements","level":2},{"type":"paragraph","inlineContent":[{"text":"We can modify an existing record using an update statement. In this example we","type":"text"},{"text":" ","type":"text"},{"text":"set the age of the person whose id is ","type":"text"},{"code":"fred","type":"codeVoice"},{"text":" to the value ","type":"text"},{"code":"42","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let updateStatement = sql { schema in","    let person = schema.into(Person.self)","    Update(person)","    Setting<Person> { row in","        row.age = 42","    }","    Where(","        person.id == 'fred'","    )","}","","try database.makeRequest(with: updateStatement).execute()"],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"schema.into()","type":"codeVoice"},{"text":" when defining a table that is modified in the query.","type":"text"}],"type":"paragraph"}]},{"type":"aside","style":"warning","name":"Warning","content":[{"inlineContent":[{"text":"Omitting the where clause will update all of the records in the","type":"text"},{"text":" ","type":"text"},{"text":"table. A  best practice when using update statements is to always specify a","type":"text"},{"text":" ","type":"text"},{"text":"where clause to limit the scope of changes.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"We can also a prepared statement with named parameters for common update","type":"text"},{"text":" ","type":"text"},{"text":"operations:","type":"text"}]},{"type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let ageParameter = XLNamedBindingReference<Int>(name: \"age\")","","let updateStatement = sql { schema in","    let person = schema.into(Person.self)","    Update(person)","    Setting<Person> { row in","        row.age = ageParameter","    }","    Where(","        person.id == idParameter","    )","}","","let updateRequest = try database.makeRequest(with: updateStatement)","","...","","var newUpdateRequest = updateRequest","newUpdateRequest.set(idParameter, \"fred\")","newUpdateRequest.set(ageParameter, 42)","try newUpdateRequest.execute()"],"syntax":"swift"},{"type":"heading","anchor":"Delete-statements","text":"Delete statements","level":2},{"type":"paragraph","inlineContent":[{"text":"We can delete records by specifying the table and a where clause for the items","type":"text"},{"text":" ","type":"text"},{"text":"to delete. The example shows a prepared statement with parameters:","type":"text"}]},{"type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","","let deleteStatement = sql { schema in","    let person = schema.into(Person.self)","    Delete(person)","    Where(person.id == idParameter)","}","","let deleteRequest = try database.makeRequest(with: deleteStatement)","","...","","var newDeleteRequest = deleteRequest","newDeleteRequest.set(idParameter, \"fred\")","try newDeleteRequest.execute()"],"syntax":"swift"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"anchor":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"title":"Essentials"}],"variants":[{"paths":["\/documentation\/swiftql\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","interfaceLanguage":"swift"},"references":{"https://www.sqlite.org/lang.html":{"title":"SQLite SQL Language Documentation","titleInlineContent":[{"text":"SQLite SQL Language Documentation","type":"text"}],"identifier":"https:\/\/www.sqlite.org\/lang.html","url":"https:\/\/www.sqlite.org\/lang.html","type":"link"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","url":"\/documentation\/swiftql\/queries","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}]},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"title":"Functional Syntax","abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"url":"\/documentation\/swiftql\/functionalsyntax","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","title":"SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","kind":"article","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","role":"article","url":"\/documentation\/swiftql\/livequeries"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","role":"article","title":"Expressions"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"url":"\/documentation\/swiftql\/builtinfunctions","kind":"article","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","title":"Built-in Functions","type":"topic"}}}