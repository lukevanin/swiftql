{"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide covers the fundamental functionality provided by SwiftQL. After"},{"type":"text","text":" "},{"type":"text","text":"completing this you will be able to perform essential database operations"},{"type":"text","text":" "},{"type":"text","text":"using SwiftQL."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide assumes cursory understanding of SQL as used in SQLite. This guide"},{"type":"text","text":" "},{"type":"text","text":"will not attempt to teach SQL, but aims to provide sufficient detail to be"},{"type":"text","text":" "},{"type":"text","text":"useful to non-experts and newcomers to SQL."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Please refer to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.sqlite.org\/lang.html","isActive":true},{"type":"text","text":" for a more"},{"type":"text","text":" "},{"type":"text","text":"comprehensive discussion about using SQL."}]},{"anchor":"Defining-tables","type":"heading","level":2,"text":"Defining tables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before we can query our database we need to define the structure of our tables."},{"type":"text","text":" "},{"type":"text","text":"A table is defined using a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", annotated with "},{"type":"codeVoice","code":"@SQLTable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftQL","","@SQLTable struct Person {","    var id: String","    var occupationId: String?","    var name: String","    var age: Int","} "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This defines a table named "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" with some properties. SwiftQL supports the"},{"type":"text","text":" "},{"type":"text","text":"following intrinsic (fundamental) properties which correspond to SQLite counter"},{"type":"text","text":" "},{"type":"text","text":"parts:"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SQLite"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"INTEGER (0 or 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Int"}]}],[{"type":"paragraph","inlineContent":[{"text":"INTEGER","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Double"}]}],[{"type":"paragraph","inlineContent":[{"text":"REAL","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"TEXT"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Data"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"BLOB"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL also supports optional types, which correspond to a "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" column in"},{"type":"text","text":" "},{"type":"text","text":"SQLite."}]},{"level":3,"type":"heading","text":"Creating tables","anchor":"Creating-tables"},{"type":"paragraph","inlineContent":[{"text":"Before you can use your table you need to create it. In SwiftQL we can use the","type":"text"},{"type":"text","text":" "},{"code":"sqlCreate","type":"codeVoice"},{"text":" helper function to create a basic table. SwiftQL also allows you to","type":"text"},{"text":" ","type":"text"},{"text":"to create tables using ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" statements, which we will look at later.","type":"text"}]},{"type":"codeListing","code":["let createPersonStatement = sqlCreate(Person.self)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would be equivalent to writing the following SQL:"}]},{"syntax":"sql","code":["CREATE TABLE IF NOT EXISTS Person (","    id TEXT NOT NULL,","    occupationId TEXT NULL,","    name TEXT NOT NULL,","    age INT NOT NULL",");"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"SwiftQL translates to the Swift types to a compatible intrinsic type in SQLite."},{"type":"text","text":" "},{"type":"text","text":"Non-optional fields are been defined as "},{"type":"codeVoice","code":"NOT NULL"},{"type":"text","text":", while optional fields are"},{"type":"text","text":" "},{"type":"text","text":"defined as "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"IF NOT EXISTS"},{"type":"text","text":" term is added by SwiftQL, and informs SQLite to"},{"type":"text","text":" "},{"type":"text","text":"bypass creating the table if it already exists. This allows us to safely execute"},{"type":"text","text":" "},{"type":"text","text":"the  create statement when our app starts, without first needing to check if the"},{"type":"text","text":" "},{"type":"text","text":"table already exists."}]}],"style":"note","type":"aside"},{"level":2,"text":"Executing statements","anchor":"Executing-statements","type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftQL provides a default implementation using GRDB for running statements"}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Support for alternative database providers is currently under"},{"type":"text","text":" "},{"type":"text","text":"development."}]}],"style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"First we initialize our database:"}],"type":"paragraph"},{"type":"codeListing","code":["let directory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]","let file = directory.appending(path: \"my_database.sqlite\")","let database = try GRDBDatabase(url: file)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Once the database is initialised, we can create and execute the statement:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try database.makeRequest(with: createPersonStatement).execute()"]},{"inlineContent":[{"type":"text","text":"The database initialization and table creation only needs to happen once in the"},{"type":"text","text":" "},{"type":"text","text":"application life cycle."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We will follow this pattern of creating and executing statements throughout this"},{"type":"text","text":" "},{"type":"text","text":"tutorial."}],"type":"paragraph"},{"level":2,"text":"Inserting data","anchor":"Inserting-data","type":"heading"},{"inlineContent":[{"type":"text","text":"Our database has been created but it is currently empty. Let’s add some data."},{"type":"text","text":" "},{"type":"text","text":"First we create an instance of our table struct:"}],"type":"paragraph"},{"syntax":null,"code":["let fredPerson = Person(","    id: \"fred\",","    occupationId: nil,","    name: \"Fred\",","    age: \"31\"",")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We can then create and execute the request:"}],"type":"paragraph"},{"syntax":null,"code":["try database.makeRequest(with: sqlInsert(fredPerson)).execute()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is equivalent to running the following SQL:"}],"type":"paragraph"},{"syntax":"sql","code":["INSERT INTO Person (id, occupationId, name, age)","VALUES ('fred', NULL, 'Fred', 31)"],"type":"codeListing"},{"level":2,"text":"Running select queries","anchor":"Running-select-queries","type":"heading"},{"inlineContent":[{"type":"text","text":"Now that we have some data, we can run a select query. In the example below we"},{"type":"text","text":" "},{"type":"text","text":"prepare the query and execute it:"}],"type":"paragraph"},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}","let result = try database.makeRequest(with: query).fetchAll()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"result"},{"type":"text","text":" will contain an array of "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" objects matching the query."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We used "},{"type":"codeVoice","code":"fetchAll"},{"type":"text","text":" to execute a select query instead of calling  "},{"type":"codeVoice","code":"execute"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Using "},{"type":"codeVoice","code":"fetchAll"},{"type":"text","text":" returns an array of all of the matching records for the query."},{"type":"text","text":" "},{"type":"text","text":"We can also use "},{"type":"codeVoice","code":"fetchOne"},{"type":"text","text":" to fetch only the first result from the query."}],"type":"paragraph"},{"syntax":"swift","code":["let firstResult = try database.makeRequest(with: query).fetchOne()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Select statement syntax is discussed in more detail the "},{"type":"reference","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","isActive":true},{"type":"text","text":" guide."}],"type":"paragraph"},{"level":3,"text":"Schema parameter","anchor":"Schema-parameter","type":"heading"},{"inlineContent":[{"type":"text","text":"In the example above we used a "},{"type":"codeVoice","code":"schema"},{"type":"text","text":" parameter in the "},{"type":"codeVoice","code":"sql"},{"type":"text","text":" function to"},{"type":"text","text":" "},{"type":"text","text":"construct a reference to the table used in the query. A common convention is to"},{"type":"text","text":" "},{"type":"text","text":"omit the "},{"type":"codeVoice","code":"schema"},{"type":"text","text":" parameter name entirely and use the default parameter name"},{"type":"text","text":" "},{"type":"codeVoice","code":"$0"},{"type":"text","text":" instead:"}],"type":"paragraph"},{"syntax":"swift","code":["let query = sql { ","    let person = $0.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The guide documentation use the explicit "},{"type":"codeVoice","code":"schema"},{"type":"text","text":" for clarity."}],"type":"paragraph"},{"level":3,"text":"Prepared statements","anchor":"Prepared-statements","type":"heading"},{"inlineContent":[{"type":"text","text":"So far we have made the request each time we needed to execute it. Instead we"},{"type":"text","text":" "},{"type":"text","text":"can store the request and reuse it later. When the request is created SwiftQL"},{"type":"text","text":" "},{"type":"text","text":"will use an SQLite prepared statement. SQLite will parse the SQL string into"},{"type":"text","text":" "},{"type":"text","text":"low-level byte code which can be executed efficiently, without needing to parse"},{"type":"text","text":" "},{"type":"text","text":"the SQL each time. Re-using requests can potentially improve performance of"},{"type":"text","text":" "},{"type":"text","text":"complex queries at runtime."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.age >= 21 && person.age < 65)","}","let request = try database.makeRequest(with: query)"]},{"type":"paragraph","inlineContent":[{"text":"Once created we can call the prepared statement whenever it is needed.","type":"text"}]},{"code":["let result = try request.fetchAll()"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Variables","anchor":"Variables","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL allows you to use variables in queries in a type-safe manner.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First define a variable binding using the generic "},{"code":"XLNamedBindingReference","type":"codeVoice"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"specifying the type of the variable, as well as a name. The name is used for"},{"text":" ","type":"text"},{"type":"text","text":"debugging SQL statements as does not affect the query:"}]},{"type":"codeListing","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We can include the variable parameter in a query:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == nameParameter)","}","let request = try database.makeRequest(with: query)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is equivalent to the following SQL:"}]},{"type":"codeListing","code":["SELECT *","FROM Person AS person","WHERE person.name == :name"],"syntax":"sql"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name parameter is not assigned to a value yet. We assign the parameter value"},{"text":" ","type":"text"},{"text":"when we execute the query. A best practice when assigning parameters is to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"create a copy of the request then assign the parameter. We can take advantage of"},{"type":"text","text":" "},{"text":"copy-on-write semantics for value types:","type":"text"}]},{"type":"codeListing","code":["var newRequest = request","newRequest.set(nameParameter, \"Fred\")","return try request.fetchAll()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This binds the value “Fred” to the name parameter in the context of the request"},{"type":"text","text":" "},{"type":"text","text":"before fetching all of the matching results."}]},{"type":"heading","level":2,"text":"Update statements","anchor":"Update-statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can modify an existing record using an update statement. In this example we"},{"type":"text","text":" "},{"type":"text","text":"set the age of the person whose id is "},{"type":"codeVoice","code":"fred"},{"type":"text","text":" to the value "},{"type":"codeVoice","code":"42"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let updateStatement = sql { schema in","    let person = schema.into(Person.self)","    Update(person)","    Setting<Person> { row in","        row.age = 42","    }","    Where(","        person.id == 'fred'","    )","}","","try database.makeRequest(with: updateStatement).execute()"],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"schema.into()"},{"type":"text","text":" when defining a table that is modified in the query."}]}]},{"type":"aside","style":"warning","name":"Warning","content":[{"inlineContent":[{"text":"Omitting the where clause will update all of the records in the","type":"text"},{"text":" ","type":"text"},{"text":"table. A  best practice when using update statements is to always specify a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where clause to limit the scope of changes."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"We can also a prepared statement with named parameters for common update","type":"text"},{"text":" ","type":"text"},{"text":"operations:","type":"text"}]},{"type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let ageParameter = XLNamedBindingReference<Int>(name: \"age\")","","let updateStatement = sql { schema in","    let person = schema.into(Person.self)","    Update(person)","    Setting<Person> { row in","        row.age = ageParameter","    }","    Where(","        person.id == idParameter","    )","}","","let updateRequest = try database.makeRequest(with: updateStatement)","","...","","var newUpdateRequest = updateRequest","newUpdateRequest.set(idParameter, \"fred\")","newUpdateRequest.set(ageParameter, 42)","try newUpdateRequest.execute()"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Delete-statements","text":"Delete statements"},{"type":"paragraph","inlineContent":[{"text":"We can delete records by specifying the table and a where clause for the items","type":"text"},{"text":" ","type":"text"},{"text":"to delete. The example shows a prepared statement with parameters:","type":"text"}]},{"type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","","let deleteStatement = sql { schema in","    let person = schema.into(Person.self)","    Delete(person)","    Where(person.id == idParameter)","}","","let deleteRequest = try database.makeRequest(with: deleteStatement)","","...","","var newDeleteRequest = deleteRequest","newDeleteRequest.set(idParameter, \"fred\")","try newDeleteRequest.execute()"],"syntax":"swift"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted"},"sections":[],"metadata":{"role":"article","modules":[{"name":"SwiftQL"}],"title":"Getting started","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"kind":"article","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/gettingstarted"]}],"references":{"doc://SwiftQL/documentation/SwiftQL":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","title":"SwiftQL","url":"\/documentation\/swiftql","abstract":[],"role":"collection","kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/swiftql\/documentation","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","title":"SwiftQL"},"https://www.sqlite.org/lang.html":{"title":"SQLite SQL Language Documentation","type":"link","url":"https:\/\/www.sqlite.org\/lang.html","identifier":"https:\/\/www.sqlite.org\/lang.html","titleInlineContent":[{"type":"text","text":"SQLite SQL Language Documentation"}]},"doc://SwiftQL/documentation/SwiftQL/Queries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","title":"Select Queries","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}],"url":"\/documentation\/swiftql\/queries","role":"article","kind":"article"}}}