{"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"metadata":{"modules":[{"name":"SwiftQL"}],"roleHeading":"Article","title":"Getting started","role":"article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted"},"abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"This guide covers the fundamental functionality provided by SwiftQL. After"},{"type":"text","text":" "},{"type":"text","text":"completing this you will be able to perform essential database operations"},{"type":"text","text":" "},{"type":"text","text":"using SwiftQL."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This guide assumes cursory understanding of SQL as used in SQLite. This guide"},{"type":"text","text":" "},{"type":"text","text":"will not attempt to teach SQL, but aims to provide sufficient detail to be"},{"type":"text","text":" "},{"type":"text","text":"useful to non-experts and newcomers to SQL."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Please refer to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.sqlite.org\/lang.html","isActive":true},{"type":"text","text":" for a more"},{"type":"text","text":" "},{"type":"text","text":"comprehensive discussion about using SQL."}],"type":"paragraph"},{"text":"Defining tables","type":"heading","level":2,"anchor":"Defining-tables"},{"inlineContent":[{"type":"text","text":"Before we can query our database we need to define the structure of our tables."},{"type":"text","text":" "},{"type":"text","text":"A table is defined using a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", annotated with "},{"type":"codeVoice","code":"@SQLTable"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["import SwiftQL","","@SQLTable struct Person {","    var id: String","    var occupationId: String?","    var name: String","    var age: Int","} "],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This defines a table named "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" with some properties. SwiftQL supports the"},{"type":"text","text":" "},{"type":"text","text":"following intrinsic (fundamental) properties which correspond to SQLite counter"},{"type":"text","text":" "},{"type":"text","text":"parts:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"SwiftQL","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"SQLite","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Bool","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"INTEGER (0 or 1)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Int","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"INTEGER","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Double","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"REAL","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"TEXT","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Data","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"BLOB","type":"text"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"SwiftQL also supports optional types, which correspond to a "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" column in"},{"type":"text","text":" "},{"type":"text","text":"SQLite."}],"type":"paragraph"},{"text":"Creating tables","type":"heading","level":3,"anchor":"Creating-tables"},{"inlineContent":[{"type":"text","text":"Before you can use your table you need to create it. In SwiftQL we can use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"sqlCreate"},{"type":"text","text":" helper function to create a basic table. SwiftQL also allows you to"},{"type":"text","text":" "},{"type":"text","text":"to create tables using "},{"type":"codeVoice","code":"Select"},{"type":"text","text":" statements, which we will look at later."}],"type":"paragraph"},{"type":"codeListing","code":["let createPersonStatement = sqlCreate(Person.self)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This would be equivalent to writing the following SQL:"}],"type":"paragraph"},{"type":"codeListing","code":["CREATE TABLE IF NOT EXISTS Person (","    id TEXT NOT NULL,","    occupationId TEXT NULL,","    name TEXT NOT NULL,","    age INT NOT NULL",");"],"syntax":"sql"},{"inlineContent":[{"type":"text","text":"SwiftQL translates to the Swift types to a compatible intrinsic type in SQLite."},{"type":"text","text":" "},{"type":"text","text":"Non-optional fields are been defined as "},{"type":"codeVoice","code":"NOT NULL"},{"type":"text","text":", while optional fields are"},{"type":"text","text":" "},{"type":"text","text":"defined as "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"IF NOT EXISTS","type":"codeVoice"},{"text":" term is added by SwiftQL, and informs SQLite to","type":"text"},{"text":" ","type":"text"},{"text":"bypass creating the table if it already exists. This allows us to safely execute","type":"text"},{"text":" ","type":"text"},{"text":"the  create statement when our app starts, without first needing to check if the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"table already exists."}]}]},{"text":"Executing statements","type":"heading","level":2,"anchor":"Executing-statements"},{"inlineContent":[{"type":"text","text":"SwiftQL provides a default implementation using GRDB for running statements"}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Support for alternative database providers is currently under"},{"type":"text","text":" "},{"type":"text","text":"development."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"First we initialize our database:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let directory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]","let file = directory.appending(path: \"my_database.sqlite\")","let database = try GRDBDatabase(url: file)"]},{"type":"paragraph","inlineContent":[{"text":"Once the database is initialised, we can create and execute the statement:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try database.makeRequest(with: createPersonStatement).execute()"]},{"type":"paragraph","inlineContent":[{"text":"The database initialization and table creation only needs to happen once in the","type":"text"},{"text":" ","type":"text"},{"text":"application life cycle.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We will follow this pattern of creating and executing statements throughout this","type":"text"},{"text":" ","type":"text"},{"text":"tutorial.","type":"text"}]},{"level":2,"type":"heading","text":"Inserting data","anchor":"Inserting-data"},{"type":"paragraph","inlineContent":[{"text":"Our database has been created but it is currently empty. Let’s add some data.","type":"text"},{"text":" ","type":"text"},{"text":"First we create an instance of our table struct:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let fredPerson = Person(","    id: \"fred\",","    occupationId: nil,","    name: \"Fred\",","    age: \"31\"",")"]},{"type":"paragraph","inlineContent":[{"text":"We can then create and execute the request:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["try database.makeRequest(with: sqlInsert(fredPerson)).execute()"]},{"type":"paragraph","inlineContent":[{"text":"This is equivalent to running the following SQL:","type":"text"}]},{"type":"codeListing","syntax":"sql","code":["INSERT INTO Person (id, occupationId, name, age)","VALUES ('fred', NULL, 'Fred', 31)"]},{"level":2,"type":"heading","text":"Running select queries","anchor":"Running-select-queries"},{"type":"paragraph","inlineContent":[{"text":"Now that we have some data, we can run a select query. In the example below we","type":"text"},{"text":" ","type":"text"},{"text":"prepare the query and execute it:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}","let result = try database.makeRequest(with: query).fetchAll()"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"result"},{"text":" will contain an array of ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" objects matching the query.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We used ","type":"text"},{"type":"codeVoice","code":"fetchAll"},{"text":" to execute a select query instead of calling  ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Using ","type":"text"},{"type":"codeVoice","code":"fetchAll"},{"text":" returns an array of all of the matching records for the query.","type":"text"},{"text":" ","type":"text"},{"text":"We can also use ","type":"text"},{"type":"codeVoice","code":"fetchOne"},{"text":" to fetch only the first result from the query.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let firstResult = try database.makeRequest(with: query).fetchOne()"]},{"type":"paragraph","inlineContent":[{"text":"Select statement syntax is discussed in more detail the ","type":"text"},{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"reference","isActive":true},{"text":" guide.","type":"text"}]},{"level":3,"type":"heading","text":"Schema parameter","anchor":"Schema-parameter"},{"type":"paragraph","inlineContent":[{"text":"In the example above we used a ","type":"text"},{"type":"codeVoice","code":"schema"},{"text":" parameter in the ","type":"text"},{"type":"codeVoice","code":"sql"},{"text":" function to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"construct a reference to the table used in the query. A common convention is to"},{"type":"text","text":" "},{"type":"text","text":"omit the "},{"type":"codeVoice","code":"schema"},{"type":"text","text":" parameter name entirely and use the default parameter name"},{"type":"text","text":" "},{"type":"codeVoice","code":"$0"},{"type":"text","text":" instead:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { ","    let person = $0.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}"]},{"type":"paragraph","inlineContent":[{"text":"The guide documentation use the explicit ","type":"text"},{"code":"schema","type":"codeVoice"},{"text":" for clarity.","type":"text"}]},{"level":3,"type":"heading","text":"Prepared statements","anchor":"Prepared-statements"},{"type":"paragraph","inlineContent":[{"text":"So far we have made the request each time we needed to execute it. Instead we","type":"text"},{"text":" ","type":"text"},{"text":"can store the request and reuse it later. When the request is created SwiftQL","type":"text"},{"text":" ","type":"text"},{"text":"will use an SQLite prepared statement. SQLite will parse the SQL string into","type":"text"},{"text":" ","type":"text"},{"text":"low-level byte code which can be executed efficiently, without needing to parse","type":"text"},{"text":" ","type":"text"},{"text":"the SQL each time. Re-using requests can potentially improve performance of","type":"text"},{"text":" ","type":"text"},{"text":"complex queries at runtime.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.age >= 21 && person.age < 65)","}","let request = try database.makeRequest(with: query)"]},{"inlineContent":[{"type":"text","text":"Once created we can call the prepared statement whenever it is needed."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let result = try request.fetchAll()"]},{"type":"heading","text":"Variables","anchor":"Variables","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL allows you to use variables in queries in a type-safe manner."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First define a variable binding using the generic "},{"code":"XLNamedBindingReference","type":"codeVoice"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"specifying the type of the variable, as well as a name. The name is used for"},{"type":"text","text":" "},{"type":"text","text":"debugging SQL statements as does not affect the query:"}]},{"type":"codeListing","syntax":"swift","code":["let nameParameter = XLNamedBindingReference<String>(name: \"name\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can include the variable parameter in a query:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == nameParameter)","}","let request = try database.makeRequest(with: query)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is equivalent to the following SQL:"}]},{"type":"codeListing","syntax":"sql","code":["SELECT *","FROM Person AS person","WHERE person.name == :name"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name parameter is not assigned to a value yet. We assign the parameter value"},{"type":"text","text":" "},{"type":"text","text":"when we execute the query. A best practice when assigning parameters is to"},{"type":"text","text":" "},{"type":"text","text":"create a copy of the request then assign the parameter. We can take advantage of"},{"type":"text","text":" "},{"type":"text","text":"copy-on-write semantics for value types:"}]},{"type":"codeListing","code":["var newRequest = request","newRequest.set(nameParameter, \"Fred\")","return try request.fetchAll()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This binds the value “Fred” to the name parameter in the context of the request"},{"type":"text","text":" "},{"type":"text","text":"before fetching all of the matching results."}]},{"type":"heading","anchor":"Update-statements","text":"Update statements","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can modify an existing record using an update statement. In this example we"},{"type":"text","text":" "},{"type":"text","text":"set the age of the person whose id is "},{"type":"codeVoice","code":"fred"},{"type":"text","text":" to the value "},{"type":"codeVoice","code":"42"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let updateStatement = sql { schema in","    let person = schema.into(Person.self)","    Update(person)","    Setting<Person> { row in","        row.age = 42","    }","    Where(","        person.id == 'fred'","    )","}","","try database.makeRequest(with: updateStatement).execute()"],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"schema.into()","type":"codeVoice"},{"text":" when defining a table that is modified in the query.","type":"text"}]}]},{"type":"aside","style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"Omitting the where clause will update all of the records in the","type":"text"},{"text":" ","type":"text"},{"text":"table. A  best practice when using update statements is to always specify a","type":"text"},{"text":" ","type":"text"},{"text":"where clause to limit the scope of changes.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can also a prepared statement with named parameters for common update"},{"type":"text","text":" "},{"type":"text","text":"operations:"}]},{"type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","let ageParameter = XLNamedBindingReference<Int>(name: \"age\")","","let updateStatement = sql { schema in","    let person = schema.into(Person.self)","    Update(person)","    Setting<Person> { row in","        row.age = ageParameter","    }","    Where(","        person.id == idParameter","    )","}","","let updateRequest = try database.makeRequest(with: updateStatement)","","...","","var newUpdateRequest = updateRequest","newUpdateRequest.set(idParameter, \"fred\")","newUpdateRequest.set(ageParameter, 42)","try newUpdateRequest.execute()"],"syntax":"swift"},{"type":"heading","anchor":"Delete-statements","text":"Delete statements","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can delete records by specifying the table and a where clause for the items"},{"type":"text","text":" "},{"type":"text","text":"to delete. The example shows a prepared statement with parameters:"}]},{"type":"codeListing","code":["let idParameter = XLNamedBindingReference<String>(name: \"id\")","","let deleteStatement = sql { schema in","    let person = schema.into(Person.self)","    Delete(person)","    Where(person.id == idParameter)","}","","let deleteRequest = try database.makeRequest(with: deleteStatement)","","...","","var newDeleteRequest = deleteRequest","newDeleteRequest.set(idParameter, \"fred\")","try newDeleteRequest.execute()"],"syntax":"swift"}]}],"sections":[],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials","generated":true,"title":"Essentials"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/gettingstarted"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","kind":"article","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","url":"\/documentation\/swiftql\/queries","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","kind":"article","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","type":"topic","role":"article"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","type":"topic","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"url":"\/documentation\/swiftql\/livequeries","kind":"article","title":"Live queries","role":"article"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"url":"\/documentation\/swiftql\/builtinfunctions","role":"article","title":"Built-in Functions","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"kind":"article"},"https://www.sqlite.org/lang.html":{"identifier":"https:\/\/www.sqlite.org\/lang.html","type":"link","title":"SQLite SQL Language Documentation","titleInlineContent":[{"type":"text","text":"SQLite SQL Language Documentation"}],"url":"https:\/\/www.sqlite.org\/lang.html"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","url":"\/documentation\/swiftql","role":"collection"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"title":"Functional Syntax","kind":"article","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","type":"topic","url":"\/documentation\/swiftql\/functionalsyntax","role":"article"}}}