{"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"generated":true,"anchor":"Advanced-topics","title":"Advanced topics","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL lets you create "},{"type":"codeVoice","code":"@SQLTable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SQLResult"},{"text":" definitions which use","type":"text"},{"type":"text","text":" "},{"text":"generic type parameters. Generic parameters can use the intrinsic types","type":"text"},{"type":"text","text":" "},{"text":"including ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":", ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":", as well any custom type","type":"text"},{"text":" ","type":"text"},{"text":"defined as an ","type":"text"},{"type":"codeVoice","code":"SQLCustomType"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A table or result with generic parameters might be used where the structure of"},{"type":"text","text":" "},{"type":"text","text":"the table or result is commonly used in an application, but where the type of"},{"type":"text","text":" "},{"type":"text","text":"some or all of the fields differs."}]},{"type":"heading","anchor":"Using-generic-tables","level":2,"text":"Using generic tables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We define a table with a generic parameter conforming to "},{"code":"XLLiteral","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"XLExpression","type":"codeVoice"},{"type":"text","text":". SwiftQL does impose a limit on the number or type of generic"},{"type":"text","text":" "},{"type":"text","text":"parameters."}]},{"type":"codeListing","code":["@SQLTable struct GenericTable<Value: XLLiteral & XLExpression> {","    var id: String","    var type: String","    var value: Value","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now use our generic table like any other table create, insert, and query"},{"type":"text","text":" "},{"type":"text","text":"our table using a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" generic parameter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First we create the table. The generic parameter used in the create statement"},{"type":"text","text":" "},{"type":"text","text":"is not important as it can be overridden in queries."}]},{"type":"codeListing","code":["let createStatement = sqlCreate(GenericTable<String>.self)","try database.makeRequest(with: createStatement).execute()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we can insert some data into the table. Here the generic type is inferred"},{"type":"text","text":" "},{"type":"text","text":"to be "},{"code":"String","type":"codeVoice"},{"type":"text","text":" from the value assigned to the "},{"code":"value","type":"codeVoice"},{"type":"text","text":" attribute."}]},{"type":"codeListing","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\"))","try database.makeRequest(with: insertStatement).execute()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now use the generic table in a "},{"code":"Select","type":"codeVoice"},{"type":"text","text":" query. We need to provide the"},{"type":"text","text":" "},{"type":"text","text":"generic parameter in the query when specifying the table."}]},{"type":"codeListing","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<String>.self)","    Select(table)","    From(table)","    Where(table.type == \"name\")","}","let names = try database.makeRequest(with: selectStatement).fetchAll()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can use the same table with an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" parameter. We can insert another record"},{"type":"text","text":" "},{"type":"text","text":"into the table with an integer value:"}]},{"type":"codeListing","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-age\", type: \"age\", value: 42))","try database.makeRequest(with: insertStatement).execute()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can select our integer records from the database:"}]},{"type":"codeListing","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","    Where(table.type == \"age\")","}","let ages = try database.makeRequest(with: selectStatement).fetchAll()"],"syntax":"swift"},{"type":"heading","anchor":"Custom-types","level":2,"text":"Custom types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Generic tables can also use custom types which we define. Let’s look at an"},{"type":"text","text":" "},{"type":"text","text":"example using the custom UUID shown in "},{"type":"reference","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","isActive":true},{"type":"text","text":". Our custom"},{"type":"text","text":" "},{"type":"text","text":"type is used just like an intrinsic type:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can create a table using out custom type:"}]},{"type":"codeListing","code":["let createStatement = sqlCreate(GenericTable<MyUUID>.self)","try database.makeRequest(with: createStatement).execute()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can insert records using those values:"}]},{"type":"codeListing","code":["let uuid = MyUUID(UUID(uuidString: \"72472fdd-a897-4b35-9bd9-0f23688f45f7\")!)","let insertStatement = sqlInsert(GenericTable(id: \"foo-id\", type: \"id\", value: uuid))","try database.makeRequest(with: insertStatement).execute()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can query our generic table using our custom type:"}]},{"type":"codeListing","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<MyUUID>.self)","    Select(table)","    From(table)","    Where(table.type == \"id\")","}","let uuids = try database.makeRequest(with: selectStatement).fetchAll()"],"syntax":"swift"},{"type":"heading","anchor":"Data-consistency","level":2,"text":"Data consistency"},{"type":"paragraph","inlineContent":[{"text":"Generic tables take advantage of SQLite’s loose typing or type affinity: that is","type":"text"},{"text":" ","type":"text"},{"text":"the type of a table column is not strictly enforced. This comes with the caveat","type":"text"},{"text":" ","type":"text"},{"text":"that a column in a table can potentially contain different types of data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the use case described above where a generic table contains both "},{"type":"codeVoice","code":"Int"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"and  ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" data:","type":"text"}]},{"type":"codeListing","code":["let fooName = GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\")","try database.makeRequest(with: sqlInsert(fooName).execute()","","let fooAge = GenericTable(id: \"foo-age\", type: \"age\", value: 42)","try database.makeRequest(with: sqlInsert(fooAge)).execute()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Our table now contains two records. One record contains a "},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\"foo\""},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the other record contains an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"codeVoice","code":"42"},{"type":"text","text":". If we now select from the table using"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for the generic table, without an appropriate "},{"type":"codeVoice","code":"Where"},{"text":" clause, the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"query will select rows containing "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"text":" values, resulting in an","type":"text"},{"text":" ","type":"text"},{"text":"exception at runtime.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","}"]},{"type":"aside","name":"Warning","style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is the programmer’s responsibility to ensure that generic tables"},{"text":" ","type":"text"},{"text":"are read and written in a consistent manner.","type":"text"}]}]}],"kind":"content"}],"metadata":{"modules":[{"name":"SwiftQL"}],"roleHeading":"Article","role":"article","title":"Generic Table Parameters"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"},"variants":[{"paths":["\/documentation\/swiftql\/generictableparameters"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"sections":[],"abstract":[{"type":"text","text":"Use generic parameters on table definitions."}],"references":{"doc://SwiftQL/documentation/SwiftQL/CustomTypes#Custom-UUID":{"title":"Custom UUID","abstract":[],"type":"topic","url":"\/documentation\/swiftql\/customtypes#Custom-UUID","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","kind":"section"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","role":"collection","title":"SwiftQL","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"type":"topic"},"doc://SwiftQL/documentation/SwiftQL/CustomFunctions":{"kind":"article","title":"Custom Functions","role":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","url":"\/documentation\/swiftql\/customfunctions","abstract":[{"text":"Create custom functions that can be called from SQL expressions.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"kind":"article","role":"article","title":"Custom Types","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","url":"\/documentation\/swiftql\/customtypes","type":"topic","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}]}}}