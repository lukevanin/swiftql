{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL lets you create ","type":"text"},{"code":"@SQLTable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SQLResult","type":"codeVoice"},{"text":" definitions which use","type":"text"},{"text":" ","type":"text"},{"text":"generic type parameters. Generic parameters can use the intrinsic types","type":"text"},{"text":" ","type":"text"},{"text":"including ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":", as well any custom type","type":"text"},{"text":" ","type":"text"},{"text":"defined as an ","type":"text"},{"code":"SQLCustomType","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A table or result with generic parameters might be used where the structure of","type":"text"},{"text":" ","type":"text"},{"text":"the table or result is commonly used in an application, but where the type of","type":"text"},{"text":" ","type":"text"},{"text":"some or all of the fields differs.","type":"text"}]},{"type":"heading","level":2,"anchor":"Using-generic-tables","text":"Using generic tables"},{"type":"paragraph","inlineContent":[{"text":"We define a table with a generic parameter conforming to ","type":"text"},{"code":"XLLiteral","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"XLExpression","type":"codeVoice"},{"text":". SwiftQL does impose a limit on the number or type of generic","type":"text"},{"text":" ","type":"text"},{"text":"parameters.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@SQLTable struct GenericTable<Value: XLLiteral & XLExpression> {","    var id: String","    var type: String","    var value: Value","}"]},{"type":"paragraph","inlineContent":[{"text":"We can now use our generic table like any other table create, insert, and query","type":"text"},{"text":" ","type":"text"},{"text":"our table using a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" generic parameter.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"First we create the table. The generic parameter used in the create statement","type":"text"},{"text":" ","type":"text"},{"text":"is not important as it can be overridden in queries.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let createStatement = sqlCreate(GenericTable<String>.self)","try database.makeRequest(with: createStatement).execute()"]},{"type":"paragraph","inlineContent":[{"text":"Next we can insert some data into the table. Here the generic type is inferred","type":"text"},{"text":" ","type":"text"},{"text":"to be ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" from the value assigned to the ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\"))","try database.makeRequest(with: insertStatement).execute()"]},{"type":"paragraph","inlineContent":[{"text":"We can now use the generic table in a ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" query. We need to provide the","type":"text"},{"text":" ","type":"text"},{"text":"generic parameter in the query when specifying the table.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<String>.self)","    Select(table)","    From(table)","    Where(table.type == \"name\")","}","let names = try database.makeRequest(with: selectStatement).fetchAll()"]},{"type":"paragraph","inlineContent":[{"text":"We can use the same table with an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" parameter. We can insert another record","type":"text"},{"text":" ","type":"text"},{"text":"into the table with an integer value:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-age\", type: \"age\", value: 42))","try database.makeRequest(with: insertStatement).execute()"]},{"inlineContent":[{"text":"We can select our integer records from the database:","type":"text"}],"type":"paragraph"},{"code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","    Where(table.type == \"age\")","}","let ages = try database.makeRequest(with: selectStatement).fetchAll()"],"syntax":"swift","type":"codeListing"},{"anchor":"Custom-types","level":2,"type":"heading","text":"Custom types"},{"inlineContent":[{"text":"Generic tables can also use custom types which we define. Let’s look at an","type":"text"},{"text":" ","type":"text"},{"text":"example using the custom UUID shown in ","type":"text"},{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","isActive":true,"type":"reference"},{"text":". Our custom","type":"text"},{"text":" ","type":"text"},{"text":"type is used just like an intrinsic type:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We can create a table using out custom type:","type":"text"}],"type":"paragraph"},{"code":["let createStatement = sqlCreate(GenericTable<MyUUID>.self)","try database.makeRequest(with: createStatement).execute()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"We can insert records using those values:","type":"text"}],"type":"paragraph"},{"code":["let uuid = MyUUID(UUID(uuidString: \"72472fdd-a897-4b35-9bd9-0f23688f45f7\")!)","let insertStatement = sqlInsert(GenericTable(id: \"foo-id\", type: \"id\", value: uuid))","try database.makeRequest(with: insertStatement).execute()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"We can query our generic table using our custom type:","type":"text"}],"type":"paragraph"},{"code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<MyUUID>.self)","    Select(table)","    From(table)","    Where(table.type == \"id\")","}","let uuids = try database.makeRequest(with: selectStatement).fetchAll()"],"syntax":"swift","type":"codeListing"},{"anchor":"Data-consistency","level":2,"type":"heading","text":"Data consistency"},{"inlineContent":[{"text":"Generic tables take advantage of SQLite’s loose typing or type affinity: that is","type":"text"},{"text":" ","type":"text"},{"text":"the type of a table column is not strictly enforced. This comes with the caveat","type":"text"},{"text":" ","type":"text"},{"text":"that a column in a table can potentially contain different types of data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Consider the use case described above where a generic table contains both ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"and  ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" data:","type":"text"}],"type":"paragraph"},{"code":["let fooName = GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\")","try database.makeRequest(with: sqlInsert(fooName).execute()","","let fooAge = GenericTable(id: \"foo-age\", type: \"age\", value: 42)","try database.makeRequest(with: sqlInsert(fooAge)).execute()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Our table now contains two records. One record contains a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\"foo\""},{"type":"text","text":", and"},{"type":"text","text":" "},{"text":"the other record contains an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" ","type":"text"},{"code":"42","type":"codeVoice"},{"type":"text","text":". If we now select from the table using"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for the generic table, without an appropriate "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clause, the"},{"type":"text","text":" "},{"type":"text","text":"query will select rows containing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values, resulting in an"},{"type":"text","text":" "},{"type":"text","text":"exception at runtime."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","}"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is the programmer’s responsibility to ensure that generic tables"},{"text":" ","type":"text"},{"text":"are read and written in a consistent manner.","type":"text"}]}],"style":"warning","type":"aside","name":"Warning"}]}],"sections":[],"metadata":{"role":"article","title":"Generic Table Parameters","roleHeading":"Article","modules":[{"name":"SwiftQL"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/generictableparameters"]}],"kind":"article","abstract":[{"text":"Use generic parameters on table definitions.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"},"references":{"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","role":"collection","type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes#Custom-UUID":{"abstract":[],"kind":"section","title":"Custom UUID","type":"topic","url":"\/documentation\/swiftql\/customtypes#Custom-UUID","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"title":"SwiftQL","role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","url":"\/documentation\/swiftql\/documentation"}}}