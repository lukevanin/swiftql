{"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftQL lets you create "},{"type":"codeVoice","code":"@SQLTable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SQLResult"},{"type":"text","text":" definitions which use"},{"type":"text","text":" "},{"type":"text","text":"generic type parameters. Generic parameters can use the intrinsic types"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", as well any custom type"},{"type":"text","text":" "},{"type":"text","text":"defined as an "},{"type":"codeVoice","code":"SQLCustomType"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A table or result with generic parameters might be used where the structure of"},{"type":"text","text":" "},{"type":"text","text":"the table or result is commonly used in an application, but where the type of"},{"type":"text","text":" "},{"type":"text","text":"some or all of the fields differs."}],"type":"paragraph"},{"anchor":"Using-generic-tables","type":"heading","text":"Using generic tables","level":2},{"inlineContent":[{"type":"text","text":"We define a table with a generic parameter conforming to "},{"type":"codeVoice","code":"XLLiteral"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"XLExpression"},{"type":"text","text":". SwiftQL does impose a limit on the number or type of generic"},{"type":"text","text":" "},{"type":"text","text":"parameters."}],"type":"paragraph"},{"code":["@SQLTable struct GenericTable<Value: XLLiteral & XLExpression> {","    var id: String","    var type: String","    var value: Value","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"We can now use our generic table like any other table create, insert, and query","type":"text"},{"text":" ","type":"text"},{"text":"our table using a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" generic parameter.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"First we create the table. The generic parameter used in the create statement","type":"text"},{"text":" ","type":"text"},{"text":"is not important as it can be overridden in queries.","type":"text"}],"type":"paragraph"},{"code":["let createStatement = sqlCreate(GenericTable<String>.self)","try database.makeRequest(with: createStatement).execute()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Next we can insert some data into the table. Here the generic type is inferred","type":"text"},{"text":" ","type":"text"},{"text":"to be ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" from the value assigned to the ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\"))","try database.makeRequest(with: insertStatement).execute()"]},{"inlineContent":[{"text":"We can now use the generic table in a ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" query. We need to provide the","type":"text"},{"text":" ","type":"text"},{"text":"generic parameter in the query when specifying the table.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<String>.self)","    Select(table)","    From(table)","    Where(table.type == \"name\")","}","let names = try database.makeRequest(with: selectStatement).fetchAll()"]},{"inlineContent":[{"type":"text","text":"We can use the same table with an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" parameter. We can insert another record"},{"type":"text","text":" "},{"type":"text","text":"into the table with an integer value:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-age\", type: \"age\", value: 42))","try database.makeRequest(with: insertStatement).execute()"]},{"inlineContent":[{"text":"We can select our integer records from the database:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","    Where(table.type == \"age\")","}","let ages = try database.makeRequest(with: selectStatement).fetchAll()"]},{"anchor":"Custom-types","type":"heading","level":2,"text":"Custom types"},{"inlineContent":[{"text":"Generic tables can also use custom types which we define. Let’s look at an","type":"text"},{"text":" ","type":"text"},{"text":"example using the custom UUID shown in ","type":"text"},{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","type":"reference","isActive":true},{"text":". Our custom","type":"text"},{"text":" ","type":"text"},{"text":"type is used just like an intrinsic type:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We can create a table using out custom type:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let createStatement = sqlCreate(GenericTable<MyUUID>.self)","try database.makeRequest(with: createStatement).execute()"]},{"inlineContent":[{"type":"text","text":"We can insert records using those values:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let uuid = MyUUID(UUID(uuidString: \"72472fdd-a897-4b35-9bd9-0f23688f45f7\")!)","let insertStatement = sqlInsert(GenericTable(id: \"foo-id\", type: \"id\", value: uuid))","try database.makeRequest(with: insertStatement).execute()"]},{"inlineContent":[{"type":"text","text":"We can query our generic table using our custom type:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<MyUUID>.self)","    Select(table)","    From(table)","    Where(table.type == \"id\")","}","let uuids = try database.makeRequest(with: selectStatement).fetchAll()"]},{"anchor":"Data-consistency","type":"heading","text":"Data consistency","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Generic tables take advantage of SQLite’s loose typing or type affinity: that is"},{"type":"text","text":" "},{"type":"text","text":"the type of a table column is not strictly enforced. This comes with the caveat"},{"type":"text","text":" "},{"type":"text","text":"that a column in a table can potentially contain different types of data."}]},{"type":"paragraph","inlineContent":[{"text":"Consider the use case described above where a generic table contains both ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"and  ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" data:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let fooName = GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\")","try database.makeRequest(with: sqlInsert(fooName).execute()","","let fooAge = GenericTable(id: \"foo-age\", type: \"age\", value: 42)","try database.makeRequest(with: sqlInsert(fooAge)).execute()"]},{"type":"paragraph","inlineContent":[{"text":"Our table now contains two records. One record contains a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"code":"\"foo\"","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"the other record contains an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" ","type":"text"},{"code":"42","type":"codeVoice"},{"text":". If we now select from the table using","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" for the generic table, without an appropriate ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clause, the","type":"text"},{"text":" ","type":"text"},{"text":"query will select rows containing ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" values, resulting in an","type":"text"},{"text":" ","type":"text"},{"text":"exception at runtime.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","}"]},{"type":"aside","style":"warning","content":[{"inlineContent":[{"text":"It is the programmer’s responsibility to ensure that generic tables","type":"text"},{"text":" ","type":"text"},{"text":"are read and written in a consistent manner.","type":"text"}],"type":"paragraph"}],"name":"Warning"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes"],"title":"Advanced topics","generated":true,"anchor":"Advanced-topics"}],"abstract":[{"type":"text","text":"Use generic parameters on table definitions."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"},"metadata":{"role":"article","title":"Generic Table Parameters","roleHeading":"Article","modules":[{"name":"SwiftQL"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/generictableparameters"]}],"references":{"doc://SwiftQL/documentation/SwiftQL/CustomFunctions":{"kind":"article","type":"topic","url":"\/documentation\/swiftql\/customfunctions","title":"Custom Functions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"role":"article"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes#Custom-UUID":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","title":"Custom UUID","type":"topic","kind":"section","url":"\/documentation\/swiftql\/customtypes#Custom-UUID","abstract":[]},"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"type":"topic","title":"Custom Types","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","kind":"article","role":"article","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}],"url":"\/documentation\/swiftql\/customtypes"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"role":"collection","url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"}}}