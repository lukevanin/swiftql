{"metadata":{"modules":[{"name":"SwiftQL"}],"roleHeading":"Article","title":"Generic Table Parameters","role":"article"},"seeAlsoSections":[{"anchor":"Advanced-topics","title":"Advanced topics","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes"],"generated":true}],"abstract":[{"text":"Use generic parameters on table definitions.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL lets you create "},{"type":"codeVoice","code":"@SQLTable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SQLResult"},{"type":"text","text":" definitions which use"},{"type":"text","text":" "},{"type":"text","text":"generic type parameters. Generic parameters can use the intrinsic types"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", as well any custom type"},{"type":"text","text":" "},{"type":"text","text":"defined as an "},{"type":"codeVoice","code":"SQLCustomType"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A table or result with generic parameters might be used where the structure of"},{"type":"text","text":" "},{"type":"text","text":"the table or result is commonly used in an application, but where the type of"},{"type":"text","text":" "},{"type":"text","text":"some or all of the fields differs."}]},{"level":2,"text":"Using generic tables","anchor":"Using-generic-tables","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We define a table with a generic parameter conforming to "},{"type":"codeVoice","code":"XLLiteral"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"XLExpression"},{"type":"text","text":". SwiftQL does impose a limit on the number or type of generic"},{"type":"text","text":" "},{"type":"text","text":"parameters."}]},{"type":"codeListing","syntax":"swift","code":["@SQLTable struct GenericTable<Value: XLLiteral & XLExpression> {","    var id: String","    var type: String","    var value: Value","}"]},{"type":"paragraph","inlineContent":[{"text":"We can now use our generic table like any other table create, insert, and query","type":"text"},{"text":" ","type":"text"},{"text":"our table using a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" generic parameter.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"First we create the table. The generic parameter used in the create statement","type":"text"},{"text":" ","type":"text"},{"text":"is not important as it can be overridden in queries.","type":"text"}]},{"code":["let createStatement = sqlCreate(GenericTable<String>.self)","try database.makeRequest(with: createStatement).execute()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Next we can insert some data into the table. Here the generic type is inferred","type":"text"},{"text":" ","type":"text"},{"text":"to be ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" from the value assigned to the ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" attribute.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\"))","try database.makeRequest(with: insertStatement).execute()"]},{"type":"paragraph","inlineContent":[{"text":"We can now use the generic table in a ","type":"text"},{"type":"codeVoice","code":"Select"},{"text":" query. We need to provide the","type":"text"},{"text":" ","type":"text"},{"text":"generic parameter in the query when specifying the table.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<String>.self)","    Select(table)","    From(table)","    Where(table.type == \"name\")","}","let names = try database.makeRequest(with: selectStatement).fetchAll()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can use the same table with an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" parameter. We can insert another record"},{"type":"text","text":" "},{"type":"text","text":"into the table with an integer value:"}]},{"type":"codeListing","syntax":"swift","code":["let insertStatement = sqlInsert(GenericTable(id: \"foo-age\", type: \"age\", value: 42))","try database.makeRequest(with: insertStatement).execute()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can select our integer records from the database:"}]},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","    Where(table.type == \"age\")","}","let ages = try database.makeRequest(with: selectStatement).fetchAll()"]},{"type":"heading","level":2,"text":"Custom types","anchor":"Custom-types"},{"type":"paragraph","inlineContent":[{"text":"Generic tables can also use custom types which we define. Let’s look at an","type":"text"},{"text":" ","type":"text"},{"text":"example using the custom UUID shown in ","type":"text"},{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","type":"reference","isActive":true},{"text":". Our custom","type":"text"},{"text":" ","type":"text"},{"text":"type is used just like an intrinsic type:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We can create a table using out custom type:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let createStatement = sqlCreate(GenericTable<MyUUID>.self)","try database.makeRequest(with: createStatement).execute()"]},{"type":"paragraph","inlineContent":[{"text":"We can insert records using those values:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let uuid = MyUUID(UUID(uuidString: \"72472fdd-a897-4b35-9bd9-0f23688f45f7\")!)","let insertStatement = sqlInsert(GenericTable(id: \"foo-id\", type: \"id\", value: uuid))","try database.makeRequest(with: insertStatement).execute()"]},{"type":"paragraph","inlineContent":[{"text":"We can query our generic table using our custom type:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<MyUUID>.self)","    Select(table)","    From(table)","    Where(table.type == \"id\")","}","let uuids = try database.makeRequest(with: selectStatement).fetchAll()"]},{"type":"heading","level":2,"text":"Data consistency","anchor":"Data-consistency"},{"type":"paragraph","inlineContent":[{"text":"Generic tables take advantage of SQLite’s loose typing or type affinity: that is","type":"text"},{"text":" ","type":"text"},{"text":"the type of a table column is not strictly enforced. This comes with the caveat","type":"text"},{"text":" ","type":"text"},{"text":"that a column in a table can potentially contain different types of data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Consider the use case described above where a generic table contains both ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"and  ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" data:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let fooName = GenericTable(id: \"foo-name\", type: \"name\", value: \"Foo\")","try database.makeRequest(with: sqlInsert(fooName).execute()","","let fooAge = GenericTable(id: \"foo-age\", type: \"age\", value: 42)","try database.makeRequest(with: sqlInsert(fooAge)).execute()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Our table now contains two records. One record contains a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"foo\""},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"the other record contains an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"codeVoice","code":"42"},{"type":"text","text":". If we now select from the table using"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for the generic table, without an appropriate "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clause, the"},{"type":"text","text":" "},{"type":"text","text":"query will select rows containing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values, resulting in an"},{"type":"text","text":" "},{"type":"text","text":"exception at runtime."}]},{"type":"codeListing","syntax":"swift","code":["let selectStatement = sql { schema in","    let table = schema.table(GenericTable<Int>.self)","    Select(table)","    From(table)","}"]},{"style":"warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is the programmer’s responsibility to ensure that generic tables"},{"type":"text","text":" "},{"type":"text","text":"are read and written in a consistent manner."}]}],"name":"Warning"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/generictableparameters"]}],"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"},"references":{"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"url":"\/documentation\/swiftql\/customtypes","kind":"article","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}],"role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","title":"Custom Types","type":"topic"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes#Custom-UUID":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes#Custom-UUID","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swiftql\/customtypes#Custom-UUID","title":"Custom UUID"},"doc://SwiftQL/documentation/SwiftQL/CustomFunctions":{"abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"url":"\/documentation\/swiftql\/customfunctions","kind":"article","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","title":"Custom Functions","type":"topic"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","title":"SwiftQL"}}}