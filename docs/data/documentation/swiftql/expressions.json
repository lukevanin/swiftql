{"metadata":{"modules":[{"name":"SwiftQL"}],"title":"Expressions","role":"article","roleHeading":"Article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/expressions"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL allows complex expressions to be used wherever a column reference is"},{"type":"text","text":" "},{"type":"text","text":"allowed. Complex expressions are commonly used when computing a result from"},{"type":"text","text":" "},{"type":"text","text":"column values, and in where expressions."}]},{"type":"heading","text":"Boolean operators","level":2,"anchor":"Boolean-operators"},{"type":"paragraph","inlineContent":[{"text":"Standard boolean operators to combine multiple expressions, such as for a","type":"text"},{"text":" ","type":"text"},{"text":"boolean field or in a ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clause:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.id == \"fred\" || person.age > 65)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL supports the following Swift boolean operators: ","type":"text"},{"code":"==","type":"codeVoice"},{"text":", ","type":"text"},{"code":"!=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"!"},{"type":"text","text":", "},{"type":"codeVoice","code":"<"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":">"},{"type":"text","text":", "},{"type":"codeVoice","code":">="},{"type":"text","text":", "},{"type":"codeVoice","code":"<="},{"type":"text","text":", "},{"type":"codeVoice","code":"&&"},{"type":"text","text":", "},{"type":"codeVoice","code":"||"},{"type":"text","text":"."}]},{"type":"heading","anchor":"Numeric-operators","text":"Numeric operators","level":2},{"inlineContent":[{"text":"SwiftQL supports the following operators for performing numeric operations with","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" expressions: ","type":"text"},{"type":"codeVoice","code":"+"},{"text":", ","type":"text"},{"type":"codeVoice","code":"-"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":", ","type":"text"},{"type":"codeVoice","code":"*"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following operators are suppported on ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" expressions: ","type":"text"},{"type":"codeVoice","code":"%"},{"type":"text","text":" (modulo),"},{"type":"text","text":" "},{"type":"codeVoice","code":"~"},{"type":"text","text":" (bitwise negate)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, we can compute the years each person has to retirement:"}]},{"code":["@SQLResult PersonRetirement {","    var personId: String","    var yearsToRetirement: Int","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let row = result {","        PersonRetirement(","            personId: person.id,","            yearsToRetirement: 65 - person.age","        )","    }","    Select(row)","    From(person)","    Where(row.yearsToRetirement > 0)","}"],"type":"codeListing","syntax":"swift"},{"text":"Grouping expressions","level":2,"type":"heading","anchor":"Grouping-expressions"},{"inlineContent":[{"text":"Expressions in SwiftQL can be grouped using parenthesis like normal Swift,","type":"text"},{"text":" ","type":"text"},{"text":"often used to explicitly define operator precedence, or to visually separate","type":"text"},{"text":" ","type":"text"},{"text":"sub-expressions for legibility:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where((person.occupationId == \"eng\") && (((65 - person.age) > 0) || (person.age < 21)))","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When writing complex expressions, placing sub-expressions on separate lines with","type":"text"},{"text":" ","type":"text"},{"text":"indentation can improve legibility. The above statement can also be written as:","type":"text"}]},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(","        person.occupationId == \"eng\" ","        && ","        (","            (65 - person.age) > 0 ","            || ","            person.age < 21","        )","    )","}"],"type":"codeListing"},{"anchor":"Text-operators","level":2,"text":"Text operators","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL supports the following operators for text expressions:","type":"text"}]},{"anchor":"+-operator","level":3,"text":"+ operator","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Concatenates two or more strings:","type":"text"}]},{"syntax":"swift","code":["","@SQLTable struct Contact {","    var id: String","    var firstName: String","    var lastName: String","}","","@SQLResult struct ContactViewState {","    var name: String","}","","let query = sql { schema in ","    let contact = schema.table(Contact.self)","    Select(","        ContactViewState.columns(","            name: contact.firstName + \" \" + contact.lastName","        )","    )","    From(contact)","}"],"type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL does not support Swift string interpolation. Use the "},{"code":"+","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"concatenation operator to combine two or more strings in SwiftQL."}]}],"type":"aside","name":"Note"},{"anchor":"like-operator","level":3,"text":"like operator","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" operator is used for pattern matching within text values. It","type":"text"},{"text":" ","type":"text"},{"text":"allows searching for strings that match a specified pattern using wildcard","type":"text"},{"text":" ","type":"text"},{"text":"characters.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"like","type":"codeVoice"},{"text":" operator is typically used in the ","type":"text"},{"type":"codeVoice","code":"Where"},{"text":" clause of a ","type":"text"},{"type":"codeVoice","code":"Select"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement to filter results based on a pattern.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Find names starting with ‘A’:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"A%\"))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find names containing ‘smith’."}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"%smith%\"))","}"]},{"type":"paragraph","inlineContent":[{"text":"Find names with ‘a’ as the second letter:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"_a%\"))","}"]},{"type":"paragraph","inlineContent":[{"text":"Find names exactly five characters long and ending with ‘e’:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"____e\"))","}"]},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"SwiftQL does not currently support an ","type":"text"},{"type":"codeVoice","code":"escape"},{"text":" clause for the ","type":"text"},{"type":"codeVoice","code":"like"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"heading","text":"glob operator","level":3,"anchor":"glob-operator"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" operator is used for pattern matching in string values, similar to","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator, but with a key difference in its wildcard syntax and"},{"type":"text","text":" "},{"type":"text","text":"case sensitivity."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pattern Matching: It determines whether a given string value matches a"},{"type":"text","text":" "},{"type":"text","text":"specified pattern. If a match is found, it returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" otherwise, it returns"},{"type":"text","text":" "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Case Sensitivity: Unlike ","type":"text"},{"code":"like","type":"codeVoice"},{"text":", ","type":"text"},{"code":"glob","type":"codeVoice"},{"text":" is case-sensitive by default. This means","type":"text"},{"text":" ","type":"text"},{"code":"\"A\".glob(\"A\")","type":"codeVoice"},{"text":" would return ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Wildcards: "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" uses Unix file globbing syntax for its wildcards:"}]},{"inlineContent":[{"type":"codeVoice","code":"*"},{"text":" (asterisk): Matches zero or more characters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"?","type":"codeVoice"},{"text":" (question mark): Matches exactly one character.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"[charset]","type":"codeVoice"},{"text":" (character set): Matches any single character within the specified","type":"text"},{"text":" ","type":"text"},{"text":"set. For example, ","type":"text"},{"code":"[abc]","type":"codeVoice"},{"text":" matches ","type":"text"},{"code":"'a'","type":"codeVoice"},{"type":"text","text":", "},{"code":"'b'","type":"codeVoice"},{"type":"text","text":", or "},{"code":"'c'","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"code":"[^charset]","type":"codeVoice"},{"type":"text","text":" or "},{"code":"[!charset]","type":"codeVoice"},{"type":"text","text":": Matches any single character not within the"},{"type":"text","text":" "},{"type":"text","text":"specified set."}]},{"syntax":"swift","type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.glob(\"J*n\"))","}"]},{"inlineContent":[{"text":"This query would return names that start with ‘J’, end with ‘n’, and have any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"number of characters in between, such as ‘John’ or ‘Jillian’."},{"type":"text","text":" "},{"type":"text","text":"Code"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@SQLTable struct Document {","    var id: String","    var name: String","}","","let query = sql { schema in","    let document = schema.table(Document.self)","    Select(document)","    From(document)","    Where(document.name.glob(\"report_??.pdf\"))","}"]},{"type":"paragraph","inlineContent":[{"text":"This query would return filenames like ‘report_01.pdf’, ‘report_AB.pdf’, but not","type":"text"},{"text":" ","type":"text"},{"text":"‘report_1.pdf’ or ‘report_abc.pdf’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparison with "},{"code":"like","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While both "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" and "},{"type":"codeVoice","code":"like"},{"type":"text","text":" are used for pattern matching, their primary"},{"type":"text","text":" "},{"type":"text","text":"distinctions are:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Wildcards: "},{"type":"codeVoice","code":"like"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"%"},{"type":"text","text":" for zero or more characters and "},{"type":"codeVoice","code":"_"},{"type":"text","text":" for a single"},{"type":"text","text":" "},{"type":"text","text":"character, whereas "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" uses "},{"code":"*","type":"codeVoice"},{"type":"text","text":" and "},{"code":"?","type":"codeVoice"},{"type":"text","text":" respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Case Sensitivity: "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" is case-sensitive by default, while "},{"type":"codeVoice","code":"like"},{"type":"text","text":" is typically"},{"type":"text","text":" "},{"text":"case-insensitive.","type":"text"}]},{"anchor":"isNull-and-notNull","text":"isNull and notNull","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The operators "},{"type":"codeVoice","code":"isNull"},{"type":"text","text":" and "},{"type":"codeVoice","code":"notNull"},{"type":"text","text":" are used to determine whether an expression"},{"type":"text","text":" "},{"type":"text","text":"evaluates to "},{"type":"codeVoice","code":"ISNULL"},{"text":" or ","type":"text"},{"code":"NOTNULL","type":"codeVoice"},{"type":"text","text":" respectively. The SQL term "},{"type":"codeVoice","code":"NULL"},{"text":" is used","type":"text"},{"text":" ","type":"text"},{"text":"interchangeably with ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.notNull())","}"]},{"inlineContent":[{"text":"This query returns all of the ","type":"text"},{"code":"Person","type":"codeVoice"},{"type":"text","text":" records where the "},{"type":"codeVoice","code":"occupationId"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Nil-coalescing-operators","type":"heading","level":3,"text":"Nil coalescing operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides the "},{"code":"coalesce","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" operators, which are used to provide a","type":"text"},{"text":" ","type":"text"},{"text":"value when an expression otherwise evaluates to a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value. They provide","type":"text"},{"text":" ","type":"text"},{"text":"identical functionality. ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" is preferred in adhering to Swift conventions,","type":"text"},{"text":" ","type":"text"},{"text":"while ","type":"text"},{"code":"coalesce","type":"codeVoice"},{"text":" is provided for situations where parity with SQL is preferred.","type":"text"}]},{"type":"codeListing","code":["@SQLResult struct PersonViewState {","    var name: String","    var occupation: String","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    Select(","        result {","            PersonViewState(","                name: person.name,","                occupation: occupation.name ?? \"No occupation\"","            )","        }","    )","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this query the occupation name is coalesced to "},{"type":"codeVoice","code":"No occupation"},{"type":"text","text":" when no"},{"type":"text","text":" "},{"type":"codeVoice","code":"Occupation"},{"type":"text","text":" record is associated with the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":"."}]},{"anchor":"In-operator","type":"heading","level":2,"text":"In operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"in"},{"type":"text","text":" operator is a logical operator used in "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clauses to determine if"},{"type":"text","text":" "},{"type":"text","text":"a value matches any value within a specified list or a subquery. It provides a"},{"type":"text","text":" "},{"type":"text","text":"concise way to filter data based on multiple possible values for a single"},{"type":"text","text":" "},{"type":"text","text":"column, eliminating the need for multiple or conditions."}]},{"inlineContent":[{"type":"text","text":"SwiftQL provides three variants of the "},{"type":"codeVoice","code":"in"},{"type":"text","text":" operator"}],"type":"paragraph"},{"inlineContent":[{"text":"expression: This can be any valid expression or a column from a table.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"value_list: A comma-separated list of literal values (e.g., ‘value1’, ‘value2’, 10, 20).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"subquery: A "},{"type":"codeVoice","code":"Select"},{"type":"text","text":" statement that returns a single column of values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"in","type":"codeVoice"},{"type":"text","text":" operator returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if the expression matches any value present in"},{"type":"text","text":" "},{"type":"text","text":"the value_list or the result set of the subquery. If no match is found, it"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"code":"false","type":"codeVoice"},{"type":"text","text":". Prefixing the expression with the "},{"code":"!","type":"codeVoice"},{"type":"text","text":" (not) operator reverses"},{"type":"text","text":" "},{"type":"text","text":"this logic."}],"type":"paragraph"},{"inlineContent":[{"text":"Using a value_list.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.in([\"eng\", \"sci\"]))","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This query retrieves all employees whose department is either ‘eng’ or ‘sci’."}],"type":"paragraph"},{"type":"codeListing","code":["@SQLTable struct Customer {","    var id: String","    var name: String","}","","@SQLTable struct Order {","    var id: String","    var customerId: String","    var date: String","}","","let query = sql { schema in","    let customer = schema.table(Customer.self)","    Select(customer)","    From(customer)","    Where(","        customer.id.in { schema in","            let order = schema.table(Order.self)","            Select(order.customerId)","            From(order)","            Where(order.date > \"2034-01-01\")","        }","    )","}"],"syntax":"swift"},{"inlineContent":[{"text":"This query retrieves the names of customers who placed an order after January","type":"text"},{"text":" ","type":"text"},{"text":"1, 2024.","type":"text"}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"seeAlsoSections":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials"}],"kind":"article","references":{"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","kind":"article","type":"topic","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"title":"Built-in Functions","url":"\/documentation\/swiftql\/builtinfunctions","role":"article"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","title":"Functional Syntax","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/functionalsyntax","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}]},"doc://SwiftQL/documentation/SwiftQL/Queries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","title":"Select Queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"url":"\/documentation\/swiftql\/queries","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","type":"topic","url":"\/documentation\/swiftql\/livequeries","role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL":{"abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"role":"collection","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","url":"\/documentation\/swiftql","kind":"symbol","title":"SwiftQL"}}}