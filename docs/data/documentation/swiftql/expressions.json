{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials","title":"Essentials"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"SwiftQL allows complex expressions to be used wherever a column reference is","type":"text"},{"text":" ","type":"text"},{"text":"allowed. Complex expressions are commonly used when computing a result from","type":"text"},{"text":" ","type":"text"},{"text":"column values, and in where expressions.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Boolean operators","anchor":"Boolean-operators"},{"inlineContent":[{"text":"Standard boolean operators to combine multiple expressions, such as for a","type":"text"},{"text":" ","type":"text"},{"text":"boolean field or in a ","type":"text"},{"type":"codeVoice","code":"Where"},{"text":" clause:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.id == \"fred\" || person.age > 65)","}"]},{"inlineContent":[{"text":"SwiftQL supports the following Swift boolean operators: ","type":"text"},{"type":"codeVoice","code":"=="},{"text":", ","type":"text"},{"type":"codeVoice","code":"!="},{"text":", ","type":"text"},{"type":"codeVoice","code":"!"},{"text":", ","type":"text"},{"type":"codeVoice","code":"<"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":">"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":", ","type":"text"},{"type":"codeVoice","code":"<="},{"text":", ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":", ","type":"text"},{"type":"codeVoice","code":"||"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Numeric operators","anchor":"Numeric-operators"},{"inlineContent":[{"text":"SwiftQL supports the following operators for performing numeric operations with","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" expressions: ","type":"text"},{"type":"codeVoice","code":"+"},{"text":", ","type":"text"},{"type":"codeVoice","code":"-"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":", ","type":"text"},{"type":"codeVoice","code":"*"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following operators are suppported on ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" expressions: ","type":"text"},{"type":"codeVoice","code":"%"},{"text":" (modulo),","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"~"},{"text":" (bitwise negate).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As an example, we can compute the years each person has to retirement:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@SQLResult PersonRetirement {","    var personId: String","    var yearsToRetirement: Int","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let row = result {","        PersonRetirement(","            personId: person.id,","            yearsToRetirement: 65 - person.age","        )","    }","    Select(row)","    From(person)","    Where(row.yearsToRetirement > 0)","}"]},{"type":"heading","level":2,"text":"Grouping expressions","anchor":"Grouping-expressions"},{"inlineContent":[{"text":"Expressions in SwiftQL can be grouped using parenthesis like normal Swift,","type":"text"},{"text":" ","type":"text"},{"text":"often used to explicitly define operator precedence, or to visually separate","type":"text"},{"text":" ","type":"text"},{"text":"sub-expressions for legibility:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where((person.occupationId == \"eng\") && (((65 - person.age) > 0) || (person.age < 21)))","}"]},{"inlineContent":[{"type":"text","text":"When writing complex expressions, placing sub-expressions on separate lines with"},{"type":"text","text":" "},{"type":"text","text":"indentation can improve legibility. The above statement can also be written as:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(","        person.occupationId == \"eng\" ","        && ","        (","            (65 - person.age) > 0 ","            || ","            person.age < 21","        )","    )","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Text operators","anchor":"Text-operators","level":2},{"type":"paragraph","inlineContent":[{"text":"SwiftQL supports the following operators for text expressions:","type":"text"}]},{"text":"+ operator","type":"heading","level":3,"anchor":"+-operator"},{"inlineContent":[{"text":"Concatenates two or more strings:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["","@SQLTable struct Contact {","    var id: String","    var firstName: String","    var lastName: String","}","","@SQLResult struct ContactViewState {","    var name: String","}","","let query = sql { schema in ","    let contact = schema.table(Contact.self)","    Select(","        ContactViewState.columns(","            name: contact.firstName + \" \" + contact.lastName","        )","    )","    From(contact)","}"]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"SwiftQL does not support Swift string interpolation. Use the ","type":"text"},{"type":"codeVoice","code":"+"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"concatenation operator to combine two or more strings in SwiftQL.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"heading","text":"like operator","anchor":"like-operator","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator is used for pattern matching within text values. It"},{"type":"text","text":" "},{"type":"text","text":"allows searching for strings that match a specified pattern using wildcard"},{"type":"text","text":" "},{"text":"characters.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" operator is typically used in the ","type":"text"},{"type":"codeVoice","code":"Where"},{"text":" clause of a ","type":"text"},{"type":"codeVoice","code":"Select"},{"text":"","type":"text"},{"type":"text","text":" "},{"text":"statement to filter results based on a pattern.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find names starting with ‘A’:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"A%\"))","}"]},{"inlineContent":[{"type":"text","text":"Find names containing ‘smith’."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"%smith%\"))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find names with ‘a’ as the second letter:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"_a%\"))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find names exactly five characters long and ending with ‘e’:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"____e\"))","}"]},{"name":"Note","content":[{"inlineContent":[{"text":"SwiftQL does not currently support an ","type":"text"},{"type":"codeVoice","code":"escape"},{"type":"text","text":" clause for the "},{"type":"codeVoice","code":"like"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"glob-operator","type":"heading","text":"glob operator","level":3},{"inlineContent":[{"text":"The ","type":"text"},{"code":"glob","type":"codeVoice"},{"type":"text","text":" operator is used for pattern matching in string values, similar to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"like"},{"text":" operator, but with a key difference in its wildcard syntax and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"case sensitivity."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Pattern Matching: It determines whether a given string value matches a"},{"text":" ","type":"text"},{"type":"text","text":"specified pattern. If a match is found, it returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" otherwise, it returns"},{"type":"text","text":" "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Case Sensitivity: Unlike "},{"code":"like","type":"codeVoice"},{"type":"text","text":", "},{"code":"glob","type":"codeVoice"},{"type":"text","text":" is case-sensitive by default. This means"},{"type":"text","text":" "},{"code":"\"A\".glob(\"A\")","type":"codeVoice"},{"type":"text","text":" would return "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Wildcards: "},{"code":"glob","type":"codeVoice"},{"type":"text","text":" uses Unix file globbing syntax for its wildcards:"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"*"},{"text":" (asterisk): Matches zero or more characters.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"?"},{"type":"text","text":" (question mark): Matches exactly one character."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[charset]"},{"text":" (character set): Matches any single character within the specified","type":"text"},{"text":" ","type":"text"},{"text":"set. For example, ","type":"text"},{"type":"codeVoice","code":"[abc]"},{"text":" matches ","type":"text"},{"type":"codeVoice","code":"'a'"},{"text":", ","type":"text"},{"type":"codeVoice","code":"'b'"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"'c'"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[^charset]"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"[!charset]"},{"text":": Matches any single character not within the","type":"text"},{"text":" ","type":"text"},{"text":"specified set.","type":"text"}]},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.glob(\"J*n\"))","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This query would return names that start with ‘J’, end with ‘n’, and have any","type":"text"},{"text":" ","type":"text"},{"text":"number of characters in between, such as ‘John’ or ‘Jillian’.","type":"text"},{"text":" ","type":"text"},{"text":"Code","type":"text"}]},{"code":["@SQLTable struct Document {","    var id: String","    var name: String","}","","let query = sql { schema in","    let document = schema.table(Document.self)","    Select(document)","    From(document)","    Where(document.name.glob(\"report_??.pdf\"))","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This query would return filenames like ‘report_01.pdf’, ‘report_AB.pdf’, but not","type":"text"},{"text":" ","type":"text"},{"text":"‘report_1.pdf’ or ‘report_abc.pdf’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Comparison with ","type":"text"},{"type":"codeVoice","code":"like"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While both ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" are used for pattern matching, their primary","type":"text"},{"text":" ","type":"text"},{"text":"distinctions are:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Wildcards: ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" uses ","type":"text"},{"type":"codeVoice","code":"%"},{"text":" for zero or more characters and ","type":"text"},{"type":"codeVoice","code":"_"},{"text":" for a single","type":"text"},{"text":" ","type":"text"},{"text":"character, whereas ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" uses ","type":"text"},{"type":"codeVoice","code":"*"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"?"},{"text":" respectively.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Case Sensitivity: ","type":"text"},{"type":"codeVoice","code":"glob"},{"type":"text","text":" is case-sensitive by default, while "},{"type":"codeVoice","code":"like"},{"type":"text","text":" is typically"},{"type":"text","text":" "},{"type":"text","text":"case-insensitive."}]},{"type":"heading","text":"isNull and notNull","anchor":"isNull-and-notNull","level":3},{"inlineContent":[{"text":"The operators ","type":"text"},{"type":"codeVoice","code":"isNull"},{"text":" and ","type":"text"},{"code":"notNull","type":"codeVoice"},{"type":"text","text":" are used to determine whether an expression"},{"text":" ","type":"text"},{"type":"text","text":"evaluates to "},{"type":"codeVoice","code":"ISNULL"},{"type":"text","text":" or "},{"code":"NOTNULL","type":"codeVoice"},{"type":"text","text":" respectively. The SQL term "},{"code":"NULL","type":"codeVoice"},{"type":"text","text":" is used"},{"text":" ","type":"text"},{"type":"text","text":"interchangeably with "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.notNull())","}"],"type":"codeListing"},{"inlineContent":[{"text":"This query returns all of the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" records where the ","type":"text"},{"code":"occupationId","type":"codeVoice"},{"text":" is not","type":"text"},{"text":" ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Nil-coalescing-operators","text":"Nil coalescing operators","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"SwiftQL provides the "},{"type":"codeVoice","code":"coalesce"},{"type":"text","text":" and "},{"type":"codeVoice","code":"??"},{"type":"text","text":" operators, which are used to provide a"},{"type":"text","text":" "},{"text":"value when an expression otherwise evaluates to a ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value. They provide"},{"text":" ","type":"text"},{"type":"text","text":"identical functionality. "},{"code":"??","type":"codeVoice"},{"type":"text","text":" is preferred in adhering to Swift conventions,"},{"text":" ","type":"text"},{"type":"text","text":"while "},{"code":"coalesce","type":"codeVoice"},{"text":" is provided for situations where parity with SQL is preferred.","type":"text"}],"type":"paragraph"},{"code":["@SQLResult struct PersonViewState {","    var name: String","    var occupation: String","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    Select(","        result {","            PersonViewState(","                name: person.name,","                occupation: occupation.name ?? \"No occupation\"","            )","        }","    )","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this query the occupation name is coalesced to "},{"type":"codeVoice","code":"No occupation"},{"type":"text","text":" when no"},{"type":"text","text":" "},{"type":"codeVoice","code":"Occupation"},{"type":"text","text":" record is associated with the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"In-operator","text":"In operator","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" operator is a logical operator used in ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clauses to determine if","type":"text"},{"text":" ","type":"text"},{"text":"a value matches any value within a specified list or a subquery. It provides a","type":"text"},{"text":" ","type":"text"},{"text":"concise way to filter data based on multiple possible values for a single","type":"text"},{"text":" ","type":"text"},{"text":"column, eliminating the need for multiple or conditions.","type":"text"}]},{"inlineContent":[{"type":"text","text":"SwiftQL provides three variants of the "},{"code":"in","type":"codeVoice"},{"text":" operator","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"expression: This can be any valid expression or a column from a table.","type":"text"}]},{"inlineContent":[{"text":"value_list: A comma-separated list of literal values (e.g., ‘value1’, ‘value2’, 10, 20).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"subquery: A ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" statement that returns a single column of values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" operator returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the expression matches any value present in","type":"text"},{"text":" ","type":"text"},{"text":"the value_list or the result set of the subquery. If no match is found, it","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"code":"false","type":"codeVoice"},{"text":". Prefixing the expression with the ","type":"text"},{"code":"!","type":"codeVoice"},{"text":" (not) operator reverses","type":"text"},{"text":" ","type":"text"},{"text":"this logic.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Using a value_list.","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.in([\"eng\", \"sci\"]))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This query retrieves all employees whose department is either ‘eng’ or ‘sci’.","type":"text"}]},{"code":["@SQLTable struct Customer {","    var id: String","    var name: String","}","","@SQLTable struct Order {","    var id: String","    var customerId: String","    var date: String","}","","let query = sql { schema in","    let customer = schema.table(Customer.self)","    Select(customer)","    From(customer)","    Where(","        customer.id.in { schema in","            let order = schema.table(Order.self)","            Select(order.customerId)","            From(order)","            Where(order.date > \"2034-01-01\")","        }","    )","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This query retrieves the names of customers who placed an order after January","type":"text"},{"text":" ","type":"text"},{"text":"1, 2024.","type":"text"}]}],"kind":"content"}],"metadata":{"roleHeading":"Article","title":"Expressions","role":"article","modules":[{"name":"SwiftQL"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/expressions"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"references":{"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"kind":"article","title":"Live queries","role":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","url":"\/documentation\/swiftql\/livequeries","abstract":[{"type":"text","text":"Use Combine Publishers to observe changes to the database."}]},"doc://SwiftQL/documentation/SwiftQL/Queries":{"kind":"article","title":"Select Queries","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","url":"\/documentation\/swiftql\/queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"kind":"article","title":"Getting started","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"kind":"article","title":"Built-in Functions","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","type":"topic","url":"\/documentation\/swiftql\/builtinfunctions","abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"kind":"article","role":"article","title":"Functional Syntax","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","url":"\/documentation\/swiftql\/functionalsyntax","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"type":"topic"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","role":"collection","title":"SwiftQL","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"type":"topic"}}}