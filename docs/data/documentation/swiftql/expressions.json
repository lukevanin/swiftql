{"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"SwiftQL allows complex expressions to be used wherever a column reference is"},{"type":"text","text":" "},{"type":"text","text":"allowed. Complex expressions are commonly used when computing a result from"},{"type":"text","text":" "},{"type":"text","text":"column values, and in where expressions."}],"type":"paragraph"},{"anchor":"Boolean-operators","level":2,"type":"heading","text":"Boolean operators"},{"type":"paragraph","inlineContent":[{"text":"Standard boolean operators to combine multiple expressions, such as for a","type":"text"},{"text":" ","type":"text"},{"text":"boolean field or in a ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clause:","type":"text"}]},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.id == \"fred\" || person.age > 65)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL supports the following Swift boolean operators: "},{"type":"codeVoice","code":"=="},{"text":", ","type":"text"},{"code":"!=","type":"codeVoice"},{"text":", ","type":"text"},{"code":"!","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":">","type":"codeVoice"},{"text":", ","type":"text"},{"code":">=","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":", ","type":"text"},{"code":"||","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Numeric-operators","level":2,"type":"heading","text":"Numeric operators"},{"inlineContent":[{"type":"text","text":"SwiftQL supports the following operators for performing numeric operations with"},{"type":"text","text":" "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" expressions: "},{"type":"codeVoice","code":"+"},{"type":"text","text":", "},{"type":"codeVoice","code":"-"},{"type":"text","text":", "},{"type":"codeVoice","code":"\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"*"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following operators are suppported on "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" expressions: "},{"type":"codeVoice","code":"%"},{"type":"text","text":" (modulo),"},{"type":"text","text":" "},{"type":"codeVoice","code":"~"},{"type":"text","text":" (bitwise negate)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an example, we can compute the years each person has to retirement:"}],"type":"paragraph"},{"code":["@SQLResult PersonRetirement {","    var personId: String","    var yearsToRetirement: Int","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let row = result {","        PersonRetirement(","            personId: person.id,","            yearsToRetirement: 65 - person.age","        )","    }","    Select(row)","    From(person)","    Where(row.yearsToRetirement > 0)","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Grouping-expressions","level":2,"type":"heading","text":"Grouping expressions"},{"inlineContent":[{"type":"text","text":"Expressions in SwiftQL can be grouped using parenthesis like normal Swift,"},{"type":"text","text":" "},{"type":"text","text":"often used to explicitly define operator precedence, or to visually separate"},{"type":"text","text":" "},{"type":"text","text":"sub-expressions for legibility:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where((person.occupationId == \"eng\") && (((65 - person.age) > 0) || (person.age < 21)))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"When writing complex expressions, placing sub-expressions on separate lines with"},{"type":"text","text":" "},{"type":"text","text":"indentation can improve legibility. The above statement can also be written as:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(","        person.occupationId == \"eng\" ","        && ","        (","            (65 - person.age) > 0 ","            || ","            person.age < 21","        )","    )","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Text-operators","level":2,"type":"heading","text":"Text operators"},{"inlineContent":[{"type":"text","text":"SwiftQL supports the following operators for text expressions:"}],"type":"paragraph"},{"anchor":"+-operator","level":3,"type":"heading","text":"+ operator"},{"inlineContent":[{"type":"text","text":"Concatenates two or more strings:"}],"type":"paragraph"},{"code":["","@SQLTable struct Contact {","    var id: String","    var firstName: String","    var lastName: String","}","","@SQLResult struct ContactViewState {","    var name: String","}","","let query = sql { schema in ","    let contact = schema.table(Contact.self)","    Select(","        ContactViewState.columns(","            name: contact.firstName + \" \" + contact.lastName","        )","    )","    From(contact)","}"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"SwiftQL does not support Swift string interpolation. Use the ","type":"text"},{"code":"+","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"concatenation operator to combine two or more strings in SwiftQL.","type":"text"}]}],"style":"note","type":"aside","name":"Note"},{"anchor":"like-operator","level":3,"type":"heading","text":"like operator"},{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator is used for pattern matching within text values. It"},{"type":"text","text":" "},{"type":"text","text":"allows searching for strings that match a specified pattern using wildcard"},{"type":"text","text":" "},{"type":"text","text":"characters."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator is typically used in the "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clause of a "},{"type":"codeVoice","code":"Select"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"statement to filter results based on a pattern."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Find names starting with ‘A’:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"A%\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Find names containing ‘smith’."}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"%smith%\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Find names with ‘a’ as the second letter:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"_a%\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Find names exactly five characters long and ending with ‘e’:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"____e\"))","}"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"SwiftQL does not currently support an ","type":"text"},{"code":"escape","type":"codeVoice"},{"text":" clause for the ","type":"text"},{"code":"like","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]}],"style":"note","type":"aside","name":"Note"},{"anchor":"glob-operator","level":3,"type":"heading","text":"glob operator"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" operator is used for pattern matching in string values, similar to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator, but with a key difference in its wildcard syntax and"},{"type":"text","text":" "},{"type":"text","text":"case sensitivity."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Pattern Matching: It determines whether a given string value matches a"},{"type":"text","text":" "},{"type":"text","text":"specified pattern. If a match is found, it returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" otherwise, it returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Case Sensitivity: Unlike "},{"type":"codeVoice","code":"like"},{"type":"text","text":", "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" is case-sensitive by default. This means"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"A\".glob(\"A\")"},{"type":"text","text":" would return "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Wildcards: "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" uses Unix file globbing syntax for its wildcards:"}],"type":"paragraph"},{"inlineContent":[{"code":"*","type":"codeVoice"},{"text":" (asterisk): Matches zero or more characters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"?","type":"codeVoice"},{"type":"text","text":" (question mark): Matches exactly one character."}],"type":"paragraph"},{"inlineContent":[{"code":"[charset]","type":"codeVoice"},{"text":" (character set): Matches any single character within the specified","type":"text"},{"text":" ","type":"text"},{"text":"set. For example, ","type":"text"},{"code":"[abc]","type":"codeVoice"},{"text":" matches ","type":"text"},{"code":"'a'","type":"codeVoice"},{"text":", ","type":"text"},{"code":"'b'","type":"codeVoice"},{"type":"text","text":", or "},{"code":"'c'","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"code":"[^charset]","type":"codeVoice"},{"type":"text","text":" or "},{"code":"[!charset]","type":"codeVoice"},{"text":": Matches any single character not within the","type":"text"},{"type":"text","text":" "},{"text":"specified set.","type":"text"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.glob(\"J*n\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This query would return names that start with ‘J’, end with ‘n’, and have any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"number of characters in between, such as ‘John’ or ‘Jillian’."},{"text":" ","type":"text"},{"type":"text","text":"Code"}],"type":"paragraph"},{"code":["@SQLTable struct Document {","    var id: String","    var name: String","}","","let query = sql { schema in","    let document = schema.table(Document.self)","    Select(document)","    From(document)","    Where(document.name.glob(\"report_??.pdf\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This query would return filenames like ‘report_01.pdf’, ‘report_AB.pdf’, but not"},{"text":" ","type":"text"},{"text":"‘report_1.pdf’ or ‘report_abc.pdf’.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Comparison with ","type":"text"},{"type":"codeVoice","code":"like"},{"text":":","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While both "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" and "},{"type":"codeVoice","code":"like"},{"type":"text","text":" are used for pattern matching, their primary"},{"text":" ","type":"text"},{"type":"text","text":"distinctions are:"}],"type":"paragraph"},{"inlineContent":[{"text":"Wildcards: ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" uses ","type":"text"},{"type":"codeVoice","code":"%"},{"type":"text","text":" for zero or more characters and "},{"type":"codeVoice","code":"_"},{"type":"text","text":" for a single"},{"type":"text","text":" "},{"type":"text","text":"character, whereas "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"*"},{"text":" and ","type":"text"},{"code":"?","type":"codeVoice"},{"text":" respectively.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Case Sensitivity: ","type":"text"},{"code":"glob","type":"codeVoice"},{"text":" is case-sensitive by default, while ","type":"text"},{"code":"like","type":"codeVoice"},{"text":" is typically","type":"text"},{"text":" ","type":"text"},{"text":"case-insensitive.","type":"text"}],"type":"paragraph"},{"text":"isNull and notNull","anchor":"isNull-and-notNull","type":"heading","level":3},{"inlineContent":[{"text":"The operators ","type":"text"},{"code":"isNull","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"notNull","type":"codeVoice"},{"text":" are used to determine whether an expression","type":"text"},{"text":" ","type":"text"},{"text":"evaluates to ","type":"text"},{"code":"ISNULL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"NOTNULL","type":"codeVoice"},{"text":" respectively. The SQL term ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":" is used","type":"text"},{"text":" ","type":"text"},{"text":"interchangeably with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.notNull())","}"]},{"inlineContent":[{"text":"This query returns all of the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" records where the ","type":"text"},{"code":"occupationId","type":"codeVoice"},{"text":" is not","type":"text"},{"text":" ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Nil coalescing operators","anchor":"Nil-coalescing-operators","type":"heading","level":3},{"inlineContent":[{"text":"SwiftQL provides the ","type":"text"},{"code":"coalesce","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" operators, which are used to provide a","type":"text"},{"text":" ","type":"text"},{"text":"value when an expression otherwise evaluates to a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value. They provide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"identical functionality. "},{"type":"codeVoice","code":"??"},{"type":"text","text":" is preferred in adhering to Swift conventions,"},{"text":" ","type":"text"},{"type":"text","text":"while "},{"code":"coalesce","type":"codeVoice"},{"type":"text","text":" is provided for situations where parity with SQL is preferred."}],"type":"paragraph"},{"code":["@SQLResult struct PersonViewState {","    var name: String","    var occupation: String","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    Select(","        result {","            PersonViewState(","                name: person.name,","                occupation: occupation.name ?? \"No occupation\"","            )","        }","    )","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"In this query the occupation name is coalesced to ","type":"text"},{"type":"codeVoice","code":"No occupation"},{"type":"text","text":" when no"},{"type":"text","text":" "},{"type":"codeVoice","code":"Occupation"},{"text":" record is associated with the ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"In operator","anchor":"In-operator","type":"heading","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" operator is a logical operator used in "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clauses to determine if"},{"type":"text","text":" "},{"text":"a value matches any value within a specified list or a subquery. It provides a","type":"text"},{"text":" ","type":"text"},{"text":"concise way to filter data based on multiple possible values for a single","type":"text"},{"text":" ","type":"text"},{"text":"column, eliminating the need for multiple or conditions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftQL provides three variants of the ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" operator","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"expression: This can be any valid expression or a column from a table.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"value_list: A comma-separated list of literal values (e.g., ‘value1’, ‘value2’, 10, 20).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"subquery: A ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" statement that returns a single column of values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" operator returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the expression matches any value present in","type":"text"},{"text":" ","type":"text"},{"text":"the value_list or the result set of the subquery. If no match is found, it","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"code":"false","type":"codeVoice"},{"text":". Prefixing the expression with the ","type":"text"},{"code":"!","type":"codeVoice"},{"text":" (not) operator reverses","type":"text"},{"text":" ","type":"text"},{"text":"this logic.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Using a value_list.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.in([\"eng\", \"sci\"]))","}"]},{"inlineContent":[{"text":"This query retrieves all employees whose department is either ‘eng’ or ‘sci’.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@SQLTable struct Customer {","    var id: String","    var name: String","}","","@SQLTable struct Order {","    var id: String","    var customerId: String","    var date: String","}","","let query = sql { schema in","    let customer = schema.table(Customer.self)","    Select(customer)","    From(customer)","    Where(","        customer.id.in { schema in","            let order = schema.table(Order.self)","            Select(order.customerId)","            From(order)","            Where(order.date > \"2034-01-01\")","        }","    )","}"]},{"inlineContent":[{"text":"This query retrieves the names of customers who placed an order after January","type":"text"},{"text":" ","type":"text"},{"text":"1, 2024.","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/swiftql\/expressions"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"article","title":"Expressions","roleHeading":"Article","modules":[{"name":"SwiftQL"}]},"kind":"article","references":{"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","role":"collection","type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"title":"SwiftQL","role":"collectionGroup","kind":"article","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","url":"\/documentation\/swiftql\/documentation"}}}