{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"generated":true,"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","interfaceLanguage":"swift"},"metadata":{"role":"article","roleHeading":"Article","title":"Expressions","modules":[{"name":"SwiftQL"}]},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"sections":[],"variants":[{"paths":["\/documentation\/swiftql\/expressions"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL allows complex expressions to be used wherever a column reference is","type":"text"},{"text":" ","type":"text"},{"text":"allowed. Complex expressions are commonly used when computing a result from","type":"text"},{"text":" ","type":"text"},{"text":"column values, and in where expressions.","type":"text"}]},{"text":"Boolean operators","type":"heading","level":2,"anchor":"Boolean-operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard boolean operators to combine multiple expressions, such as for a"},{"type":"text","text":" "},{"type":"text","text":"boolean field or in a "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clause:"}]},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.id == \"fred\" || person.age > 65)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL supports the following Swift boolean operators: "},{"code":"==","type":"codeVoice"},{"text":", ","type":"text"},{"code":"!=","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"!"},{"text":", ","type":"text"},{"type":"codeVoice","code":"<"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":">"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":", ","type":"text"},{"type":"codeVoice","code":"<="},{"text":", ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":", ","type":"text"},{"code":"||","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"Numeric operators","anchor":"Numeric-operators","level":2,"type":"heading"},{"inlineContent":[{"text":"SwiftQL supports the following operators for performing numeric operations with","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" expressions: ","type":"text"},{"type":"codeVoice","code":"+"},{"text":", ","type":"text"},{"type":"codeVoice","code":"-"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":", ","type":"text"},{"code":"*","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following operators are suppported on "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" expressions: "},{"type":"codeVoice","code":"%"},{"type":"text","text":" (modulo),"},{"text":" ","type":"text"},{"type":"codeVoice","code":"~"},{"type":"text","text":" (bitwise negate)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, we can compute the years each person has to retirement:"}]},{"type":"codeListing","syntax":"swift","code":["@SQLResult PersonRetirement {","    var personId: String","    var yearsToRetirement: Int","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let row = result {","        PersonRetirement(","            personId: person.id,","            yearsToRetirement: 65 - person.age","        )","    }","    Select(row)","    From(person)","    Where(row.yearsToRetirement > 0)","}"]},{"type":"heading","anchor":"Grouping-expressions","level":2,"text":"Grouping expressions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Expressions in SwiftQL can be grouped using parenthesis like normal Swift,"},{"type":"text","text":" "},{"type":"text","text":"often used to explicitly define operator precedence, or to visually separate"},{"type":"text","text":" "},{"type":"text","text":"sub-expressions for legibility:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where((person.occupationId == \"eng\") && (((65 - person.age) > 0) || (person.age < 21)))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When writing complex expressions, placing sub-expressions on separate lines with"},{"type":"text","text":" "},{"type":"text","text":"indentation can improve legibility. The above statement can also be written as:"}]},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(","        person.occupationId == \"eng\" ","        && ","        (","            (65 - person.age) > 0 ","            || ","            person.age < 21","        )","    )","}"],"type":"codeListing"},{"text":"Text operators","type":"heading","anchor":"Text-operators","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL supports the following operators for text expressions:"}]},{"text":"+ operator","type":"heading","anchor":"+-operator","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates two or more strings:"}]},{"syntax":"swift","code":["","@SQLTable struct Contact {","    var id: String","    var firstName: String","    var lastName: String","}","","@SQLResult struct ContactViewState {","    var name: String","}","","let query = sql { schema in ","    let contact = schema.table(Contact.self)","    Select(","        ContactViewState.columns(","            name: contact.firstName + \" \" + contact.lastName","        )","    )","    From(contact)","}"],"type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"text":"SwiftQL does not support Swift string interpolation. Use the ","type":"text"},{"code":"+","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"concatenation operator to combine two or more strings in SwiftQL.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"level":3,"text":"like operator","anchor":"like-operator","type":"heading"},{"inlineContent":[{"type":"text","text":"Use the "},{"code":"like","type":"codeVoice"},{"type":"text","text":" operator is used for pattern matching within text values. It"},{"text":" ","type":"text"},{"text":"allows searching for strings that match a specified pattern using wildcard","type":"text"},{"text":" ","type":"text"},{"text":"characters.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"like","type":"codeVoice"},{"text":" operator is typically used in the ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clause of a ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement to filter results based on a pattern.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find names starting with ‘A’:"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"A%\"))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Find names containing ‘smith’.","type":"text"}]},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"%smith%\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Find names with ‘a’ as the second letter:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"_a%\"))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Find names exactly five characters long and ending with ‘e’:"}],"type":"paragraph"},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"____e\"))","}"],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"text":"SwiftQL does not currently support an ","type":"text"},{"type":"codeVoice","code":"escape"},{"text":" clause for the ","type":"text"},{"type":"codeVoice","code":"like"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"anchor":"glob-operator","text":"glob operator","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" operator is used for pattern matching in string values, similar to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator, but with a key difference in its wildcard syntax and"},{"type":"text","text":" "},{"type":"text","text":"case sensitivity."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Pattern Matching: It determines whether a given string value matches a"},{"type":"text","text":" "},{"type":"text","text":"specified pattern. If a match is found, it returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" otherwise, it returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Case Sensitivity: Unlike "},{"code":"like","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" is case-sensitive by default. This means"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"A\".glob(\"A\")"},{"type":"text","text":" would return "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Wildcards: "},{"type":"codeVoice","code":"glob"},{"type":"text","text":" uses Unix file globbing syntax for its wildcards:"}],"type":"paragraph"},{"inlineContent":[{"code":"*","type":"codeVoice"},{"text":" (asterisk): Matches zero or more characters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"?","type":"codeVoice"},{"text":" (question mark): Matches exactly one character.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"[charset]"},{"type":"text","text":" (character set): Matches any single character within the specified"},{"type":"text","text":" "},{"type":"text","text":"set. For example, "},{"type":"codeVoice","code":"[abc]"},{"type":"text","text":" matches "},{"type":"codeVoice","code":"'a'"},{"type":"text","text":", "},{"type":"codeVoice","code":"'b'"},{"type":"text","text":", or "},{"type":"codeVoice","code":"'c'"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"[^charset]"},{"type":"text","text":" or "},{"type":"codeVoice","code":"[!charset]"},{"type":"text","text":": Matches any single character not within the"},{"type":"text","text":" "},{"type":"text","text":"specified set."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.glob(\"J*n\"))","}"]},{"inlineContent":[{"type":"text","text":"This query would return names that start with ‘J’, end with ‘n’, and have any"},{"type":"text","text":" "},{"type":"text","text":"number of characters in between, such as ‘John’ or ‘Jillian’."},{"type":"text","text":" "},{"type":"text","text":"Code"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@SQLTable struct Document {","    var id: String","    var name: String","}","","let query = sql { schema in","    let document = schema.table(Document.self)","    Select(document)","    From(document)","    Where(document.name.glob(\"report_??.pdf\"))","}"]},{"inlineContent":[{"type":"text","text":"This query would return filenames like ‘report_01.pdf’, ‘report_AB.pdf’, but not"},{"type":"text","text":" "},{"type":"text","text":"‘report_1.pdf’ or ‘report_abc.pdf’."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Comparison with "},{"type":"codeVoice","code":"like"},{"type":"text","text":":"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While both "},{"code":"glob","type":"codeVoice"},{"type":"text","text":" and "},{"code":"like","type":"codeVoice"},{"type":"text","text":" are used for pattern matching, their primary"},{"type":"text","text":" "},{"type":"text","text":"distinctions are:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Wildcards: "},{"type":"codeVoice","code":"like"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"%"},{"type":"text","text":" for zero or more characters and "},{"type":"codeVoice","code":"_"},{"type":"text","text":" for a single"},{"type":"text","text":" "},{"type":"text","text":"character, whereas "},{"code":"glob","type":"codeVoice"},{"text":" uses ","type":"text"},{"code":"*","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"?","type":"codeVoice"},{"text":" respectively.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Case Sensitivity: ","type":"text"},{"code":"glob","type":"codeVoice"},{"text":" is case-sensitive by default, while ","type":"text"},{"code":"like","type":"codeVoice"},{"text":" is typically","type":"text"},{"text":" ","type":"text"},{"text":"case-insensitive.","type":"text"}]},{"level":3,"text":"isNull and notNull","anchor":"isNull-and-notNull","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The operators ","type":"text"},{"type":"codeVoice","code":"isNull"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"notNull"},{"type":"text","text":" are used to determine whether an expression"},{"type":"text","text":" "},{"type":"text","text":"evaluates to "},{"type":"codeVoice","code":"ISNULL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"NOTNULL"},{"type":"text","text":" respectively. The SQL term "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" is used"},{"text":" ","type":"text"},{"text":"interchangeably with ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.notNull())","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This query returns all of the "},{"type":"codeVoice","code":"Person"},{"text":" records where the ","type":"text"},{"code":"occupationId","type":"codeVoice"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"codeVoice","code":"NULL"},{"text":".","type":"text"}]},{"type":"heading","text":"Nil coalescing operators","anchor":"Nil-coalescing-operators","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides the "},{"type":"codeVoice","code":"coalesce"},{"type":"text","text":" and "},{"type":"codeVoice","code":"??"},{"type":"text","text":" operators, which are used to provide a"},{"type":"text","text":" "},{"text":"value when an expression otherwise evaluates to a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value. They provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"identical functionality. "},{"type":"codeVoice","code":"??"},{"text":" is preferred in adhering to Swift conventions,","type":"text"},{"text":" ","type":"text"},{"text":"while ","type":"text"},{"type":"codeVoice","code":"coalesce"},{"text":" is provided for situations where parity with SQL is preferred.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@SQLResult struct PersonViewState {","    var name: String","    var occupation: String","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    Select(","        result {","            PersonViewState(","                name: person.name,","                occupation: occupation.name ?? \"No occupation\"","            )","        }","    )","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"inlineContent":[{"text":"In this query the occupation name is coalesced to ","type":"text"},{"type":"codeVoice","code":"No occupation"},{"text":" when no","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Occupation"},{"text":" record is associated with the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"In operator","level":2,"anchor":"In-operator","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"in"},{"type":"text","text":" operator is a logical operator used in "},{"type":"codeVoice","code":"Where"},{"text":" clauses to determine if","type":"text"},{"text":" ","type":"text"},{"text":"a value matches any value within a specified list or a subquery. It provides a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"concise way to filter data based on multiple possible values for a single"},{"type":"text","text":" "},{"type":"text","text":"column, eliminating the need for multiple or conditions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides three variants of the "},{"code":"in","type":"codeVoice"},{"type":"text","text":" operator"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"expression: This can be any valid expression or a column from a table."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"value_list: A comma-separated list of literal values (e.g., ‘value1’, ‘value2’, 10, 20)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"subquery: A "},{"code":"Select","type":"codeVoice"},{"type":"text","text":" statement that returns a single column of values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"in","type":"codeVoice"},{"text":" operator returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the expression matches any value present in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the value_list or the result set of the subquery. If no match is found, it"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Prefixing the expression with the "},{"type":"codeVoice","code":"!"},{"type":"text","text":" (not) operator reverses"},{"type":"text","text":" "},{"text":"this logic.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a value_list."}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.in([\"eng\", \"sci\"]))","}"]},{"inlineContent":[{"type":"text","text":"This query retrieves all employees whose department is either ‘eng’ or ‘sci’."}],"type":"paragraph"},{"code":["@SQLTable struct Customer {","    var id: String","    var name: String","}","","@SQLTable struct Order {","    var id: String","    var customerId: String","    var date: String","}","","let query = sql { schema in","    let customer = schema.table(Customer.self)","    Select(customer)","    From(customer)","    Where(","        customer.id.in { schema in","            let order = schema.table(Order.self)","            Select(order.customerId)","            From(order)","            Where(order.date > \"2034-01-01\")","        }","    )","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This query retrieves the names of customers who placed an order after January","type":"text"},{"text":" ","type":"text"},{"text":"1, 2024.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"kind":"article","type":"topic","url":"\/documentation\/swiftql\/livequeries","title":"Live queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"role":"article"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"role":"collection","url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","title":"Built-in Functions","role":"article","url":"\/documentation\/swiftql\/builtinfunctions","type":"topic","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}]},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"type":"topic","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","title":"Functional Syntax","role":"article","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/functionalsyntax"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"type":"topic","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","title":"Getting started","role":"article","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"url":"\/documentation\/swiftql\/gettingstarted"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"kind":"article","type":"topic","url":"\/documentation\/swiftql\/queries","title":"Select Queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"role":"article"}}}