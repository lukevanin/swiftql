{"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL allows complex expressions to be used wherever a column reference is"},{"type":"text","text":" "},{"type":"text","text":"allowed. Complex expressions are commonly used when computing a result from"},{"type":"text","text":" "},{"type":"text","text":"column values, and in where expressions."}]},{"type":"heading","level":2,"text":"Boolean operators","anchor":"Boolean-operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard boolean operators to combine multiple expressions, such as for a"},{"type":"text","text":" "},{"type":"text","text":"boolean field or in a "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clause:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.id == \"fred\" || person.age > 65)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL supports the following Swift boolean operators: "},{"type":"codeVoice","code":"=="},{"type":"text","text":", "},{"type":"codeVoice","code":"!="},{"type":"text","text":", "},{"type":"codeVoice","code":"!"},{"type":"text","text":", "},{"type":"codeVoice","code":"<"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":">"},{"type":"text","text":", "},{"type":"codeVoice","code":">="},{"type":"text","text":", "},{"type":"codeVoice","code":"<="},{"type":"text","text":", "},{"type":"codeVoice","code":"&&"},{"type":"text","text":", "},{"type":"codeVoice","code":"||"},{"type":"text","text":"."}]},{"type":"heading","level":2,"text":"Numeric operators","anchor":"Numeric-operators"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL supports the following operators for performing numeric operations with","type":"text"},{"text":" ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" expressions: "},{"type":"codeVoice","code":"+"},{"text":", ","type":"text"},{"type":"codeVoice","code":"-"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":", ","type":"text"},{"type":"codeVoice","code":"*"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following operators are suppported on "},{"type":"codeVoice","code":"Int"},{"text":" expressions: ","type":"text"},{"type":"codeVoice","code":"%"},{"text":" (modulo),","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"~"},{"text":" (bitwise negate).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"As an example, we can compute the years each person has to retirement:","type":"text"}]},{"type":"codeListing","code":["@SQLResult PersonRetirement {","    var personId: String","    var yearsToRetirement: Int","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let row = result {","        PersonRetirement(","            personId: person.id,","            yearsToRetirement: 65 - person.age","        )","    }","    Select(row)","    From(person)","    Where(row.yearsToRetirement > 0)","}"],"syntax":"swift"},{"level":2,"type":"heading","text":"Grouping expressions","anchor":"Grouping-expressions"},{"type":"paragraph","inlineContent":[{"text":"Expressions in SwiftQL can be grouped using parenthesis like normal Swift,","type":"text"},{"text":" ","type":"text"},{"text":"often used to explicitly define operator precedence, or to visually separate","type":"text"},{"text":" ","type":"text"},{"text":"sub-expressions for legibility:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where((person.occupationId == \"eng\") && (((65 - person.age) > 0) || (person.age < 21)))","}"],"syntax":"swift"},{"inlineContent":[{"text":"When writing complex expressions, placing sub-expressions on separate lines with","type":"text"},{"type":"text","text":" "},{"text":"indentation can improve legibility. The above statement can also be written as:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(","        person.occupationId == \"eng\" ","        && ","        (","            (65 - person.age) > 0 ","            || ","            person.age < 21","        )","    )","}"]},{"level":2,"text":"Text operators","anchor":"Text-operators","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL supports the following operators for text expressions:","type":"text"}]},{"text":"+ operator","anchor":"+-operator","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates two or more strings:"}]},{"syntax":"swift","code":["","@SQLTable struct Contact {","    var id: String","    var firstName: String","    var lastName: String","}","","@SQLResult struct ContactViewState {","    var name: String","}","","let query = sql { schema in ","    let contact = schema.table(Contact.self)","    Select(","        ContactViewState.columns(","            name: contact.firstName + \" \" + contact.lastName","        )","    )","    From(contact)","}"],"type":"codeListing"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL does not support Swift string interpolation. Use the "},{"type":"codeVoice","code":"+"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"concatenation operator to combine two or more strings in SwiftQL."}]}],"style":"note"},{"anchor":"like-operator","type":"heading","level":3,"text":"like operator"},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"like","type":"codeVoice"},{"text":" operator is used for pattern matching within text values. It","type":"text"},{"text":" ","type":"text"},{"text":"allows searching for strings that match a specified pattern using wildcard","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"characters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator is typically used in the "},{"type":"codeVoice","code":"Where"},{"text":" clause of a ","type":"text"},{"type":"codeVoice","code":"Select"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"statement to filter results based on a pattern."}]},{"type":"paragraph","inlineContent":[{"text":"Find names starting with ‘A’:","type":"text"}]},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"A%\"))","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Find names containing ‘smith’.","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"%smith%\"))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find names with ‘a’ as the second letter:"}]},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"_a%\"))","}"]},{"type":"paragraph","inlineContent":[{"text":"Find names exactly five characters long and ending with ‘e’:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.like(\"____e\"))","}"],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"SwiftQL does not currently support an ","type":"text"},{"code":"escape","type":"codeVoice"},{"text":" clause for the ","type":"text"},{"code":"like","type":"codeVoice"},{"type":"text","text":""},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]}]},{"level":3,"text":"glob operator","anchor":"glob-operator","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" operator is used for pattern matching in string values, similar to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"like"},{"type":"text","text":" operator, but with a key difference in its wildcard syntax and"},{"text":" ","type":"text"},{"type":"text","text":"case sensitivity."}]},{"type":"paragraph","inlineContent":[{"text":"Pattern Matching: It determines whether a given string value matches a","type":"text"},{"text":" ","type":"text"},{"text":"specified pattern. If a match is found, it returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" otherwise, it returns","type":"text"},{"text":" ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Case Sensitivity: Unlike ","type":"text"},{"code":"like","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" is case-sensitive by default. This means","type":"text"},{"text":" ","type":"text"},{"code":"\"A\".glob(\"A\")","type":"codeVoice"},{"text":" would return ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Wildcards: "},{"type":"codeVoice","code":"glob"},{"text":" uses Unix file globbing syntax for its wildcards:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"*"},{"text":" (asterisk): Matches zero or more characters.","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"?"},{"type":"text","text":" (question mark): Matches exactly one character."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"[charset]"},{"type":"text","text":" (character set): Matches any single character within the specified"},{"type":"text","text":" "},{"type":"text","text":"set. For example, "},{"type":"codeVoice","code":"[abc]"},{"type":"text","text":" matches "},{"type":"codeVoice","code":"'a'"},{"type":"text","text":", "},{"type":"codeVoice","code":"'b'"},{"type":"text","text":", or "},{"type":"codeVoice","code":"'c'"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"[^charset]"},{"type":"text","text":" or "},{"type":"codeVoice","code":"[!charset]"},{"type":"text","text":": Matches any single character not within the"},{"type":"text","text":" "},{"type":"text","text":"specified set."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name.glob(\"J*n\"))","}"]},{"inlineContent":[{"type":"text","text":"This query would return names that start with ‘J’, end with ‘n’, and have any"},{"type":"text","text":" "},{"type":"text","text":"number of characters in between, such as ‘John’ or ‘Jillian’."},{"type":"text","text":" "},{"type":"text","text":"Code"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@SQLTable struct Document {","    var id: String","    var name: String","}","","let query = sql { schema in","    let document = schema.table(Document.self)","    Select(document)","    From(document)","    Where(document.name.glob(\"report_??.pdf\"))","}"]},{"type":"paragraph","inlineContent":[{"text":"This query would return filenames like ‘report_01.pdf’, ‘report_AB.pdf’, but not","type":"text"},{"text":" ","type":"text"},{"text":"‘report_1.pdf’ or ‘report_abc.pdf’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Comparison with ","type":"text"},{"type":"codeVoice","code":"like"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While both ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" are used for pattern matching, their primary","type":"text"},{"text":" ","type":"text"},{"text":"distinctions are:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Wildcards: ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" uses ","type":"text"},{"type":"codeVoice","code":"%"},{"text":" for zero or more characters and ","type":"text"},{"type":"codeVoice","code":"_"},{"text":" for a single","type":"text"},{"text":" ","type":"text"},{"text":"character, whereas ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" uses ","type":"text"},{"type":"codeVoice","code":"*"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"?"},{"text":" respectively.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Case Sensitivity: ","type":"text"},{"type":"codeVoice","code":"glob"},{"text":" is case-sensitive by default, while ","type":"text"},{"type":"codeVoice","code":"like"},{"text":" is typically","type":"text"},{"text":" ","type":"text"},{"text":"case-insensitive.","type":"text"}]},{"type":"heading","level":3,"text":"isNull and notNull","anchor":"isNull-and-notNull"},{"type":"paragraph","inlineContent":[{"text":"The operators ","type":"text"},{"type":"codeVoice","code":"isNull"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"notNull"},{"text":" are used to determine whether an expression","type":"text"},{"text":" ","type":"text"},{"text":"evaluates to ","type":"text"},{"type":"codeVoice","code":"ISNULL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NOTNULL"},{"text":" respectively. The SQL term ","type":"text"},{"type":"codeVoice","code":"NULL"},{"text":" is used","type":"text"},{"text":" ","type":"text"},{"text":"interchangeably with ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.notNull())","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This query returns all of the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" records where the ","type":"text"},{"code":"occupationId","type":"codeVoice"},{"text":" is not","type":"text"},{"text":" ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"Nil coalescing operators","anchor":"Nil-coalescing-operators"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides the ","type":"text"},{"code":"coalesce","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" operators, which are used to provide a","type":"text"},{"text":" ","type":"text"},{"text":"value when an expression otherwise evaluates to a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value. They provide","type":"text"},{"text":" ","type":"text"},{"text":"identical functionality. ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" is preferred in adhering to Swift conventions,","type":"text"},{"text":" ","type":"text"},{"text":"while ","type":"text"},{"code":"coalesce","type":"codeVoice"},{"text":" is provided for situations where parity with SQL is preferred.","type":"text"}]},{"type":"codeListing","code":["@SQLResult struct PersonViewState {","    var name: String","    var occupation: String","}","","let query = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    Select(","        result {","            PersonViewState(","                name: person.name,","                occupation: occupation.name ?? \"No occupation\"","            )","        }","    )","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this query the occupation name is coalesced to ","type":"text"},{"code":"No occupation","type":"codeVoice"},{"text":" when no","type":"text"},{"text":" ","type":"text"},{"code":"Occupation","type":"codeVoice"},{"text":" record is associated with the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":2,"text":"In operator","anchor":"In-operator"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" operator is a logical operator used in ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clauses to determine if","type":"text"},{"text":" ","type":"text"},{"text":"a value matches any value within a specified list or a subquery. It provides a","type":"text"},{"text":" ","type":"text"},{"text":"concise way to filter data based on multiple possible values for a single","type":"text"},{"text":" ","type":"text"},{"text":"column, eliminating the need for multiple or conditions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides three variants of the ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" operator","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"expression: This can be any valid expression or a column from a table.","type":"text"}]},{"inlineContent":[{"text":"value_list: A comma-separated list of literal values (e.g., ‘value1’, ‘value2’, 10, 20).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"subquery: A ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" statement that returns a single column of values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"in"},{"type":"text","text":" operator returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the expression matches any value present in"},{"type":"text","text":" "},{"type":"text","text":"the value_list or the result set of the subquery. If no match is found, it"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Prefixing the expression with the "},{"type":"codeVoice","code":"!"},{"type":"text","text":" (not) operator reverses"},{"type":"text","text":" "},{"type":"text","text":"this logic."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a value_list."}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.occupationId.in([\"eng\", \"sci\"]))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This query retrieves all employees whose department is either ‘eng’ or ‘sci’."}]},{"type":"codeListing","code":["@SQLTable struct Customer {","    var id: String","    var name: String","}","","@SQLTable struct Order {","    var id: String","    var customerId: String","    var date: String","}","","let query = sql { schema in","    let customer = schema.table(Customer.self)","    Select(customer)","    From(customer)","    Where(","        customer.id.in { schema in","            let order = schema.table(Order.self)","            Select(order.customerId)","            From(order)","            Where(order.date > \"2034-01-01\")","        }","    )","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This query retrieves the names of customers who placed an order after January"},{"type":"text","text":" "},{"type":"text","text":"1, 2024."}]}],"kind":"content"}],"metadata":{"role":"article","modules":[{"name":"SwiftQL"}],"title":"Expressions","roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/expressions"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions"},"references":{"doc://SwiftQL/documentation/SwiftQL":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","title":"SwiftQL","url":"\/documentation\/swiftql","abstract":[],"role":"collection","kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/swiftql\/documentation","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","title":"SwiftQL"}}}