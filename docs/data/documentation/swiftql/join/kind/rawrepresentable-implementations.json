{"sections":[],"topicSections":[{"generated":true,"anchor":"Instance-Properties","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/hashValue"],"title":"Instance Properties"},{"generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/hash(into:)"],"title":"Instance Methods"}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/RawRepresentable-Implementations","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind"]]},"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/join\/kind\/rawrepresentable-implementations"]}],"metadata":{"modules":[{"name":"SwiftQL"}],"roleHeading":"API Collection","role":"collectionGroup","title":"RawRepresentable Implementations"},"references":{"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","role":"collection","type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql"},"doc://SwiftQL/documentation/SwiftQL/Join/Kind/hash(into:)":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV","text":"Hasher"},{"kind":"text","text":")"}],"title":"hash(into:)","url":"\/documentation\/swiftql\/join\/kind\/hash(into:)","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","abstract":[],"kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/Join/Kind/hashValue":{"title":"hashValue","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/hashValue","role":"symbol","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","url":"\/documentation\/swiftql\/join\/kind\/hashvalue","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hashValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"abstract":[]},"doc://SwiftQL/documentation/SwiftQL/Join":{"title":"Join","type":"topic","navigatorTitle":[{"text":"Join","kind":"identifier"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join","role":"symbol","kind":"symbol","url":"\/documentation\/swiftql\/join","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Join","kind":"identifier"}],"abstract":[{"type":"text","text":"Note: Right joins are not supported.  A workaround is to LEFT JOIN, and swap the tables in the FROM and JOIN clauses."},{"text":" ","type":"text"},{"text":"Note: “INNER JOIN”, “CROSS JOIN”, “JOIN”, “,” all perform a cartesian product, which returns every possible combination of rows from the two tables.","type":"text"},{"text":" ","type":"text"},{"text":"Note: CROSS JOIN is treated as a special case by XLite in that it returns the cartesian product but does not re-order the tables.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/Join/Kind":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Kind"}],"kind":"symbol","url":"\/documentation\/swiftql\/join\/kind","title":"Join.Kind","abstract":[],"type":"topic","role":"symbol","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind","navigatorTitle":[{"text":"Kind","kind":"identifier"}]}}}