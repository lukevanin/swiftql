{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","metadata":{"role":"collectionGroup","title":"Equatable Implementations","modules":[{"name":"SwiftQL"}],"roleHeading":"API Collection"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/Equatable-Implementations"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/join\/kind\/equatable-implementations"]}],"topicSections":[{"generated":true,"title":"Operators","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/!=(_:_:)"],"anchor":"Operators"}],"references":{"doc://SwiftQL/documentation/SwiftQL/Join/Kind":{"title":"Join.Kind","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Kind"}],"kind":"symbol","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind","url":"\/documentation\/swiftql\/join\/kind","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Kind"}],"role":"symbol","abstract":[]},"doc://SwiftQL/documentation/SwiftQL/Join":{"title":"Join","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Join"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join","kind":"symbol","url":"\/documentation\/swiftql\/join","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Join","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Note: Right joins are not supported.  A workaround is to LEFT JOIN, and swap the tables in the FROM and JOIN clauses.","type":"text"},{"text":" ","type":"text"},{"text":"Note: “INNER JOIN”, “CROSS JOIN”, “JOIN”, “,” all perform a cartesian product, which returns every possible combination of rows from the two tables.","type":"text"},{"text":" ","type":"text"},{"text":"Note: CROSS JOIN is treated as a special case by XLite in that it returns the cartesian product but does not re-order the tables.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL":{"url":"\/documentation\/swiftql","role":"collection","title":"SwiftQL","kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/Join/Kind/!=(_:_:)":{"title":"!=(_:_:)","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/!=(_:_:)","kind":"symbol","url":"\/documentation\/swiftql\/join\/kind\/!=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"role":"symbol","abstract":[]}}}