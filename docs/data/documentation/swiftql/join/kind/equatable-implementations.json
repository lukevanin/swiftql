{"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/Equatable-Implementations"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"API Collection","modules":[{"name":"SwiftQL"}],"role":"collectionGroup","title":"Equatable Implementations"},"topicSections":[{"generated":true,"anchor":"Operators","title":"Operators","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/!=(_:_:)"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/join\/kind\/equatable-implementations"]}],"kind":"article","references":{"doc://SwiftQL/documentation/SwiftQL":{"type":"topic","abstract":[],"role":"collection","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","title":"SwiftQL","url":"\/documentation\/swiftql","kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/Join/Kind/!=(_:_:)":{"url":"\/documentation\/swiftql\/join\/kind\/!=(_:_:)","type":"topic","abstract":[],"kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind\/!=(_:_:)","title":"!=(_:_:)"},"doc://SwiftQL/documentation/SwiftQL/Join":{"abstract":[{"type":"text","text":"Note: Right joins are not supported.  A workaround is to LEFT JOIN, and swap the tables in the FROM and JOIN clauses."},{"text":" ","type":"text"},{"type":"text","text":"Note: “INNER JOIN”, “CROSS JOIN”, “JOIN”, “,” all perform a cartesian product, which returns every possible combination of rows from the two tables."},{"type":"text","text":" "},{"text":"Note: CROSS JOIN is treated as a special case by XLite in that it returns the cartesian product but does not re-order the tables.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join","role":"symbol","kind":"symbol","url":"\/documentation\/swiftql\/join","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Join"}],"navigatorTitle":[{"kind":"identifier","text":"Join"}],"type":"topic","title":"Join"},"doc://SwiftQL/documentation/SwiftQL/Join/Kind":{"url":"\/documentation\/swiftql\/join\/kind","type":"topic","abstract":[],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Kind"}],"navigatorTitle":[{"kind":"identifier","text":"Kind"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Join\/Kind","title":"Join.Kind"}}}