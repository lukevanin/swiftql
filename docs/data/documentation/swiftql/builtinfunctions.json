{"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"metadata":{"title":"Built-in Functions","roleHeading":"Article","role":"article","modules":[{"name":"SwiftQL"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"In this guide we will see some of the functions provided by SwiftQL, including","type":"text"},{"type":"text","text":" "},{"text":"functions provided natively by SQLite.","type":"text"}]},{"text":"Conditional functions","anchor":"Conditional-functions","type":"heading","level":2},{"text":"iif()","anchor":"iif","type":"heading","level":3},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"iif"},{"text":" function in SwiftQL is a conditional function that returns one of two","type":"text"},{"text":" ","type":"text"},{"text":"or more values based on a boolean expression. It functions similarly to a ","type":"text"},{"type":"codeVoice","code":"Case"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement, is logically equivalent to Swift’s’ ","type":"text"},{"code":"if-then-else","type":"codeVoice"},{"text":", and returns a","type":"text"},{"text":" ","type":"text"},{"text":"value based on the first true condition or a default value if all conditions are","type":"text"},{"text":" ","type":"text"},{"text":"false.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following SwiftQL code shows how to use the ","type":"text"},{"code":"iif","type":"codeVoice"},{"text":" function:","type":"text"}]},{"code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This statement returns the persons name in the ","type":"text"},{"code":"person","type":"codeVoice"},{"text":" column, and the word","type":"text"},{"text":" ","type":"text"},{"code":"Unemployed","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"occupation","type":"codeVoice"},{"text":" column if the person’s occupation is ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Employed","type":"codeVoice"},{"text":" if the person’s occupation is not ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"text":"switchCase(), when(), and else()","anchor":"switchCase-when-and-else","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"switchCase-when-then-else","type":"codeVoice"},{"text":" can be used to create conditional expressions","type":"text"},{"text":" ","type":"text"},{"text":"matching more than one condition. SwiftSQL provides two variants.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Condition matching:","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement in Swift, where multiple patterns are compared against a","type":"text"},{"text":" ","type":"text"},{"text":"single condition.","type":"text"}],"type":"paragraph"},{"code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Boolean matching:"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second variant behaves like an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement with multiple boolean"},{"type":"text","text":" "},{"type":"text","text":"conditions, and uses the result from the first boolean condition that evaluates"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Else:"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"Both variants produce an optional type by default, and return a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result if","type":"text"},{"text":" ","type":"text"},{"text":"none of the conditions match. We can use an ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"expression which is used instead, which also changes the result to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"non-optional type."}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"]},{"text":"Date functions","type":"heading","level":2,"anchor":"Date-functions"},{"level":3,"type":"heading","text":"toUnixTimestamp()","anchor":"toUnixTimestamp"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts a string representation of a date to an integer representing the number"},{"type":"text","text":" "},{"type":"text","text":"of seconds since the unix epoch."}]},{"text":"Numeric functions","type":"heading","level":2,"anchor":"Numeric-functions"},{"level":3,"anchor":"abs","text":"abs()","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Returns the absolute value of a numeric field.","type":"text"}]},{"level":3,"anchor":"rounded","text":"rounded()","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the next integer."}]},{"level":3,"anchor":"roundedto","text":"rounded(to:)","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Returns the numeric value rounded to the provide number of decimal places.","type":"text"}]},{"type":"heading","level":3,"text":"floor","anchor":"floor"},{"type":"paragraph","inlineContent":[{"text":"Returns the numeric value rounded to the largest integer less than or equal","type":"text"},{"text":" ","type":"text"},{"text":"to it.","type":"text"}]},{"type":"heading","level":2,"text":"String functions","anchor":"String-functions"},{"type":"heading","level":3,"text":"collate()","anchor":"collate"},{"type":"paragraph","inlineContent":[{"text":"Specifies the collating sequence, or collation, for comparing ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"Collations determine the order and equality of strings during operations such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"OrderBy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"groupBy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Join"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Where"},{"text":" clauses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides three default collating sequences:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"binary","type":"codeVoice"},{"text":": Compares string data using ","type":"text"},{"code":"memcmp()","type":"codeVoice"},{"text":", treating characters as raw","type":"text"},{"text":" ","type":"text"},{"text":"byte sequences. This is the default collation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nocase"},{"type":"text","text":": Similar to "},{"type":"codeVoice","code":"binary"},{"type":"text","text":", but performs case-folding for ASCII characters"},{"type":"text","text":" "},{"type":"text","text":"(converting uppercase ASCII letters to their lowercase equivalents) before"},{"type":"text","text":" "},{"type":"text","text":"comparison. It does not handle full Unicode case-folding."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rtrim"},{"type":"text","text":": Similar to "},{"type":"codeVoice","code":"binary"},{"type":"text","text":", but ignores trailing space characters during"},{"type":"text","text":" "},{"type":"text","text":"comparison."}]}]}]},{"text":"printf()","type":"heading","anchor":"printf","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a formatted string. In SwiftQL "},{"type":"codeVoice","code":"printf()"},{"type":"text","text":" is similar to the same"},{"type":"text","text":" "},{"type":"text","text":"function provided by the standard C library."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Refer to the "},{"isActive":true,"type":"reference","identifier":"https:\/\/sqlite.org\/printf.html"},{"type":"text","text":" documentation for"},{"type":"text","text":" "},{"type":"text","text":"more information."}]},{"text":"Type conversion","type":"heading","anchor":"Type-conversion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL adopts Swift’s conventions and requires expressions of different types"},{"type":"text","text":" "},{"type":"text","text":"to be explicitly converted to a common type when used together in the"},{"type":"text","text":" "},{"type":"text","text":"same expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type conversion of custom types should be implemented as required."}]},{"text":"toInt()","type":"heading","anchor":"toInt","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}]},{"text":"toDouble()","type":"heading","anchor":"toDouble","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}]},{"text":"toString()","type":"heading","anchor":"toString","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"text":"toData()","type":"heading","anchor":"toData","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of type "},{"type":"codeVoice","code":"Data"},{"type":"text","text":"."}]}],"kind":"content"}],"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"generated":true,"anchor":"Essentials"}],"references":{"doc://SwiftQL/documentation/SwiftQL/Expressions":{"kind":"article","url":"\/documentation\/swiftql\/expressions","role":"article","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","title":"Expressions"},"https://sqlite.org/printf.html":{"identifier":"https:\/\/sqlite.org\/printf.html","title":"SQLite printf","type":"link","titleInlineContent":[{"type":"text","text":"SQLite printf"}],"url":"https:\/\/sqlite.org\/printf.html"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Use Combine Publishers to observe changes to the database."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","role":"article","title":"Live queries","url":"\/documentation\/swiftql\/livequeries"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/functionalsyntax","title":"Functional Syntax","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","title":"SwiftQL","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","url":"\/documentation\/swiftql","type":"topic"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","role":"article","title":"Getting started","url":"\/documentation\/swiftql\/gettingstarted"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"type":"topic","kind":"article","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","role":"article","title":"Select Queries","url":"\/documentation\/swiftql\/queries"}}}