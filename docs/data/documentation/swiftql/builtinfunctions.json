{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"generated":true}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"In this guide we will see some of the functions provided by SwiftQL, including","type":"text"},{"text":" ","type":"text"},{"text":"functions provided natively by SQLite.","type":"text"}],"type":"paragraph"},{"text":"Conditional functions","level":2,"anchor":"Conditional-functions","type":"heading"},{"text":"iif()","level":3,"anchor":"iif","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"iif"},{"text":" function in SwiftQL is a conditional function that returns one of two","type":"text"},{"text":" ","type":"text"},{"text":"or more values based on a boolean expression. It functions similarly to a ","type":"text"},{"type":"codeVoice","code":"Case"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement, is logically equivalent to Swift’s’ ","type":"text"},{"type":"codeVoice","code":"if-then-else"},{"text":", and returns a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following SwiftQL code shows how to use the "},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function:"}]},{"syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This statement returns the persons name in the "},{"code":"person","type":"codeVoice"},{"type":"text","text":" column, and the word"},{"type":"text","text":" "},{"type":"codeVoice","code":"Unemployed"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"occupation"},{"type":"text","text":" column if the person’s occupation is "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or "},{"code":"Employed","type":"codeVoice"},{"type":"text","text":" if the person’s occupation is not "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}]},{"type":"heading","level":3,"text":"switchCase(), when(), and else()","anchor":"switchCase-when-and-else"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"switchCase-when-then-else"},{"text":" can be used to create conditional expressions","type":"text"},{"text":" ","type":"text"},{"text":"matching more than one condition. SwiftSQL provides two variants.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Condition matching:"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement in Swift, where multiple patterns are compared against a"},{"type":"text","text":" "},{"type":"text","text":"single condition."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Boolean matching:"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second variant behaves like an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement with multiple boolean"},{"text":" ","type":"text"},{"text":"conditions, and uses the result from the first boolean condition that evaluates","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Else:"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"text":"Both variants produce an optional type by default, and return a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" result if","type":"text"},{"text":" ","type":"text"},{"text":"none of the conditions match. We can use an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"expression which is used instead, which also changes the result to a","type":"text"},{"text":" ","type":"text"},{"text":"non-optional type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"]},{"type":"heading","level":2,"text":"Date functions","anchor":"Date-functions"},{"type":"heading","level":3,"text":"toUnixTimestamp()","anchor":"toUnixTimestamp"},{"inlineContent":[{"text":"Converts a string representation of a date to an integer representing the number","type":"text"},{"text":" ","type":"text"},{"text":"of seconds since the unix epoch.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Numeric functions","anchor":"Numeric-functions"},{"type":"heading","level":3,"text":"abs()","anchor":"abs"},{"inlineContent":[{"text":"Returns the absolute value of a numeric field.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"rounded()","anchor":"rounded"},{"inlineContent":[{"text":"Returns the numeric value rounded to the next integer.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"rounded(to:)","anchor":"roundedto"},{"inlineContent":[{"text":"Returns the numeric value rounded to the provide number of decimal places.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"floor","anchor":"floor"},{"inlineContent":[{"text":"Returns the numeric value rounded to the largest integer less than or equal","type":"text"},{"text":" ","type":"text"},{"text":"to it.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"String functions","anchor":"String-functions"},{"type":"heading","level":3,"text":"collate()","anchor":"collate"},{"inlineContent":[{"text":"Specifies the collating sequence, or collation, for comparing ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"Collations determine the order and equality of strings during operations such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"OrderBy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"groupBy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Join"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Where"},{"text":" clauses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftQL provides three default collating sequences:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"binary","type":"codeVoice"},{"type":"text","text":": Compares string data using "},{"code":"memcmp()","type":"codeVoice"},{"type":"text","text":", treating characters as raw"},{"type":"text","text":" "},{"type":"text","text":"byte sequences. This is the default collation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"nocase","type":"codeVoice"},{"type":"text","text":": Similar to "},{"code":"binary","type":"codeVoice"},{"type":"text","text":", but performs case-folding for ASCII characters"},{"type":"text","text":" "},{"type":"text","text":"(converting uppercase ASCII letters to their lowercase equivalents) before"},{"type":"text","text":" "},{"type":"text","text":"comparison. It does not handle full Unicode case-folding."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"rtrim","type":"codeVoice"},{"type":"text","text":": Similar to "},{"code":"binary","type":"codeVoice"},{"type":"text","text":", but ignores trailing space characters during"},{"type":"text","text":" "},{"type":"text","text":"comparison."}]}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"printf()","anchor":"printf"},{"inlineContent":[{"text":"Returns a formatted string. In SwiftQL ","type":"text"},{"type":"codeVoice","code":"printf()"},{"text":" is similar to the same","type":"text"},{"text":" ","type":"text"},{"text":"function provided by the standard C library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Refer to the ","type":"text"},{"type":"reference","identifier":"https:\/\/sqlite.org\/printf.html","isActive":true},{"text":" documentation for","type":"text"},{"type":"text","text":" "},{"text":"more information.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Type-conversion","level":2,"text":"Type conversion"},{"inlineContent":[{"type":"text","text":"SwiftQL adopts Swift’s conventions and requires expressions of different types"},{"type":"text","text":" "},{"type":"text","text":"to be explicitly converted to a common type when used together in the"},{"type":"text","text":" "},{"type":"text","text":"same expression."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Type conversion of custom types should be implemented as required."}],"type":"paragraph"},{"text":"toInt()","level":3,"anchor":"toInt","type":"heading"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"code":"String","type":"codeVoice"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"toDouble()","level":3,"anchor":"toDouble","type":"heading"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"Int","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" to an expression of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"toString()","anchor":"toString","level":3},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"code":"Data","type":"codeVoice"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":3,"text":"toData()","anchor":"toData"},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" to an expression of type ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"title":"Built-in Functions","modules":[{"name":"SwiftQL"}],"role":"article","roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"sections":[],"abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"references":{"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","role":"collection","title":"SwiftQL","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"type":"topic"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"kind":"article","title":"Getting started","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/Queries":{"kind":"article","title":"Select Queries","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","url":"\/documentation\/swiftql\/queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}]},"https://sqlite.org/printf.html":{"title":"SQLite printf","titleInlineContent":[{"type":"text","text":"SQLite printf"}],"url":"https:\/\/sqlite.org\/printf.html","type":"link","identifier":"https:\/\/sqlite.org\/printf.html"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"kind":"article","role":"article","title":"Functional Syntax","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","url":"\/documentation\/swiftql\/functionalsyntax","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"type":"topic"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"kind":"article","title":"Live queries","role":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","url":"\/documentation\/swiftql\/livequeries","abstract":[{"type":"text","text":"Use Combine Publishers to observe changes to the database."}]},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"kind":"article","role":"article","title":"Expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","url":"\/documentation\/swiftql\/expressions","type":"topic","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}]}}}