{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this guide we will see some of the functions provided by SwiftQL, including"},{"type":"text","text":" "},{"type":"text","text":"functions provided natively by SQLite."}]},{"anchor":"Conditional-functions","level":2,"type":"heading","text":"Conditional functions"},{"anchor":"iif","level":3,"type":"heading","text":"iif()"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"iif","type":"codeVoice"},{"text":" function in SwiftQL is a conditional function that returns one of two","type":"text"},{"text":" ","type":"text"},{"text":"or more values based on a boolean expression. It functions similarly to a ","type":"text"},{"code":"Case","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement, is logically equivalent to Swift’s’ ","type":"text"},{"code":"if-then-else","type":"codeVoice"},{"text":", and returns a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following SwiftQL code shows how to use the "},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function:"}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"paragraph","inlineContent":[{"text":"This statement returns the persons name in the ","type":"text"},{"code":"person","type":"codeVoice"},{"text":" column, and the word","type":"text"},{"text":" ","type":"text"},{"code":"Unemployed","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"occupation","type":"codeVoice"},{"text":" column if the person’s occupation is ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Employed","type":"codeVoice"},{"text":" if the person’s occupation is not ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","text":"switchCase(), when(), and else()","level":3,"anchor":"switchCase-when-and-else"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"switchCase-when-then-else","type":"codeVoice"},{"type":"text","text":" can be used to create conditional expressions"},{"type":"text","text":" "},{"type":"text","text":"matching more than one condition. SwiftSQL provides two variants."}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Condition matching:"}]}]},{"type":"paragraph","inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement in Swift, where multiple patterns are compared against a","type":"text"},{"text":" ","type":"text"},{"text":"single condition.","type":"text"}]},{"code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Boolean matching:"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second variant behaves like an "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement with multiple boolean"},{"type":"text","text":" "},{"type":"text","text":"conditions, and uses the result from the first boolean condition that evaluates"},{"type":"text","text":" "},{"type":"text","text":"to "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Else:","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both variants produce an optional type by default, and return a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result if"},{"type":"text","text":" "},{"type":"text","text":"none of the conditions match. We can use an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"expression which is used instead, which also changes the result to a"},{"type":"text","text":" "},{"type":"text","text":"non-optional type."}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"]},{"level":2,"type":"heading","text":"Date functions","anchor":"Date-functions"},{"level":3,"type":"heading","text":"toUnixTimestamp()","anchor":"toUnixTimestamp"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts a string representation of a date to an integer representing the number"},{"type":"text","text":" "},{"type":"text","text":"of seconds since the unix epoch."}]},{"level":2,"type":"heading","text":"Numeric functions","anchor":"Numeric-functions"},{"level":3,"type":"heading","text":"abs()","anchor":"abs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the absolute value of a numeric field."}]},{"level":3,"type":"heading","text":"rounded()","anchor":"rounded"},{"type":"paragraph","inlineContent":[{"text":"Returns the numeric value rounded to the next integer.","type":"text"}]},{"type":"heading","level":3,"anchor":"roundedto","text":"rounded(to:)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the provide number of decimal places."}]},{"type":"heading","level":3,"anchor":"floor","text":"floor"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the largest integer less than or equal"},{"type":"text","text":" "},{"type":"text","text":"to it."}]},{"level":2,"anchor":"String-functions","type":"heading","text":"String functions"},{"level":3,"anchor":"collate","type":"heading","text":"collate()"},{"inlineContent":[{"type":"text","text":"Specifies the collating sequence, or collation, for comparing "},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Collations determine the order and equality of strings during operations such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"groupBy"},{"type":"text","text":", "},{"code":"Join","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Where"},{"text":" clauses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL provides three default collating sequences:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"binary","type":"codeVoice"},{"type":"text","text":": Compares string data using "},{"type":"codeVoice","code":"memcmp()"},{"type":"text","text":", treating characters as raw"},{"type":"text","text":" "},{"type":"text","text":"byte sequences. This is the default collation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"nocase"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but performs case-folding for ASCII characters","type":"text"},{"type":"text","text":" "},{"text":"(converting uppercase ASCII letters to their lowercase equivalents) before","type":"text"},{"text":" ","type":"text"},{"text":"comparison. It does not handle full Unicode case-folding.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rtrim"},{"type":"text","text":": Similar to "},{"type":"codeVoice","code":"binary"},{"text":", but ignores trailing space characters during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"comparison."}]}]}]},{"text":"printf()","anchor":"printf","type":"heading","level":3},{"inlineContent":[{"text":"Returns a formatted string. In SwiftQL ","type":"text"},{"type":"codeVoice","code":"printf()"},{"type":"text","text":" is similar to the same"},{"type":"text","text":" "},{"text":"function provided by the standard C library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Refer to the "},{"isActive":true,"type":"reference","identifier":"https:\/\/sqlite.org\/printf.html"},{"type":"text","text":" documentation for"},{"text":" ","type":"text"},{"text":"more information.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Type conversion","level":2,"anchor":"Type-conversion"},{"inlineContent":[{"type":"text","text":"SwiftQL adopts Swift’s conventions and requires expressions of different types"},{"type":"text","text":" "},{"type":"text","text":"to be explicitly converted to a common type when used together in the"},{"text":" ","type":"text"},{"text":"same expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Type conversion of custom types should be implemented as required.","type":"text"}],"type":"paragraph"},{"level":3,"text":"toInt()","type":"heading","anchor":"toInt"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"text":"type ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"toDouble","type":"heading","text":"toDouble()"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"text":" to an expression of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"toString()","type":"heading","level":3,"anchor":"toString"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"toData()","anchor":"toData"},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of type ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"article","modules":[{"name":"SwiftQL"}],"title":"Built-in Functions","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"sections":[],"references":{"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","title":"Functional Syntax","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/functionalsyntax","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}]},"doc://SwiftQL/documentation/SwiftQL/Queries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","title":"Select Queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"url":"\/documentation\/swiftql\/queries","type":"topic","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","type":"topic","url":"\/documentation\/swiftql\/livequeries","role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL":{"abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"role":"collection","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","url":"\/documentation\/swiftql","kind":"symbol","title":"SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"url":"\/documentation\/swiftql\/expressions","type":"topic","kind":"article","role":"article"},"https://sqlite.org/printf.html":{"url":"https:\/\/sqlite.org\/printf.html","identifier":"https:\/\/sqlite.org\/printf.html","title":"SQLite printf","type":"link","titleInlineContent":[{"text":"SQLite printf","type":"text"}]}}}