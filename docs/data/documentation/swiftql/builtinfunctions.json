{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"sections":[],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"metadata":{"modules":[{"name":"SwiftQL"}],"title":"Built-in Functions","roleHeading":"Article","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this guide we will see some of the functions provided by SwiftQL, including"},{"type":"text","text":" "},{"text":"functions provided natively by SQLite.","type":"text"}]},{"anchor":"Conditional-functions","type":"heading","text":"Conditional functions","level":2},{"anchor":"iif","text":"iif()","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"iif"},{"text":" function in SwiftQL is a conditional function that returns one of two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or more values based on a boolean expression. It functions similarly to a "},{"code":"Case","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement, is logically equivalent to Swift’s’ ","type":"text"},{"code":"if-then-else","type":"codeVoice"},{"text":", and returns a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"text":"false.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following SwiftQL code shows how to use the ","type":"text"},{"code":"iif","type":"codeVoice"},{"text":" function:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"paragraph","inlineContent":[{"text":"This statement returns the persons name in the ","type":"text"},{"type":"codeVoice","code":"person"},{"type":"text","text":" column, and the word"},{"type":"text","text":" "},{"type":"codeVoice","code":"Unemployed"},{"text":" in the ","type":"text"},{"code":"occupation","type":"codeVoice"},{"type":"text","text":" column if the person’s occupation is "},{"code":"NULL","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"Employed"},{"type":"text","text":" if the person’s occupation is not "},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}]},{"level":3,"type":"heading","text":"switchCase(), when(), and else()","anchor":"switchCase-when-and-else"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switchCase-when-then-else"},{"type":"text","text":" can be used to create conditional expressions"},{"type":"text","text":" "},{"type":"text","text":"matching more than one condition. SwiftSQL provides two variants."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Condition matching:"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement in Swift, where multiple patterns are compared against a","type":"text"},{"text":" ","type":"text"},{"text":"single condition.","type":"text"}],"type":"paragraph"},{"code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Boolean matching:"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second variant behaves like an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement with multiple boolean"},{"type":"text","text":" "},{"type":"text","text":"conditions, and uses the result from the first boolean condition that evaluates"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Else:"}]}],"type":"paragraph"},{"inlineContent":[{"text":"Both variants produce an optional type by default, and return a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" result if","type":"text"},{"text":" ","type":"text"},{"text":"none of the conditions match. We can use an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"expression which is used instead, which also changes the result to a","type":"text"},{"text":" ","type":"text"},{"text":"non-optional type.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"]},{"text":"Date functions","type":"heading","level":2,"anchor":"Date-functions"},{"text":"toUnixTimestamp()","type":"heading","level":3,"anchor":"toUnixTimestamp"},{"inlineContent":[{"text":"Converts a string representation of a date to an integer representing the number","type":"text"},{"text":" ","type":"text"},{"text":"of seconds since the unix epoch.","type":"text"}],"type":"paragraph"},{"text":"Numeric functions","type":"heading","anchor":"Numeric-functions","level":2},{"text":"abs()","type":"heading","anchor":"abs","level":3},{"inlineContent":[{"text":"Returns the absolute value of a numeric field.","type":"text"}],"type":"paragraph"},{"text":"rounded()","type":"heading","anchor":"rounded","level":3},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the next integer."}],"type":"paragraph"},{"text":"rounded(to:)","type":"heading","anchor":"roundedto","level":3},{"inlineContent":[{"text":"Returns the numeric value rounded to the provide number of decimal places.","type":"text"}],"type":"paragraph"},{"anchor":"floor","text":"floor","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Returns the numeric value rounded to the largest integer less than or equal","type":"text"},{"text":" ","type":"text"},{"text":"to it.","type":"text"}]},{"anchor":"String-functions","text":"String functions","type":"heading","level":2},{"anchor":"collate","text":"collate()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Specifies the collating sequence, or collation, for comparing ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"Collations determine the order and equality of strings during operations such as","type":"text"},{"text":" ","type":"text"},{"code":"OrderBy","type":"codeVoice"},{"text":", ","type":"text"},{"code":"groupBy","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Join","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clauses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides three default collating sequences:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"binary"},{"type":"text","text":": Compares string data using "},{"type":"codeVoice","code":"memcmp()"},{"type":"text","text":", treating characters as raw"},{"type":"text","text":" "},{"type":"text","text":"byte sequences. This is the default collation."}]}]},{"content":[{"inlineContent":[{"code":"nocase","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but performs case-folding for ASCII characters","type":"text"},{"text":" ","type":"text"},{"text":"(converting uppercase ASCII letters to their lowercase equivalents) before","type":"text"},{"text":" ","type":"text"},{"text":"comparison. It does not handle full Unicode case-folding.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rtrim"},{"type":"text","text":": Similar to "},{"type":"codeVoice","code":"binary"},{"type":"text","text":", but ignores trailing space characters during"},{"type":"text","text":" "},{"type":"text","text":"comparison."}]}]}],"type":"unorderedList"},{"anchor":"printf","type":"heading","level":3,"text":"printf()"},{"inlineContent":[{"type":"text","text":"Returns a formatted string. In SwiftQL "},{"code":"printf()","type":"codeVoice"},{"type":"text","text":" is similar to the same"},{"type":"text","text":" "},{"type":"text","text":"function provided by the standard C library."}],"type":"paragraph"},{"inlineContent":[{"text":"Refer to the ","type":"text"},{"identifier":"https:\/\/sqlite.org\/printf.html","isActive":true,"type":"reference"},{"text":" documentation for","type":"text"},{"text":" ","type":"text"},{"text":"more information.","type":"text"}],"type":"paragraph"},{"anchor":"Type-conversion","type":"heading","level":2,"text":"Type conversion"},{"inlineContent":[{"text":"SwiftQL adopts Swift’s conventions and requires expressions of different types","type":"text"},{"text":" ","type":"text"},{"text":"to be explicitly converted to a common type when used together in the","type":"text"},{"text":" ","type":"text"},{"text":"same expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Type conversion of custom types should be implemented as required."}],"type":"paragraph"},{"text":"toInt()","anchor":"toInt","type":"heading","level":3},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"toDouble","text":"toDouble()","type":"heading"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"toString","text":"toString()","type":"heading"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", or "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"toData","level":3,"text":"toData()","type":"heading"},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" to an expression of type ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":".","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials","generated":true,"title":"Essentials"}],"references":{"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"type":"topic","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","title":"Getting started","role":"article","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"url":"\/documentation\/swiftql\/gettingstarted"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"kind":"article","type":"topic","url":"\/documentation\/swiftql\/queries","title":"Select Queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"role":"article"},"https://sqlite.org/printf.html":{"type":"link","identifier":"https:\/\/sqlite.org\/printf.html","title":"SQLite printf","titleInlineContent":[{"text":"SQLite printf","type":"text"}],"url":"https:\/\/sqlite.org\/printf.html"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"type":"topic","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","title":"Functional Syntax","role":"article","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/functionalsyntax"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"kind":"article","type":"topic","url":"\/documentation\/swiftql\/livequeries","title":"Live queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"role":"article"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"role":"collection","url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"type":"topic","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","title":"Expressions","role":"article","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"url":"\/documentation\/swiftql\/expressions"}}}