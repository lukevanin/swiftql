{"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"In this guide we will see some of the functions provided by SwiftQL, including","type":"text"},{"text":" ","type":"text"},{"text":"functions provided natively by SQLite.","type":"text"}]},{"type":"heading","level":2,"anchor":"Conditional-functions","text":"Conditional functions"},{"type":"heading","level":3,"anchor":"iif","text":"iif()"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"iif"},{"text":" function in SqiftQL is a conditional function that returns one of two","type":"text"},{"text":" ","type":"text"},{"text":"or more values based on a boolean expression. It functions similarly to a ","type":"text"},{"type":"codeVoice","code":"Case"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"statement, is logically equivalent to Swift’s’ ","type":"text"},{"type":"codeVoice","code":"if-then-else"},{"text":", and returns a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}]},{"type":"paragraph","inlineContent":[{"text":"The following SwiftQL code shows how to use the ","type":"text"},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function:"}]},{"type":"codeListing","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This statement returns the persons name in the "},{"type":"codeVoice","code":"person"},{"type":"text","text":" column, and the word"},{"type":"text","text":" "},{"code":"Unemployed","type":"codeVoice"},{"type":"text","text":" in the "},{"code":"occupation","type":"codeVoice"},{"type":"text","text":" column if the person’s occupation is "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Employed","type":"codeVoice"},{"type":"text","text":" if the person’s occupation is not "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}]},{"text":"switchCase(), when(), and else()","type":"heading","anchor":"switchCase-when-and-else","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switchCase-when-then-else"},{"type":"text","text":" can be used to create conditional expressions"},{"text":" ","type":"text"},{"text":"matching more than one condition. SwiftSQL provides two variants.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Condition matching:"}]}]},{"type":"paragraph","inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement in Swift, where multiple patterns are compared against a","type":"text"},{"text":" ","type":"text"},{"text":"single condition.","type":"text"}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Boolean matching:","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"The second variant behaves like an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement with multiple boolean","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conditions, and uses the result from the first boolean condition that evaluates"},{"type":"text","text":" "},{"type":"text","text":"to "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Else:","type":"text"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Both variants produce an optional type by default, and return a "},{"type":"codeVoice","code":"nil"},{"text":" result if","type":"text"},{"text":" ","type":"text"},{"text":"none of the conditions match. We can use an ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"expression which is used instead, which also changes the result to a","type":"text"},{"text":" ","type":"text"},{"text":"non-optional type.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"],"type":"codeListing"},{"type":"heading","text":"Date functions","level":2,"anchor":"Date-functions"},{"type":"heading","text":"toUnixTimestamp()","level":3,"anchor":"toUnixTimestamp"},{"inlineContent":[{"text":"Converts a string representation of a date to an integer representing the number","type":"text"},{"text":" ","type":"text"},{"text":"of seconds since the unix epoch.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Numeric functions","level":2,"anchor":"Numeric-functions"},{"type":"heading","text":"abs()","level":3,"anchor":"abs"},{"inlineContent":[{"text":"Returns the absolute value of a numeric field.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"rounded()","level":3,"anchor":"rounded"},{"inlineContent":[{"text":"Returns the numeric value rounded to the next integer.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"rounded(to:)","level":3,"anchor":"roundedto"},{"inlineContent":[{"text":"Returns the numeric value rounded to the provide number of decimal places.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"floor","level":3,"anchor":"floor"},{"inlineContent":[{"text":"Returns the numeric value rounded to the largest integer less than or equal","type":"text"},{"text":" ","type":"text"},{"text":"to it.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"String functions","level":2,"anchor":"String-functions"},{"type":"heading","text":"collate()","level":3,"anchor":"collate"},{"inlineContent":[{"type":"text","text":"Specifies the collating sequence, or collation, for comparing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Collations determine the order and equality of strings during operations such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderBy"},{"text":", ","type":"text"},{"code":"groupBy","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Join","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Where","type":"codeVoice"},{"text":" clauses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftQL provides three default collating sequences:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"binary","type":"codeVoice"},{"type":"text","text":": Compares string data using "},{"code":"memcmp()","type":"codeVoice"},{"type":"text","text":", treating characters as raw"},{"type":"text","text":" "},{"type":"text","text":"byte sequences. This is the default collation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"nocase","type":"codeVoice"},{"type":"text","text":": Similar to "},{"code":"binary","type":"codeVoice"},{"type":"text","text":", but performs case-folding for ASCII characters"},{"type":"text","text":" "},{"type":"text","text":"(converting uppercase ASCII letters to their lowercase equivalents) before"},{"type":"text","text":" "},{"type":"text","text":"comparison. It does not handle full Unicode case-folding."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"rtrim","type":"codeVoice"},{"type":"text","text":": Similar to "},{"code":"binary","type":"codeVoice"},{"type":"text","text":", but ignores trailing space characters during"},{"type":"text","text":" "},{"type":"text","text":"comparison."}]}]}]},{"type":"heading","text":"printf()","level":3,"anchor":"printf"},{"inlineContent":[{"text":"Returns a formatted string. In SwiftQL ","type":"text"},{"code":"printf()","type":"codeVoice"},{"text":" is similar to the same","type":"text"},{"text":" ","type":"text"},{"text":"function provided by the standard C library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Refer to the ","type":"text"},{"identifier":"https:\/\/sqlite.org\/printf.html","isActive":true,"type":"reference"},{"text":" documentation for","type":"text"},{"text":" ","type":"text"},{"text":"more information.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Type conversion","level":2,"anchor":"Type-conversion"},{"inlineContent":[{"text":"SwiftQL adopts Swift’s conventions and requires expressions of different types","type":"text"},{"text":" ","type":"text"},{"text":"to be explicitly converted to a common type when used together in the","type":"text"},{"text":" ","type":"text"},{"text":"same expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Type conversion of custom types should be implemented as required.","type":"text"}],"type":"paragraph"},{"anchor":"toInt","text":"toInt()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", or "},{"code":"String","type":"codeVoice"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]},{"anchor":"toDouble","text":"toDouble()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" or "},{"code":"String","type":"codeVoice"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}]},{"anchor":"toString","text":"toString()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]},{"anchor":"toData","text":"toData()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of type ","type":"text"},{"code":"Data","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/swiftql\/builtinfunctions"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","interfaceLanguage":"swift"},"metadata":{"title":"Built-in Functions","modules":[{"name":"SwiftQL"}],"roleHeading":"Article","role":"article"},"references":{"doc://SwiftQL/documentation/SwiftQL/Documentation":{"abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"kind":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","role":"collectionGroup","url":"\/documentation\/swiftql\/documentation","title":"SwiftQL"},"https://sqlite.org/printf.html":{"title":"SQLite printf","titleInlineContent":[{"type":"text","text":"SQLite printf"}],"url":"https:\/\/sqlite.org\/printf.html","type":"link","identifier":"https:\/\/sqlite.org\/printf.html"},"doc://SwiftQL/documentation/SwiftQL":{"url":"\/documentation\/swiftql","role":"collection","title":"SwiftQL","kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"}}}