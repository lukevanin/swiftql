{"metadata":{"roleHeading":"Article","role":"article","title":"Built-in Functions","modules":[{"name":"SwiftQL"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this guide we will see some of the functions provided by SwiftQL, including"},{"type":"text","text":" "},{"type":"text","text":"functions provided natively by SQLite."}]},{"level":2,"type":"heading","text":"Conditional functions","anchor":"Conditional-functions"},{"level":3,"type":"heading","text":"iif()","anchor":"iif"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function in SwiftQL is a conditional function that returns one of two"},{"text":" ","type":"text"},{"type":"text","text":"or more values based on a boolean expression. It functions similarly to a "},{"type":"codeVoice","code":"Case"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"statement, is logically equivalent to Swift’s’ ","type":"text"},{"type":"codeVoice","code":"if-then-else"},{"text":", and returns a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}]},{"type":"paragraph","inlineContent":[{"text":"The following SwiftQL code shows how to use the ","type":"text"},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function:"}]},{"type":"codeListing","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This statement returns the persons name in the "},{"type":"codeVoice","code":"person"},{"text":" column, and the word","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Unemployed"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"occupation"},{"type":"text","text":" column if the person’s occupation is "},{"type":"codeVoice","code":"NULL"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"codeVoice","code":"Employed"},{"text":" if the person’s occupation is not ","type":"text"},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}]},{"level":3,"text":"switchCase(), when(), and else()","type":"heading","anchor":"switchCase-when-and-else"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switchCase-when-then-else"},{"type":"text","text":" can be used to create conditional expressions"},{"type":"text","text":" "},{"type":"text","text":"matching more than one condition. SwiftSQL provides two variants."}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Condition matching:"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The first variant uses a constant term to match and behaves similar to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement in Swift, where multiple patterns are compared against a"},{"type":"text","text":" "},{"type":"text","text":"single condition."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Boolean matching:"}]}],"type":"paragraph"},{"inlineContent":[{"text":"The second variant behaves like an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement with multiple boolean"},{"type":"text","text":" "},{"type":"text","text":"conditions, and uses the result from the first boolean condition that evaluates"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Else:"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Both variants produce an optional type by default, and return a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result if"},{"type":"text","text":" "},{"type":"text","text":"none of the conditions match. We can use an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"expression which is used instead, which also changes the result to a"},{"type":"text","text":" "},{"type":"text","text":"non-optional type."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"]},{"level":2,"text":"Date functions","type":"heading","anchor":"Date-functions"},{"level":3,"text":"toUnixTimestamp()","type":"heading","anchor":"toUnixTimestamp"},{"inlineContent":[{"type":"text","text":"Converts a string representation of a date to an integer representing the number"},{"type":"text","text":" "},{"type":"text","text":"of seconds since the unix epoch."}],"type":"paragraph"},{"level":2,"text":"Numeric functions","type":"heading","anchor":"Numeric-functions"},{"level":3,"text":"abs()","type":"heading","anchor":"abs"},{"inlineContent":[{"type":"text","text":"Returns the absolute value of a numeric field."}],"type":"paragraph"},{"level":3,"text":"rounded()","type":"heading","anchor":"rounded"},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the next integer."}],"type":"paragraph"},{"level":3,"text":"rounded(to:)","type":"heading","anchor":"roundedto"},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the provide number of decimal places."}],"type":"paragraph"},{"level":3,"text":"floor","type":"heading","anchor":"floor"},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the largest integer less than or equal"},{"type":"text","text":" "},{"type":"text","text":"to it."}],"type":"paragraph"},{"level":2,"text":"String functions","type":"heading","anchor":"String-functions"},{"level":3,"text":"collate()","type":"heading","anchor":"collate"},{"inlineContent":[{"type":"text","text":"Specifies the collating sequence, or collation, for comparing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Collations determine the order and equality of strings during operations such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"groupBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"Join"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clauses."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL provides three default collating sequences:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"binary"},{"type":"text","text":": Compares string data using "},{"type":"codeVoice","code":"memcmp()"},{"type":"text","text":", treating characters as raw"},{"type":"text","text":" "},{"text":"byte sequences. This is the default collation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"nocase"},{"text":": Similar to ","type":"text"},{"type":"codeVoice","code":"binary"},{"text":", but performs case-folding for ASCII characters","type":"text"},{"type":"text","text":" "},{"text":"(converting uppercase ASCII letters to their lowercase equivalents) before","type":"text"},{"type":"text","text":" "},{"type":"text","text":"comparison. It does not handle full Unicode case-folding."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"rtrim","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but ignores trailing space characters during","type":"text"},{"text":" ","type":"text"},{"text":"comparison.","type":"text"}]}]}]},{"level":3,"text":"printf()","type":"heading","anchor":"printf"},{"inlineContent":[{"type":"text","text":"Returns a formatted string. In SwiftQL "},{"code":"printf()","type":"codeVoice"},{"type":"text","text":" is similar to the same"},{"type":"text","text":" "},{"type":"text","text":"function provided by the standard C library."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Refer to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/sqlite.org\/printf.html"},{"type":"text","text":" documentation for"},{"type":"text","text":" "},{"type":"text","text":"more information."}],"type":"paragraph"},{"text":"Type conversion","anchor":"Type-conversion","type":"heading","level":2},{"inlineContent":[{"text":"SwiftQL adopts Swift’s conventions and requires expressions of different types","type":"text"},{"text":" ","type":"text"},{"text":"to be explicitly converted to a common type when used together in the","type":"text"},{"text":" ","type":"text"},{"text":"same expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Type conversion of custom types should be implemented as required."}],"type":"paragraph"},{"level":3,"text":"toInt()","type":"heading","anchor":"toInt"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"toDouble()","type":"heading","anchor":"toDouble"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" or "},{"code":"String","type":"codeVoice"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"toString()","type":"heading","anchor":"toString"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"anchor":"toData","type":"heading","text":"toData()","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of type "},{"type":"codeVoice","code":"Data"},{"type":"text","text":"."}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"seeAlsoSections":[{"generated":true,"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"kind":"article","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"references":{"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","kind":"article","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","role":"article","url":"\/documentation\/swiftql\/livequeries"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"url":"\/documentation\/swiftql\/gettingstarted","kind":"article","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","title":"Getting started","type":"topic"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","url":"\/documentation\/swiftql\/queries","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}]},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","role":"article","title":"Expressions"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","title":"SwiftQL"},"https://sqlite.org/printf.html":{"type":"link","identifier":"https:\/\/sqlite.org\/printf.html","url":"https:\/\/sqlite.org\/printf.html","title":"SQLite printf","titleInlineContent":[{"text":"SQLite printf","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"title":"Functional Syntax","abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"url":"\/documentation\/swiftql\/functionalsyntax","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"}}}