{"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"metadata":{"roleHeading":"Article","role":"article","title":"Built-in Functions","modules":[{"name":"SwiftQL"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this guide we will see some of the functions provided by SwiftQL, including"},{"type":"text","text":" "},{"type":"text","text":"functions provided natively by SQLite."}]},{"type":"heading","anchor":"Conditional-functions","text":"Conditional functions","level":2},{"type":"heading","anchor":"iif","text":"iif()","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function in SwiftQL is a conditional function that returns one of two"},{"type":"text","text":" "},{"type":"text","text":"or more values based on a boolean expression. It functions similarly to a "},{"type":"codeVoice","code":"Case"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"statement, is logically equivalent to Swift’s’ "},{"type":"codeVoice","code":"if-then-else"},{"type":"text","text":", and returns a"},{"type":"text","text":" "},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}]},{"type":"paragraph","inlineContent":[{"text":"The following SwiftQL code shows how to use the ","type":"text"},{"code":"iif","type":"codeVoice"},{"text":" function:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"]},{"type":"paragraph","inlineContent":[{"text":"This statement returns the persons name in the ","type":"text"},{"code":"person","type":"codeVoice"},{"text":" column, and the word","type":"text"},{"text":" ","type":"text"},{"code":"Unemployed","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"occupation","type":"codeVoice"},{"text":" column if the person’s occupation is ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Employed","type":"codeVoice"},{"text":" if the person’s occupation is not ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","anchor":"switchCase-when-and-else","text":"switchCase(), when(), and else()","level":3},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"switchCase-when-then-else","type":"codeVoice"},{"text":" can be used to create conditional expressions","type":"text"},{"text":" ","type":"text"},{"text":"matching more than one condition. SwiftSQL provides two variants.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Condition matching:","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement in Swift, where multiple patterns are compared against a","type":"text"},{"text":" ","type":"text"},{"text":"single condition.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Boolean matching:","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"The second variant behaves like an ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement with multiple boolean","type":"text"},{"text":" ","type":"text"},{"text":"conditions, and uses the result from the first boolean condition that evaluates","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Else:"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both variants produce an optional type by default, and return a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result if"},{"type":"text","text":" "},{"type":"text","text":"none of the conditions match. We can use an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"expression which is used instead, which also changes the result to a"},{"type":"text","text":" "},{"type":"text","text":"non-optional type."}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"],"type":"codeListing"},{"anchor":"Date-functions","text":"Date functions","type":"heading","level":2},{"anchor":"toUnixTimestamp","text":"toUnixTimestamp()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts a string representation of a date to an integer representing the number"},{"type":"text","text":" "},{"type":"text","text":"of seconds since the unix epoch."}]},{"anchor":"Numeric-functions","text":"Numeric functions","type":"heading","level":2},{"anchor":"abs","text":"abs()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the absolute value of a numeric field."}]},{"anchor":"rounded","text":"rounded()","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the next integer."}]},{"anchor":"roundedto","text":"rounded(to:)","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the provide number of decimal places."}],"type":"paragraph"},{"level":3,"anchor":"floor","text":"floor","type":"heading"},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the largest integer less than or equal"},{"type":"text","text":" "},{"type":"text","text":"to it."}],"type":"paragraph"},{"level":2,"anchor":"String-functions","text":"String functions","type":"heading"},{"level":3,"anchor":"collate","text":"collate()","type":"heading"},{"inlineContent":[{"type":"text","text":"Specifies the collating sequence, or collation, for comparing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Collations determine the order and equality of strings during operations such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"groupBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"Join"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clauses."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL provides three default collating sequences:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"binary","type":"codeVoice"},{"text":": Compares string data using ","type":"text"},{"code":"memcmp()","type":"codeVoice"},{"text":", treating characters as raw","type":"text"},{"text":" ","type":"text"},{"text":"byte sequences. This is the default collation.","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"nocase","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but performs case-folding for ASCII characters","type":"text"},{"text":" ","type":"text"},{"text":"(converting uppercase ASCII letters to their lowercase equivalents) before","type":"text"},{"text":" ","type":"text"},{"text":"comparison. It does not handle full Unicode case-folding.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"rtrim","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but ignores trailing space characters during","type":"text"},{"text":" ","type":"text"},{"text":"comparison.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"anchor":"printf","text":"printf()","type":"heading"},{"inlineContent":[{"text":"Returns a formatted string. In SwiftQL ","type":"text"},{"code":"printf()","type":"codeVoice"},{"text":" is similar to the same","type":"text"},{"text":" ","type":"text"},{"text":"function provided by the standard C library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Refer to the ","type":"text"},{"isActive":true,"identifier":"https:\/\/sqlite.org\/printf.html","type":"reference"},{"text":" documentation for","type":"text"},{"text":" ","type":"text"},{"text":"more information.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Type-conversion","text":"Type conversion","type":"heading"},{"inlineContent":[{"text":"SwiftQL adopts Swift’s conventions and requires expressions of different types","type":"text"},{"text":" ","type":"text"},{"text":"to be explicitly converted to a common type when used together in the","type":"text"},{"text":" ","type":"text"},{"text":"same expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Type conversion of custom types should be implemented as required.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"toInt","text":"toInt()","type":"heading"},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"toDouble","text":"toDouble()","type":"heading"},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"toString","text":"toString()","type":"heading"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"toData","type":"heading","level":3,"text":"toData()"},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":" to an expression of type "},{"code":"Data","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"generated":true,"anchor":"Essentials"}],"references":{"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","type":"topic","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/gettingstarted","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"role":"article","kind":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","type":"topic","title":"Functional Syntax","url":"\/documentation\/swiftql\/functionalsyntax","abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}]},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","type":"topic","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"title":"Live queries","type":"topic","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"url":"\/documentation\/swiftql\/livequeries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","kind":"article","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","type":"topic","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"url":"\/documentation\/swiftql\/queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","kind":"article","role":"article"},"https://sqlite.org/printf.html":{"identifier":"https:\/\/sqlite.org\/printf.html","url":"https:\/\/sqlite.org\/printf.html","titleInlineContent":[{"text":"SQLite printf","type":"text"}],"title":"SQLite printf","type":"link"},"doc://SwiftQL/documentation/SwiftQL":{"abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"title":"SwiftQL","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","url":"\/documentation\/swiftql","kind":"symbol"}}}