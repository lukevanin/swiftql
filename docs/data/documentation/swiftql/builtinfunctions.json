{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"SwiftQL"}],"title":"Built-in Functions"},"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"],["doc:\/\/SwiftQL\/documentation\/SwiftQL","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation"]]},"abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"In this guide we will see some of the functions provided by SwiftQL, including","type":"text"},{"text":" ","type":"text"},{"text":"functions provided natively by SQLite.","type":"text"}]},{"text":"Conditional functions","level":2,"anchor":"Conditional-functions","type":"heading"},{"level":3,"anchor":"iif","type":"heading","text":"iif()"},{"inlineContent":[{"type":"text","text":"The "},{"code":"iif","type":"codeVoice"},{"type":"text","text":" function in SqiftQL is a conditional function that returns one of two"},{"type":"text","text":" "},{"text":"or more values based on a boolean expression. It functions similarly to a ","type":"text"},{"type":"codeVoice","code":"Case"},{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"statement, is logically equivalent to Swift’s’ "},{"type":"codeVoice","code":"if-then-else"},{"type":"text","text":", and returns a"},{"type":"text","text":" "},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following SwiftQL code shows how to use the ","type":"text"},{"code":"iif","type":"codeVoice"},{"text":" function:","type":"text"}]},{"code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This statement returns the persons name in the "},{"code":"person","type":"codeVoice"},{"type":"text","text":" column, and the word"},{"text":" ","type":"text"},{"code":"Unemployed","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"occupation","type":"codeVoice"},{"text":" column if the person’s occupation is ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"code":"Employed","type":"codeVoice"},{"text":" if the person’s occupation is not ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":".","type":"text"}]},{"level":3,"type":"heading","anchor":"switchCase-when-and-else","text":"switchCase(), when(), and else()"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"switchCase-when-then-else","type":"codeVoice"},{"text":" can be used to create conditional expressions","type":"text"},{"text":" ","type":"text"},{"text":"matching more than one condition. SwiftSQL provides two variants.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Condition matching:","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"The first variant uses a constant term to match and behaves similar to a","type":"text"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement in Swift, where multiple patterns are compared against a","type":"text"},{"text":" ","type":"text"},{"text":"single condition.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Boolean matching:","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"The second variant behaves like an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement with multiple boolean","type":"text"},{"text":" ","type":"text"},{"text":"conditions, and uses the result from the first boolean condition that evaluates","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Else:","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"Both variants produce an optional type by default, and return a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" result if","type":"text"},{"text":" ","type":"text"},{"text":"none of the conditions match. We can use an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"expression which is used instead, which also changes the result to a","type":"text"},{"text":" ","type":"text"},{"text":"non-optional type.","type":"text"}]},{"type":"codeListing","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"],"syntax":"swift"},{"text":"Date functions","type":"heading","anchor":"Date-functions","level":2},{"type":"heading","level":3,"text":"toUnixTimestamp()","anchor":"toUnixTimestamp"},{"type":"paragraph","inlineContent":[{"text":"Converts a string representation of a date to an integer representing the number","type":"text"},{"text":" ","type":"text"},{"text":"of seconds since the unix epoch.","type":"text"}]},{"type":"heading","level":2,"text":"Numeric functions","anchor":"Numeric-functions"},{"text":"abs()","level":3,"anchor":"abs","type":"heading"},{"inlineContent":[{"type":"text","text":"Returns the absolute value of a numeric field."}],"type":"paragraph"},{"level":3,"anchor":"rounded","type":"heading","text":"rounded()"},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the next integer."}],"type":"paragraph"},{"text":"rounded(to:)","level":3,"anchor":"roundedto","type":"heading"},{"inlineContent":[{"text":"Returns the numeric value rounded to the provide number of decimal places.","type":"text"}],"type":"paragraph"},{"text":"floor","type":"heading","anchor":"floor","level":3},{"inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the largest integer less than or equal"},{"text":" ","type":"text"},{"type":"text","text":"to it."}],"type":"paragraph"},{"text":"String functions","type":"heading","anchor":"String-functions","level":2},{"text":"collate()","type":"heading","anchor":"collate","level":3},{"inlineContent":[{"text":"Specifies the collating sequence, or collation, for comparing ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"text":"Collations determine the order and equality of strings during operations such as","type":"text"},{"type":"text","text":" "},{"code":"OrderBy","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"groupBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"Join"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clauses."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL provides three default collating sequences:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"binary"},{"text":": Compares string data using ","type":"text"},{"type":"codeVoice","code":"memcmp()"},{"text":", treating characters as raw","type":"text"},{"type":"text","text":" "},{"text":"byte sequences. This is the default collation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nocase"},{"text":": Similar to ","type":"text"},{"type":"codeVoice","code":"binary"},{"text":", but performs case-folding for ASCII characters","type":"text"},{"text":" ","type":"text"},{"text":"(converting uppercase ASCII letters to their lowercase equivalents) before","type":"text"},{"text":" ","type":"text"},{"text":"comparison. It does not handle full Unicode case-folding.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"rtrim","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but ignores trailing space characters during","type":"text"},{"text":" ","type":"text"},{"text":"comparison.","type":"text"}]}]}]},{"type":"heading","level":3,"text":"printf()","anchor":"printf"},{"type":"paragraph","inlineContent":[{"text":"Returns a formatted string. In SwiftQL ","type":"text"},{"type":"codeVoice","code":"printf()"},{"text":" is similar to the same","type":"text"},{"text":" ","type":"text"},{"text":"function provided by the standard C library.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Refer to the ","type":"text"},{"identifier":"https:\/\/sqlite.org\/printf.html","type":"reference","isActive":true},{"text":" documentation for","type":"text"},{"text":" ","type":"text"},{"text":"more information.","type":"text"}]},{"type":"heading","level":2,"text":"Type conversion","anchor":"Type-conversion"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL adopts Swift’s conventions and requires expressions of different types","type":"text"},{"text":" ","type":"text"},{"text":"to be explicitly converted to a common type when used together in the","type":"text"},{"text":" ","type":"text"},{"text":"same expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Type conversion of custom types should be implemented as required.","type":"text"}]},{"text":"toInt()","type":"heading","anchor":"toInt","level":3},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"toDouble()","type":"heading","anchor":"toDouble","level":3},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of","type":"text"},{"text":" ","type":"text"},{"text":"type ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"toString()","type":"heading","anchor":"toString","level":3},{"inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"toData()","level":3,"anchor":"toData"},{"inlineContent":[{"text":"Converts an expression of type ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" to an expression of type ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","interfaceLanguage":"swift"},"references":{"doc://SwiftQL/documentation/SwiftQL":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","title":"SwiftQL","url":"\/documentation\/swiftql","abstract":[],"role":"collection","kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/Documentation":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/swiftql\/documentation","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","title":"SwiftQL"},"https://sqlite.org/printf.html":{"title":"SQLite printf","titleInlineContent":[{"text":"SQLite printf","type":"text"}],"url":"https:\/\/sqlite.org\/printf.html","type":"link","identifier":"https:\/\/sqlite.org\/printf.html"}}}