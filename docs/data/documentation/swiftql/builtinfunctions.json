{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this guide we will see some of the functions provided by SwiftQL, including"},{"type":"text","text":" "},{"type":"text","text":"functions provided natively by SQLite."}]},{"level":2,"type":"heading","text":"Conditional functions","anchor":"Conditional-functions"},{"level":3,"type":"heading","text":"iif()","anchor":"iif"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function in SwiftQL is a conditional function that returns one of two"},{"type":"text","text":" "},{"type":"text","text":"or more values based on a boolean expression. It functions similarly to a "},{"type":"codeVoice","code":"Case"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"statement, is logically equivalent to Swift’s’ "},{"type":"codeVoice","code":"if-then-else"},{"type":"text","text":", and returns a"},{"type":"text","text":" "},{"type":"text","text":"value based on the first true condition or a default value if all conditions are"},{"type":"text","text":" "},{"type":"text","text":"false."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following SwiftQL code shows how to use the "},{"type":"codeVoice","code":"iif"},{"type":"text","text":" function:"}]},{"syntax":"swift","code":["let statement = sql { schema in","    let person = schema.table(Person.self)","    let occupation = schema.nullableTable(Occupation.self)","    let result = PersonOccupation.columns(","        person: person.name,","        occupation: iif(","            occupation.name.isNull(), ","            then: \"Unemployed\", ","            else: \"Employed\"","        )","    )","    Select(result)","    From(person)","    Join.Left(occupation, on: occupation.id == person.occupationId)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This statement returns the persons name in the "},{"type":"codeVoice","code":"person"},{"type":"text","text":" column, and the word"},{"type":"text","text":" "},{"type":"codeVoice","code":"Unemployed"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"occupation"},{"type":"text","text":" column if the person’s occupation is "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"Employed"},{"type":"text","text":" if the person’s occupation is not "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"switchCase(), when(), and else()","anchor":"switchCase-when-and-else"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switchCase-when-then-else"},{"type":"text","text":" can be used to create conditional expressions"},{"type":"text","text":" "},{"type":"text","text":"matching more than one condition. SwiftSQL provides two variants."}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Condition matching:","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first variant uses a constant term to match and behaves similar to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement in Swift, where multiple patterns are compared against a"},{"type":"text","text":" "},{"type":"text","text":"single condition."}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Boolean matching:","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second variant behaves like an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement with multiple boolean"},{"type":"text","text":" "},{"type":"text","text":"conditions, and uses the result from the first boolean condition that evaluates"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: when(occupation.name == \"Artist\", then: \"Cyan\")","    )","    Select(result)","    From(occupation)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Else:","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both variants produce an optional type by default, and return a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result if"},{"type":"text","text":" "},{"type":"text","text":"none of the conditions match. We can use an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"expression which is used instead, which also changes the result to a"},{"type":"text","text":" "},{"type":"text","text":"non-optional type."}]},{"syntax":"swift","code":["let statement = sql { schema in","    let occupation = schema.table(Occupation.self)","    let result = OccupationColor.columns(","        occupation: occupation.name,","        color: switchCase(occupation.name)","            .when(\"Engineer\", then: \"Red\")","            .when(\"Scientist\", then: \"Blue\")","            .else(\"Green\")","    )","    Select(result)","    From(occupation)","}","let sql = encoder.makeSQL(statement)","let rows = try database.makeRequest(with: statement).fetchAll()"],"type":"codeListing"},{"level":2,"type":"heading","text":"Date functions","anchor":"Date-functions"},{"level":3,"type":"heading","text":"toUnixTimestamp()","anchor":"toUnixTimestamp"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts a string representation of a date to an integer representing the number"},{"type":"text","text":" "},{"type":"text","text":"of seconds since the unix epoch."}]},{"level":2,"type":"heading","text":"Numeric functions","anchor":"Numeric-functions"},{"level":3,"type":"heading","text":"abs()","anchor":"abs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the absolute value of a numeric field."}]},{"level":3,"type":"heading","text":"rounded()","anchor":"rounded"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the next integer."}]},{"level":3,"type":"heading","text":"rounded(to:)","anchor":"roundedto"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the provide number of decimal places."}]},{"level":3,"type":"heading","text":"floor","anchor":"floor"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the numeric value rounded to the largest integer less than or equal"},{"type":"text","text":" "},{"type":"text","text":"to it."}]},{"level":2,"type":"heading","text":"String functions","anchor":"String-functions"},{"level":3,"type":"heading","text":"collate()","anchor":"collate"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specifies the collating sequence, or collation, for comparing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Collations determine the order and equality of strings during operations such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"groupBy"},{"type":"text","text":", "},{"type":"codeVoice","code":"Join"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Where"},{"type":"text","text":" clauses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides three default collating sequences:"}]},{"items":[{"content":[{"inlineContent":[{"code":"binary","type":"codeVoice"},{"text":": Compares string data using ","type":"text"},{"code":"memcmp()","type":"codeVoice"},{"text":", treating characters as raw","type":"text"},{"text":" ","type":"text"},{"text":"byte sequences. This is the default collation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"nocase","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but performs case-folding for ASCII characters","type":"text"},{"text":" ","type":"text"},{"text":"(converting uppercase ASCII letters to their lowercase equivalents) before","type":"text"},{"text":" ","type":"text"},{"text":"comparison. It does not handle full Unicode case-folding.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"rtrim","type":"codeVoice"},{"text":": Similar to ","type":"text"},{"code":"binary","type":"codeVoice"},{"text":", but ignores trailing space characters during","type":"text"},{"text":" ","type":"text"},{"text":"comparison.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"printf()","anchor":"printf"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a formatted string. In SwiftQL "},{"type":"codeVoice","code":"printf()"},{"type":"text","text":" is similar to the same"},{"type":"text","text":" "},{"type":"text","text":"function provided by the standard C library."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Refer to the "},{"isActive":true,"type":"reference","identifier":"https:\/\/sqlite.org\/printf.html"},{"type":"text","text":" documentation for"},{"type":"text","text":" "},{"type":"text","text":"more information."}]},{"level":2,"type":"heading","text":"Type conversion","anchor":"Type-conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL adopts Swift’s conventions and requires expressions of different types"},{"type":"text","text":" "},{"type":"text","text":"to be explicitly converted to a common type when used together in the"},{"type":"text","text":" "},{"type":"text","text":"same expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type conversion of custom types should be implemented as required."}]},{"level":3,"type":"heading","text":"toInt()","anchor":"toInt"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"toDouble()","anchor":"toDouble"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"toString()","anchor":"toString"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" to an expression of"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"toData()","anchor":"toData"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Converts an expression of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to an expression of type "},{"type":"codeVoice","code":"Data"},{"type":"text","text":"."}]}]}],"abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/builtinfunctions"]}],"metadata":{"role":"article","title":"Built-in Functions","modules":[{"name":"SwiftQL"}],"roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions"},"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials","generated":true}],"references":{"doc://SwiftQL/documentation/SwiftQL/Queries":{"title":"Select Queries","kind":"article","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","url":"\/documentation\/swiftql\/queries","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"title":"Expressions","kind":"article","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"url":"\/documentation\/swiftql\/expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","type":"topic","role":"article"},"https://sqlite.org/printf.html":{"identifier":"https:\/\/sqlite.org\/printf.html","type":"link","title":"SQLite printf","titleInlineContent":[{"text":"SQLite printf","type":"text"}],"url":"https:\/\/sqlite.org\/printf.html"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","type":"topic","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"url":"\/documentation\/swiftql\/livequeries","kind":"article","title":"Live queries","role":"article"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","url":"\/documentation\/swiftql","role":"collection"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"title":"Functional Syntax","kind":"article","abstract":[{"text":"Use functional syntax with SwiftQL.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","type":"topic","url":"\/documentation\/swiftql\/functionalsyntax","role":"article"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"title":"Getting started","kind":"article","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","type":"topic","url":"\/documentation\/swiftql\/gettingstarted","role":"article"}}}