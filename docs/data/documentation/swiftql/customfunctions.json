{"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"],"anchor":"Advanced-topics","title":"Advanced topics","generated":true}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"SwiftQL allows custom functions to be installed on the database and called from"},{"type":"text","text":" "},{"type":"text","text":"SQL expressions at runtime in a type safe manner. This guide shows how to:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Define a custom function.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Install the function to make it available to the database engine.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Call the function from an SQL statement.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"For this example we will define a function that computes a distance from two"},{"type":"text","text":" "},{"type":"text","text":"geographic coordinates defined by a latitude and longitude using the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","isActive":true}],"type":"paragraph"},{"anchor":"Defining-a-function","text":"Defining a function","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"To define a custom function, create a class or struct that conforms to the"},{"type":"text","text":" "},{"code":"SQLCustomFunction","type":"codeVoice"},{"type":"text","text":" function protocol, and implement the "},{"code":" definition","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"makeSQL","type":"codeVoice"},{"type":"text","text":" and "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" methods. The constructor accepts parameters which are"},{"type":"text","text":" "},{"type":"text","text":"passed to the function at runtime."}],"type":"paragraph"},{"code":["public struct HaversineDistance: SQLCustomFunction {","    ","    public typealias T = Double","    ","    \/\/ Define the function signature. SQLite uses the name and number of ","    \/\/ parameters to differentiate functions.","    public static let definition = SQLCustomFunctionDefinition(","        name: \"haversineDistance\",","        numberOfArguments: 4","    )","    ","    \/\/ Define parameters which are passed to the function at runtime.","    private let fromLatitude: any SQLExpression","    private let fromLongitude: any SQLExpression","    private let toLatitude: any SQLExpression","    private let toLongitude: any SQLExpression","    ","    init(","        fromLatitude: any SQLExpression<Double>,","        fromLongitude: any SQLExpression<Double>,","        toLatitude: any SQLExpression<Double>,","        toLongitude: any SQLExpression<Double>","    ) {","        self.fromLatitude = fromLatitude","        self.fromLongitude = fromLongitude","        self.toLatitude = toLatitude","        self.toLongitude = toLongitude","    }","    ","    \/\/ Define how the function is formatted into an SQL expression.","    public func makeSQL(context: inout SQLBuilder) {","        context.simpleFunction(name: Self.definition.name) { context in","            context.listItem(expression: fromLatitude.makeSQL)","            context.listItem(expression: fromLongitude.makeSQL)","            context.listItem(expression: toLatitude.makeSQL)","            context.listItem(expression: toLongitude.makeSQL)","        }","    }","    ","    \/\/ Define the implementation details for how the function works. This is ","    \/\/ called at runtime from SQL, and the results are returned to SQL.","    public static func execute(reader: SQLColumnReader) throws -> Double {","        let latA = radians(degrees: reader.readReal(at: 0))","        let lonA = radians(degrees: reader.readReal(at: 1))","        let latB = radians(degrees: reader.readReal(at: 2))","        let lonB = radians(degrees: reader.readReal(at: 3))","        return acos(sin(latA) * sin(latB) + cos(latA) * cos(latB) * cos(lonB - lonA)) * 6371","    }","    ","    \/\/ Helper method called by the function.","    private static func radians(degrees: Double) -> Double {","        (degrees \/ 180) * .pi","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Installing-the-function","text":"Installing the function","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Once the function is defined it needs to be installed on the database. For GRDB"},{"type":"text","text":" "},{"type":"text","text":"this can be done by adding the function in the configuration, or by using the"},{"type":"text","text":" "},{"code":"GRDBDatabaseBuilder","type":"codeVoice"},{"type":"text","text":" provided by SwiftQL:"}],"type":"paragraph"},{"code":["\/\/ Create the builder.","var config = Configuration()","var builder = try GRDBDatabaseBuilder(url: url, configuration: config)","","\/\/ Add the custom function defined above.","builder.addFunction(HaversineDistance.self)","","\/\/ Instantiate the database.","let database = try builder.build()"],"syntax":null,"type":"codeListing"},{"anchor":"Calling-the-function","text":"Calling the function","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The function can be used in any expression of the same type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an example we can compute the distance from a location to all restaurants"},{"type":"text","text":" "},{"type":"text","text":"using our new function."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"First we define the restaurant:"}],"type":"paragraph"},{"code":["@SQLTable struct Restaurant {","    let name: String","    let latitude: Double","    let longitude: Double","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Next we define the result set that returns the name of each restaurant along"},{"type":"text","text":" "},{"type":"text","text":"with the distance to it."}],"type":"paragraph"},{"code":["@SQLResult struct NearbyRestaurant {","    let name: String","    let distance: Double","}"],"syntax":"swift","type":"codeListing"},{"code":["let myLatitude = SQLNamedBindingReference<Double>(name: \"myLatitude\")","let myLongitude = SQLNamedBindingReference<Double>(name: \"myLongitude\")","let query = sql { schema in","    let restaurant = schema.table(Restaurant.self)","    let result = NearbyRestaurant.columns(","        name: restaurant.name,","        distance: HaversineDistance(","            fromLatitude: myLatitude,","            fromLongitude: myLongitude,","            toLatitude: restaurant.latitude,","            toLongitude: restaurant.longitude","        ).round(to: 2)","    )","    Select(result)","    From(restaurant)","    OrderBy(result.distance.ascending())","}","let distanceToRestaurantsRequest = database.makeRequest(with: query)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"We can execute the query passing in our latitude and longitude:"}],"type":"paragraph"},{"code":["var request = distanceToRestaurantsRequest","request.set(myLatitude, -33.877873677687894)","request.set(myLongitude, 18.488075015723)","let restaurants = try request.fetchAll()"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"metadata":{"roleHeading":"Article","role":"article","title":"Custom Functions","modules":[{"name":"SwiftQL"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/customfunctions"]}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"sections":[],"abstract":[{"text":"Create custom functions that can be called from SQL expressions.","type":"text"}],"references":{"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"kind":"article","role":"article","title":"Custom Types","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","url":"\/documentation\/swiftql\/customtypes","type":"topic","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}]},"https://en.wikipedia.org/wiki/Haversine_formula":{"type":"link","title":"Haversine formula","url":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","identifier":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","titleInlineContent":[{"text":"Haversine formula","type":"text"}]},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","role":"collection","title":"SwiftQL","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"type":"topic"},"doc://SwiftQL/documentation/SwiftQL/GenericTableParameters":{"kind":"article","role":"article","title":"Generic Table Parameters","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters","url":"\/documentation\/swiftql\/generictableparameters","type":"topic","abstract":[{"text":"Use generic parameters on table definitions.","type":"text"}]}}}