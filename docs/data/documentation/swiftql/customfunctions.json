{"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/customfunctions"]}],"seeAlsoSections":[{"anchor":"Advanced-topics","title":"Advanced topics","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"metadata":{"roleHeading":"Article","title":"Custom Functions","role":"article","modules":[{"name":"SwiftQL"}]},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL allows custom functions to be installed on the database and called from"},{"type":"text","text":" "},{"type":"text","text":"SQL expressions at runtime in a type safe manner. This guide shows how to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Define a custom function.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Install the function to make it available to the database engine."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Call the function from an SQL statement.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"For this example we will define a function that computes a distance from two","type":"text"},{"text":" ","type":"text"},{"text":"geographic coordinates defined by a latitude and longitude using the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","type":"reference"}]},{"text":"Defining a function","type":"heading","anchor":"Defining-a-function","level":2},{"type":"paragraph","inlineContent":[{"text":"To define a custom function, create a class or struct that conforms to the","type":"text"},{"text":" ","type":"text"},{"code":"SQLCustomFunction","type":"codeVoice"},{"text":" function protocol, and implement the ","type":"text"},{"code":" definition","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"makeSQL","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" methods. The constructor accepts parameters which are","type":"text"},{"text":" ","type":"text"},{"text":"passed to the function at runtime.","type":"text"}]},{"code":["public struct HaversineDistance: SQLCustomFunction {","    ","    public typealias T = Double","    ","    \/\/ Define the function signature. SQLite uses the name and number of ","    \/\/ parameters to differentiate functions.","    public static let definition = SQLCustomFunctionDefinition(","        name: \"haversineDistance\",","        numberOfArguments: 4","    )","    ","    \/\/ Define parameters which are passed to the function at runtime.","    private let fromLatitude: any SQLExpression","    private let fromLongitude: any SQLExpression","    private let toLatitude: any SQLExpression","    private let toLongitude: any SQLExpression","    ","    init(","        fromLatitude: any SQLExpression<Double>,","        fromLongitude: any SQLExpression<Double>,","        toLatitude: any SQLExpression<Double>,","        toLongitude: any SQLExpression<Double>","    ) {","        self.fromLatitude = fromLatitude","        self.fromLongitude = fromLongitude","        self.toLatitude = toLatitude","        self.toLongitude = toLongitude","    }","    ","    \/\/ Define how the function is formatted into an SQL expression.","    public func makeSQL(context: inout SQLBuilder) {","        context.simpleFunction(name: Self.definition.name) { context in","            context.listItem(expression: fromLatitude.makeSQL)","            context.listItem(expression: fromLongitude.makeSQL)","            context.listItem(expression: toLatitude.makeSQL)","            context.listItem(expression: toLongitude.makeSQL)","        }","    }","    ","    \/\/ Define the implementation details for how the function works. This is ","    \/\/ called at runtime from SQL, and the results are returned to SQL.","    public static func execute(reader: SQLColumnReader) throws -> Double {","        let latA = radians(degrees: reader.readReal(at: 0))","        let lonA = radians(degrees: reader.readReal(at: 1))","        let latB = radians(degrees: reader.readReal(at: 2))","        let lonB = radians(degrees: reader.readReal(at: 3))","        return acos(sin(latA) * sin(latB) + cos(latA) * cos(latB) * cos(lonB - lonA)) * 6371","    }","    ","    \/\/ Helper method called by the function.","    private static func radians(degrees: Double) -> Double {","        (degrees \/ 180) * .pi","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Installing the function","type":"heading","level":2,"anchor":"Installing-the-function"},{"inlineContent":[{"text":"Once the function is defined it needs to be installed on the database. For GRDB","type":"text"},{"type":"text","text":" "},{"text":"this can be done by adding the function in the configuration, or by using the","type":"text"},{"text":" ","type":"text"},{"code":"GRDBDatabaseBuilder","type":"codeVoice"},{"text":" provided by SwiftQL:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["\/\/ Create the builder.","var config = Configuration()","var builder = try GRDBDatabaseBuilder(url: url, configuration: config)","","\/\/ Add the custom function defined above.","builder.addFunction(HaversineDistance.self)","","\/\/ Instantiate the database.","let database = try builder.build()"]},{"text":"Calling the function","level":2,"type":"heading","anchor":"Calling-the-function"},{"inlineContent":[{"type":"text","text":"The function can be used in any expression of the same type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As an example we can compute the distance from a location to all restaurants","type":"text"},{"type":"text","text":" "},{"text":"using our new function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"First we define the restaurant:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@SQLTable struct Restaurant {","    let name: String","    let latitude: Double","    let longitude: Double","}"]},{"type":"paragraph","inlineContent":[{"text":"Next we define the result set that returns the name of each restaurant along","type":"text"},{"type":"text","text":" "},{"text":"with the distance to it.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@SQLResult struct NearbyRestaurant {","    let name: String","    let distance: Double","}"]},{"type":"codeListing","syntax":"swift","code":["let myLatitude = SQLNamedBindingReference<Double>(name: \"myLatitude\")","let myLongitude = SQLNamedBindingReference<Double>(name: \"myLongitude\")","let query = sql { schema in","    let restaurant = schema.table(Restaurant.self)","    let result = NearbyRestaurant.columns(","        name: restaurant.name,","        distance: HaversineDistance(","            fromLatitude: myLatitude,","            fromLongitude: myLongitude,","            toLatitude: restaurant.latitude,","            toLongitude: restaurant.longitude","        ).round(to: 2)","    )","    Select(result)","    From(restaurant)","    OrderBy(result.distance.ascending())","}","let distanceToRestaurantsRequest = database.makeRequest(with: query)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can execute the query passing in our latitude and longitude:"}]},{"type":"codeListing","code":["var request = distanceToRestaurantsRequest","request.set(myLatitude, -33.877873677687894)","request.set(myLongitude, 18.488075015723)","let restaurants = try request.fetchAll()"],"syntax":"swift"}],"kind":"content"}],"references":{"doc://SwiftQL/documentation/SwiftQL/GenericTableParameters":{"kind":"article","type":"topic","url":"\/documentation\/swiftql\/generictableparameters","title":"Generic Table Parameters","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters","abstract":[{"text":"Use generic parameters on table definitions.","type":"text"}],"role":"article"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"type":"topic","title":"Custom Types","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","kind":"article","role":"article","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}],"url":"\/documentation\/swiftql\/customtypes"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"role":"collection","url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"},"https://en.wikipedia.org/wiki/Haversine_formula":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","title":"Haversine formula","titleInlineContent":[{"type":"text","text":"Haversine formula"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","type":"link"}}}