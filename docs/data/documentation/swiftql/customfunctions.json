{"metadata":{"role":"article","modules":[{"name":"SwiftQL"}],"title":"Custom Functions","roleHeading":"Article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL allows custom functions to be installed on the database and called from","type":"text"},{"text":" ","type":"text"},{"text":"SQL expressions at runtime in a type safe manner. This guide shows how to:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Define a custom function.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Install the function to make it available to the database engine.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Call the function from an SQL statement.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For this example we will define a function that computes a distance from two"},{"type":"text","text":" "},{"type":"text","text":"geographic coordinates defined by a latitude and longitude using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula"}],"type":"paragraph"},{"text":"Defining a function","anchor":"Defining-a-function","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"To define a custom function, create a class or struct that conforms to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"SQLCustomFunction"},{"type":"text","text":" function protocol, and implement the "},{"type":"codeVoice","code":" definition"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"makeSQL","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" methods. The constructor accepts parameters which are","type":"text"},{"text":" ","type":"text"},{"text":"passed to the function at runtime.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public struct HaversineDistance: SQLCustomFunction {","    ","    public typealias T = Double","    ","    \/\/ Define the function signature. SQLite uses the name and number of ","    \/\/ parameters to differentiate functions.","    public static let definition = SQLCustomFunctionDefinition(","        name: \"haversineDistance\",","        numberOfArguments: 4","    )","    ","    \/\/ Define parameters which are passed to the function at runtime.","    private let fromLatitude: any SQLExpression","    private let fromLongitude: any SQLExpression","    private let toLatitude: any SQLExpression","    private let toLongitude: any SQLExpression","    ","    init(","        fromLatitude: any SQLExpression<Double>,","        fromLongitude: any SQLExpression<Double>,","        toLatitude: any SQLExpression<Double>,","        toLongitude: any SQLExpression<Double>","    ) {","        self.fromLatitude = fromLatitude","        self.fromLongitude = fromLongitude","        self.toLatitude = toLatitude","        self.toLongitude = toLongitude","    }","    ","    \/\/ Define how the function is formatted into an SQL expression.","    public func makeSQL(context: inout SQLBuilder) {","        context.simpleFunction(name: Self.definition.name) { context in","            context.listItem(expression: fromLatitude.makeSQL)","            context.listItem(expression: fromLongitude.makeSQL)","            context.listItem(expression: toLatitude.makeSQL)","            context.listItem(expression: toLongitude.makeSQL)","        }","    }","    ","    \/\/ Define the implementation details for how the function works. This is ","    \/\/ called at runtime from SQL, and the results are returned to SQL.","    public static func execute(reader: SQLColumnReader) throws -> Double {","        let latA = radians(degrees: reader.readReal(at: 0))","        let lonA = radians(degrees: reader.readReal(at: 1))","        let latB = radians(degrees: reader.readReal(at: 2))","        let lonB = radians(degrees: reader.readReal(at: 3))","        return acos(sin(latA) * sin(latB) + cos(latA) * cos(latB) * cos(lonB - lonA)) * 6371","    }","    ","    \/\/ Helper method called by the function.","    private static func radians(degrees: Double) -> Double {","        (degrees \/ 180) * .pi","    }","}"],"type":"codeListing"},{"text":"Installing the function","anchor":"Installing-the-function","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Once the function is defined it needs to be installed on the database. For GRDB","type":"text"},{"text":" ","type":"text"},{"text":"this can be done by adding the function in the configuration, or by using the","type":"text"},{"type":"text","text":" "},{"code":"GRDBDatabaseBuilder","type":"codeVoice"},{"text":" provided by SwiftQL:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["\/\/ Create the builder.","var config = Configuration()","var builder = try GRDBDatabaseBuilder(url: url, configuration: config)","","\/\/ Add the custom function defined above.","builder.addFunction(HaversineDistance.self)","","\/\/ Instantiate the database.","let database = try builder.build()"]},{"level":2,"text":"Calling the function","anchor":"Calling-the-function","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The function can be used in any expression of the same type.","type":"text"}]},{"inlineContent":[{"type":"text","text":"As an example we can compute the distance from a location to all restaurants"},{"text":" ","type":"text"},{"text":"using our new function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"First we define the restaurant:"}],"type":"paragraph"},{"syntax":"swift","code":["@SQLTable struct Restaurant {","    let name: String","    let latitude: Double","    let longitude: Double","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Next we define the result set that returns the name of each restaurant along"},{"type":"text","text":" "},{"type":"text","text":"with the distance to it."}],"type":"paragraph"},{"syntax":"swift","code":["@SQLResult struct NearbyRestaurant {","    let name: String","    let distance: Double","}"],"type":"codeListing"},{"syntax":"swift","code":["let myLatitude = SQLNamedBindingReference<Double>(name: \"myLatitude\")","let myLongitude = SQLNamedBindingReference<Double>(name: \"myLongitude\")","let query = sql { schema in","    let restaurant = schema.table(Restaurant.self)","    let result = NearbyRestaurant.columns(","        name: restaurant.name,","        distance: HaversineDistance(","            fromLatitude: myLatitude,","            fromLongitude: myLongitude,","            toLatitude: restaurant.latitude,","            toLongitude: restaurant.longitude","        ).round(to: 2)","    )","    Select(result)","    From(restaurant)","    OrderBy(result.distance.ascending())","}","let distanceToRestaurantsRequest = database.makeRequest(with: query)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"We can execute the query passing in our latitude and longitude:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var request = distanceToRestaurantsRequest","request.set(myLatitude, -33.877873677687894)","request.set(myLongitude, 18.488075015723)","let restaurants = try request.fetchAll()"]}]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/customfunctions"]}],"seeAlsoSections":[{"title":"Advanced topics","generated":true,"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"],"anchor":"Advanced-topics"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"kind":"article","abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"references":{"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"url":"\/documentation\/swiftql\/customtypes","kind":"article","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}],"role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","title":"Custom Types","type":"topic"},"https://en.wikipedia.org/wiki/Haversine_formula":{"title":"Haversine formula","titleInlineContent":[{"text":"Haversine formula","type":"text"}],"identifier":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","url":"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","type":"link"},"doc://SwiftQL/documentation/SwiftQL/GenericTableParameters":{"abstract":[{"type":"text","text":"Use generic parameters on table definitions."}],"role":"article","title":"Generic Table Parameters","kind":"article","type":"topic","url":"\/documentation\/swiftql\/generictableparameters","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"},"doc://SwiftQL/documentation/SwiftQL":{"kind":"symbol","type":"topic","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"url":"\/documentation\/swiftql","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","role":"collection","title":"SwiftQL"}}}