{"topicSections":[{"anchor":"Essentials","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"title":"Essentials"},{"anchor":"Advanced-topics","identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"],"title":"Advanced topics"}],"metadata":{"role":"collectionGroup","modules":[{"name":"SwiftQL"}],"title":"SwiftQL"},"kind":"article","abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL lets you write type-safe SQLite statements using familiar Swift syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a quick example:"}]},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would be equivalent to writing the following SQL:"}]},{"syntax":"sql","code":["SELECT *","FROM Person AS person","WHERE person.name == 'Fred'"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL is designed to look like the SQL you are acustomed to while adhering to"},{"type":"text","text":" "},{"type":"text","text":"the style and conventions of the Swift language."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL uses the SQL dialect used by SQLite."}]},{"level":2,"type":"heading","text":"Why SQLite?","anchor":"Why-SQLite"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SQLite is a commonly used database used by many iOS and MacOS applications. It"},{"type":"text","text":" "},{"type":"text","text":"has been around forever, runs just about everywhere, and its charactaristics are"},{"type":"text","text":" "},{"type":"text","text":"generally well understood."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides the best the best of both SQLite and Swift: a stable and well"},{"type":"text","text":" "},{"type":"text","text":"defined interface and set of capabilities, accessed through a modern type safe"},{"type":"text","text":" "},{"type":"text","text":"language."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where Swift and SQLite diverge in philosophy, Swift is given preference so that"},{"text":" ","type":"text"},{"text":"the SQL code you write continues to feel like first class Swift. An example is","type":"text"},{"text":" ","type":"text"},{"text":"where SQLite uses flexible typing, SwiftQL adheres to Swift’s strict typing and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provides assurances that SQL statements will not implicitly convert types."},{"text":" ","type":"text"},{"text":"However SwiftQL does not intentionally remove any functionality from SQLite, and","type":"text"},{"text":" ","type":"text"},{"text":"provides utilities for safely casting types when needed.","type":"text"}]},{"level":2,"type":"heading","text":"When to use SwiftQL","anchor":"When-to-use-SwiftQL"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides a safer way to write SQL to interact with an SQLite database,","type":"text"},{"text":" ","type":"text"},{"text":"or if you need a portable self-hosted relational database. SwiftQL lets you:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"Create tables using ","type":"text"},{"type":"codeVoice","code":"Create"},{"text":" statements,","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Modify the database using ","type":"text"},{"type":"codeVoice","code":"Update"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Insert"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Delete"},{"type":"text","text":" statements, and"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Query the database using ","type":"text"},{"code":"Select","type":"codeVoice"},{"text":" statements.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides a way to write SQL statements uing regular Swift syntax which","type":"text"},{"text":" ","type":"text"},{"text":"is checked at compile time.","type":"text"}]},{"inlineContent":[{"text":"By using SwiftQL you gain code completion in your IDE for table and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"column names, and assurances that the SQL code you write is syntactically"},{"type":"text","text":" "},{"type":"text","text":"correct."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When making changes to existing tables, the compiler can provide errors and"},{"type":"text","text":" "},{"type":"text","text":"warnings to indicate where references need to be changed in your code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL ensures that types are handled consistently avoiding errors caused by"},{"type":"text","text":" "},{"text":"implicit type conversion.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"How is SwiftQL different to SwiftData?","anchor":"How-is-SwiftQL-different-to-SwiftData"},{"inlineContent":[{"text":"SwiftData is an object-relational mapping (ORM) framework that allows","type":"text"},{"text":" ","type":"text"},{"text":"applications to persist an object graph. SwiftQL provides an interface to query","type":"text"},{"text":" ","type":"text"},{"text":"and modify a relational database.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"With an ORM such as SwiftData the application primarly interacts with objects.","type":"text"},{"text":" ","type":"text"},{"text":"Relationships between objects are defined by member properties.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"With a relational database the application interacts with rows within tables.","type":"text"},{"text":" ","type":"text"},{"text":"Relationships are defined by joining tables using primary and foreign keys.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Call us biased but believe that relational databases are the Correct Way™️ to","type":"text"},{"text":" ","type":"text"},{"text":"handle large and\/or complicated data sets efficiently.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"variants":[{"paths":["\/documentation\/swiftql\/documentation"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"kind":"article","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","role":"article","url":"\/documentation\/swiftql\/gettingstarted","title":"Getting started"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"kind":"article","title":"Live queries","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","role":"article","abstract":[{"text":"Use Combine Publishers to observe changes to the database.","type":"text"}],"url":"\/documentation\/swiftql\/livequeries"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"kind":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","role":"article","url":"\/documentation\/swiftql\/functionalsyntax","title":"Functional Syntax"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"kind":"article","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}],"url":"\/documentation\/swiftql\/customtypes","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","type":"topic","title":"Custom Types","role":"article"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"kind":"article","title":"Expressions","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","role":"article","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"url":"\/documentation\/swiftql\/expressions"},"doc://SwiftQL/documentation/SwiftQL":{"url":"\/documentation\/swiftql","role":"collection","title":"SwiftQL","kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL"},"doc://SwiftQL/documentation/SwiftQL/CustomFunctions":{"title":"Custom Functions","abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","kind":"article","url":"\/documentation\/swiftql\/customfunctions","type":"topic"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"kind":"article","title":"Select Queries","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","role":"article","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}],"url":"\/documentation\/swiftql\/queries"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"kind":"article","title":"Built-in Functions","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","role":"article","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"url":"\/documentation\/swiftql\/builtinfunctions"},"doc://SwiftQL/documentation/SwiftQL/GenericTableParameters":{"abstract":[{"type":"text","text":"Use generic parameters on table definitions."}],"kind":"article","type":"topic","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters","role":"article","url":"\/documentation\/swiftql\/generictableparameters","title":"Generic Table Parameters"}}}