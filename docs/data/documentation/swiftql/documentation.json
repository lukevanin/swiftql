{"variants":[{"paths":["\/documentation\/swiftql\/documentation"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Write SQL using familiar type-safe Swift syntax."}],"topicSections":[{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials","title":"Essentials"},{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"],"anchor":"Advanced-topics","title":"Advanced topics"}],"metadata":{"role":"collectionGroup","title":"SwiftQL","modules":[{"name":"SwiftQL"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL lets you write type-safe SQLite statements using familiar Swift syntax."}]},{"type":"paragraph","inlineContent":[{"text":"Here is a quick example:","type":"text"}]},{"type":"codeListing","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This would be equivalent to writing the following SQL:","type":"text"}]},{"type":"codeListing","code":["SELECT *","FROM Person AS person","WHERE person.name == 'Fred'"],"syntax":"sql"},{"type":"paragraph","inlineContent":[{"text":"SwiftQL is designed to look like the SQL you are acustomed to while adhering to","type":"text"},{"text":" ","type":"text"},{"text":"the style and conventions of the Swift language.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL uses the SQL dialect used by SQLite.","type":"text"}]},{"type":"heading","level":2,"anchor":"Why-SQLite","text":"Why SQLite?"},{"type":"paragraph","inlineContent":[{"text":"SQLite is a commonly used database used by many iOS and MacOS applications. It","type":"text"},{"text":" ","type":"text"},{"text":"has been around forever, runs just about everywhere, and its charactaristics are","type":"text"},{"text":" ","type":"text"},{"text":"generally well understood.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides the best the best of both SQLite and Swift: a stable and well","type":"text"},{"text":" ","type":"text"},{"text":"defined interface and set of capabilities, accessed through a modern type safe","type":"text"},{"type":"text","text":" "},{"text":"language.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Where Swift and SQLite diverge in philosophy, Swift is given preference so that"},{"type":"text","text":" "},{"type":"text","text":"the SQL code you write continues to feel like first class Swift. An example is"},{"type":"text","text":" "},{"type":"text","text":"where SQLite uses flexible typing, SwiftQL adheres to Swift’s strict typing and"},{"type":"text","text":" "},{"text":"provides assurances that SQL statements will not implicitly convert types.","type":"text"},{"text":" ","type":"text"},{"text":"However SwiftQL does not intentionally remove any functionality from SQLite, and","type":"text"},{"text":" ","type":"text"},{"text":"provides utilities for safely casting types when needed.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"When-to-use-SwiftQL","text":"When to use SwiftQL","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL provides a safer way to write SQL to interact with an SQLite database,"},{"type":"text","text":" "},{"type":"text","text":"or if you need a portable self-hosted relational database. SwiftQL lets you:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Create tables using ","type":"text"},{"type":"codeVoice","code":"Create"},{"text":" statements,","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Modify the database using ","type":"text"},{"type":"codeVoice","code":"Update"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Insert"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Delete"},{"text":" statements, and","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Query the database using ","type":"text"},{"type":"codeVoice","code":"Select"},{"text":" statements.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL provides a way to write SQL statements uing regular Swift syntax which","type":"text"},{"text":" ","type":"text"},{"text":"is checked at compile time.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"By using SwiftQL you gain code completion in your IDE for table and","type":"text"},{"text":" ","type":"text"},{"text":"column names, and assurances that the SQL code you write is syntactically","type":"text"},{"text":" ","type":"text"},{"text":"correct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When making changes to existing tables, the compiler can provide errors and","type":"text"},{"text":" ","type":"text"},{"text":"warnings to indicate where references need to be changed in your code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"SwiftQL ensures that types are handled consistently avoiding errors caused by","type":"text"},{"text":" ","type":"text"},{"text":"implicit type conversion.","type":"text"}]},{"type":"heading","level":2,"anchor":"How-is-SwiftQL-different-to-SwiftData","text":"How is SwiftQL different to SwiftData?"},{"type":"paragraph","inlineContent":[{"text":"SwiftData is an object-relational mapping (ORM) framework that allows","type":"text"},{"text":" ","type":"text"},{"text":"applications to persist an object graph. SwiftQL provides an interface to query","type":"text"},{"text":" ","type":"text"},{"text":"and modify a relational database.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"With an ORM such as SwiftData the application primarly interacts with objects.","type":"text"},{"text":" ","type":"text"},{"text":"Relationships between objects are defined by member properties.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"With a relational database the application interacts with rows within tables.","type":"text"},{"text":" ","type":"text"},{"text":"Relationships are defined by joining tables using primary and foreign keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Call us biased but believe that relational databases are the Correct Way™️ to","type":"text"},{"text":" ","type":"text"},{"text":"handle large and\/or complicated data sets efficiently.","type":"text"}]}],"kind":"content"}],"kind":"article","references":{"doc://SwiftQL/documentation/SwiftQL/Queries":{"type":"topic","title":"Select Queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","abstract":[{"text":"Use joins, aggregates, sorting, subqueries, and common table expressions.","type":"text"}],"role":"article","url":"\/documentation\/swiftql\/queries","kind":"article"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"type":"topic","title":"Expressions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","abstract":[{"text":"In depth discussion of expressions in SwiftQL.","type":"text"}],"role":"article","url":"\/documentation\/swiftql\/expressions","kind":"article"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"type":"topic","title":"Custom Types","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","abstract":[{"text":"Create custom scalar types for table columns.","type":"text"}],"role":"article","url":"\/documentation\/swiftql\/customtypes","kind":"article"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"type":"topic","kind":"article","url":"\/documentation\/swiftql\/functionalsyntax","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"title":"Functional Syntax"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"type":"topic","kind":"article","url":"\/documentation\/swiftql\/gettingstarted","role":"article","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","abstract":[{"text":"Introduces the basic concepts and usage of SwiftQL.","type":"text"}],"title":"Getting started"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"kind":"article","title":"Built-in Functions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","abstract":[{"text":"Functions provided by SwiftQL.","type":"text"}],"role":"article","url":"\/documentation\/swiftql\/builtinfunctions","type":"topic"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"url":"\/documentation\/swiftql\/livequeries","title":"Live queries","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","abstract":[{"type":"text","text":"Use Combine Publishers to observe changes to the database."}],"role":"article","type":"topic","kind":"article"},"doc://SwiftQL/documentation/SwiftQL":{"title":"SwiftQL","role":"collection","type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","url":"\/documentation\/swiftql"},"doc://SwiftQL/documentation/SwiftQL/CustomFunctions":{"url":"\/documentation\/swiftql\/customfunctions","title":"Custom Functions","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"role":"article","type":"topic","kind":"article"},"doc://SwiftQL/documentation/SwiftQL/GenericTableParameters":{"url":"\/documentation\/swiftql\/generictableparameters","title":"Generic Table Parameters","identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters","abstract":[{"text":"Use generic parameters on table definitions.","type":"text"}],"role":"article","type":"topic","kind":"article"}}}