{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftQL lets you write type-safe SQLite statements using familiar Swift syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here is a quick example:"}],"type":"paragraph"},{"syntax":"swift","code":["let query = sql { schema in","    let person = schema.table(Person.self)","    Select(person)","    From(person)","    Where(person.name == 'Fred')","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This would be equivalent to writing the following SQL:"}],"type":"paragraph"},{"syntax":"sql","type":"codeListing","code":["SELECT *","FROM Person AS person","WHERE person.name == 'Fred'"]},{"inlineContent":[{"type":"text","text":"SwiftQL is designed to look like the SQL you are acustomed to while adhering to"},{"type":"text","text":" "},{"type":"text","text":"the style and conventions of the Swift language."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftQL uses the SQL dialect used by SQLite."}]},{"anchor":"Why-SQLite","text":"Why SQLite?","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"SQLite is a commonly used database used by many iOS and MacOS applications. It"},{"type":"text","text":" "},{"type":"text","text":"has been around forever, runs just about everywhere, and its charactaristics are"},{"type":"text","text":" "},{"type":"text","text":"generally well understood."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL provides the best the best of both SQLite and Swift: a stable and well"},{"type":"text","text":" "},{"type":"text","text":"defined interface and set of capabilities, accessed through a modern type safe"},{"type":"text","text":" "},{"type":"text","text":"language."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Where Swift and SQLite diverge in philosophy, Swift is given preference so that"},{"type":"text","text":" "},{"type":"text","text":"the SQL code you write continues to feel like first class Swift. An example is"},{"type":"text","text":" "},{"type":"text","text":"where SQLite uses flexible typing, SwiftQL adheres to Swift’s strict typing and"},{"type":"text","text":" "},{"type":"text","text":"provides assurances that SQL statements will not implicitly convert types."},{"type":"text","text":" "},{"type":"text","text":"However SwiftQL does not intentionally remove any functionality from SQLite, and"},{"type":"text","text":" "},{"type":"text","text":"provides utilities for safely casting types when needed."}],"type":"paragraph"},{"anchor":"When-to-use-SwiftQL","text":"When to use SwiftQL","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftQL provides a safer way to write SQL to interact with an SQLite database,"},{"type":"text","text":" "},{"type":"text","text":"or if you need a portable self-hosted relational database. SwiftQL lets you:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create tables using "},{"code":"Create","type":"codeVoice"},{"type":"text","text":" statements,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Modify the database using "},{"code":"Update","type":"codeVoice"},{"type":"text","text":", "},{"code":"Insert","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Delete","type":"codeVoice"},{"type":"text","text":" statements, and"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Query the database using "},{"code":"Select","type":"codeVoice"},{"type":"text","text":" statements."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"SwiftQL provides a way to write SQL statements uing regular Swift syntax which"},{"type":"text","text":" "},{"type":"text","text":"is checked at compile time."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"By using SwiftQL you gain code completion in your IDE for table and"},{"type":"text","text":" "},{"type":"text","text":"column names, and assurances that the SQL code you write is syntactically"},{"type":"text","text":" "},{"type":"text","text":"correct."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When making changes to existing tables, the compiler can provide errors and"},{"type":"text","text":" "},{"type":"text","text":"warnings to indicate where references need to be changed in your code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftQL ensures that types are handled consistently avoiding errors caused by"},{"type":"text","text":" "},{"type":"text","text":"implicit type conversion."}],"type":"paragraph"},{"anchor":"How-is-SwiftQL-different-to-SwiftData","text":"How is SwiftQL different to SwiftData?","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftData is an object-relational mapping (ORM) framework that allows"},{"type":"text","text":" "},{"type":"text","text":"applications to persist an object graph. SwiftQL provides an interface to query"},{"type":"text","text":" "},{"type":"text","text":"and modify a relational database."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"With an ORM such as SwiftData the application primarly interacts with objects."},{"type":"text","text":" "},{"type":"text","text":"Relationships between objects are defined by member properties."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"With a relational database the application interacts with rows within tables."},{"type":"text","text":" "},{"type":"text","text":"Relationships are defined by joining tables using primary and foreign keys."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Call us biased but believe that relational databases are the Correct Way™️ to"},{"type":"text","text":" "},{"type":"text","text":"handle large and\/or complicated data sets efficiently."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Documentation","interfaceLanguage":"swift"},"sections":[],"metadata":{"title":"SwiftQL","role":"collectionGroup","modules":[{"name":"SwiftQL"}]},"hierarchy":{"paths":[["doc:\/\/SwiftQL\/documentation\/SwiftQL"]]},"kind":"article","abstract":[{"text":"Write SQL using familiar type-safe Swift syntax.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax"],"anchor":"Essentials","title":"Essentials"},{"identifiers":["doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters"],"anchor":"Advanced-topics","title":"Advanced topics"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftql\/documentation"]}],"references":{"doc://SwiftQL/documentation/SwiftQL/CustomFunctions":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/customfunctions","abstract":[{"type":"text","text":"Create custom functions that can be called from SQL expressions."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomFunctions","title":"Custom Functions"},"doc://SwiftQL/documentation/SwiftQL":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL","type":"topic","title":"SwiftQL","url":"\/documentation\/swiftql","abstract":[],"role":"collection","kind":"symbol"},"doc://SwiftQL/documentation/SwiftQL/CustomTypes":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/customtypes","abstract":[{"type":"text","text":"Create custom scalar types for table columns."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/CustomTypes","title":"Custom Types"},"doc://SwiftQL/documentation/SwiftQL/FunctionalSyntax":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/functionalsyntax","abstract":[{"type":"text","text":"Use functional syntax with SwiftQL."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/FunctionalSyntax","title":"Functional Syntax"},"doc://SwiftQL/documentation/SwiftQL/GenericTableParameters":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/generictableparameters","abstract":[{"type":"text","text":"Use generic parameters on table definitions."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GenericTableParameters","title":"Generic Table Parameters"},"doc://SwiftQL/documentation/SwiftQL/LiveQueries":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/livequeries","abstract":[{"type":"text","text":"Use Combine Publishers to observe changes to the database."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/LiveQueries","title":"Live queries"},"doc://SwiftQL/documentation/SwiftQL/Expressions":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/expressions","abstract":[{"type":"text","text":"In depth discussion of expressions in SwiftQL."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Expressions","title":"Expressions"},"doc://SwiftQL/documentation/SwiftQL/BuiltinFunctions":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/builtinfunctions","abstract":[{"type":"text","text":"Functions provided by SwiftQL."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/BuiltinFunctions","title":"Built-in Functions"},"doc://SwiftQL/documentation/SwiftQL/GettingStarted":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftql\/gettingstarted","abstract":[{"type":"text","text":"Introduces the basic concepts and usage of SwiftQL."}],"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/GettingStarted","title":"Getting started"},"doc://SwiftQL/documentation/SwiftQL/Queries":{"identifier":"doc:\/\/SwiftQL\/documentation\/SwiftQL\/Queries","type":"topic","title":"Select Queries","abstract":[{"type":"text","text":"Use joins, aggregates, sorting, subqueries, and common table expressions."}],"url":"\/documentation\/swiftql\/queries","role":"article","kind":"article"}}}